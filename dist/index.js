/*! For license information please see index.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("three"),require("plotly.js-dist")):"function"==typeof define&&define.amd?define(["three","plotly.js-dist"],e):"object"==typeof exports?exports.celestial=e(require("three"),require("plotly.js-dist")):t.celestial=e(t.three,t["plotly.js-dist"])}(this,((t,e)=>(()=>{"use strict";var i={924:t=>{t.exports=e},604:e=>{e.exports=t}},n={};function s(t){var e=n[t];if(void 0!==e)return e.exports;var o=n[t]={exports:{}};return i[t](o,o.exports,s),o.exports}s.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return s.d(e,{a:e}),e},s.d=(t,e)=>{for(var i in e)s.o(e,i)&&!s.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var o={};return(()=>{s.r(o),s.d(o,{BodyCenterTransformation:()=>nt,CelestialBody:()=>e,CentripetalForce:()=>n,CoMTransformation:()=>st,CombinedForce:()=>r,ExplicitEulerSim:()=>h,Gravity:()=>i,LambdaSim:()=>a,LambdaTransformation:()=>p,RealTimeVisualizer:()=>Z,RealTimeVisualizer3D:()=>Q,RecordingVisualizer:()=>tt,RecordingVisualizer3D:()=>et,RotateTransformation:()=>ot,RungeKutta4Sim:()=>u,SemiImplicitEulerSim:()=>d,Simulation:()=>it,State:()=>l,Universe:()=>m,Vector3:()=>t.Vector3,VelocityVerletSim:()=>c});var t=s(604);class e{constructor(t,e,i,n,s){this.label=t,this.mass=e,this.position=i,this.velocity=n,this.acceleration=s}clone(t,i,n){return new e(this.label,this.mass,void 0===t?this.position.clone():t,void 0===i?this.velocity.clone():i,void 0===n?this.acceleration.clone():n)}}class i{constructor(t=6674e-14){this.G=t}getForces(e){let i=e.length,n=[];for(let e=0;e<i;e++)n.push(new t.Vector3(0,0,0));for(let t=0;t<i;t++)for(let s=t+1;s<i;s++){let i=this.calcNewtonian(e[t],e[s]);n[t].add(i),n[s].sub(i)}return n}calcNewtonian(t,e){let i=t.position.distanceToSquared(e.position),n=this.G*t.mass*e.mass/i;return e.position.clone().sub(t.position).normalize().multiplyScalar(n)}}class n{constructor(e=new t.Vector3(0,0,0)){this.center=e}getForces(t){return t.map((t=>{const e=this.center.clone().sub(t.position);return e.setLength(t.mass*t.velocity.lengthSq()/e.length())}))}}class r{constructor(t){this.forces=t}getForces(e){const i=e.map((()=>new t.Vector3(0,0,0)));return this.forces.forEach((t=>{t.getForces(e).forEach(((t,e)=>{i[e].add(t)}))})),i}}class a{constructor(t){this.fn=t}simulate(t,e,i){return this.fn(t,e,i)}}class l{constructor(t){this.bodies=t}clone(){return new l(this.bodies.map((t=>t.clone())))}}class c{constructor(t){this.forceCalculator=t}simulate(t,e){if(t<=0)return e.clone();let i=e.bodies.map((e=>{let i=e.clone();return i.position=this.calcNewPos(i.position,i.velocity,i.acceleration,t),i})),n=this.forceCalculator.getForces(i);return new l(i.map(((e,i)=>{let s=n[i].divideScalar(e.mass);return e.velocity.add(e.acceleration.add(s).multiplyScalar(t/2)),e.acceleration=s,e})))}calcNewPos(t,e,i,n){return t.clone().add(e.clone().multiplyScalar(n)).add(i.clone().multiplyScalar(n*n*.5))}}class h{constructor(t){this.force=t}simulate(t,e){const i=e.bodies.map((e=>e.clone(this.rateUpdate(e.position,e.velocity,t),this.rateUpdate(e.velocity,e.acceleration,t)))),n=this.force.getForces(i);return i.forEach(((t,e)=>{t.acceleration=n[e].divideScalar(t.mass)})),new l(i)}rateUpdate(t,e,i){return e.clone().multiplyScalar(i).add(t)}}class d{constructor(t){this.force=t}simulate(t,e){const i=e.bodies.map((e=>{const i=this.rateUpdate(e.velocity,e.acceleration,t);return e.clone(this.rateUpdate(e.position,i,t),i)})),n=this.force.getForces(i);return i.forEach(((t,e)=>{t.acceleration=n[e].divideScalar(t.mass)})),new l(i)}rateUpdate(t,e,i){return e.clone().multiplyScalar(i).add(t)}}class u{constructor(t,e){this.force=t,this.weights=e}simulate(e,i){let n=i.bodies.map((t=>({kv:[t.acceleration.clone()],kx:[t.velocity.clone()]})));const s=this.getInterKV(i.bodies,n,0,e/2),o=this.getInterKX(i.bodies,n,0,e/2);n.forEach(((t,e)=>{t.kv.push(s[e]),t.kx.push(o[e])}));const r=this.getInterKV(i.bodies,n,1,e/2),a=this.getInterKX(i.bodies,n,1,e/2);n.forEach(((t,e)=>{t.kv.push(r[e]),t.kx.push(a[e])}));const c=this.getInterKV(i.bodies,n,2,e),h=this.getInterKX(i.bodies,n,2,e);n.forEach(((t,e)=>{t.kv.push(c[e]),t.kx.push(h[e])}));const d=i.bodies.map(((i,s)=>{const o=new t.Vector3,r=new t.Vector3;return n[s].kx.forEach(((t,e)=>{o.add(t.multiplyScalar(this.weights[e]))})),n[s].kv.forEach(((t,e)=>{r.add(t.multiplyScalar(this.weights[e]))})),i.clone(o.multiplyScalar(e/6).add(i.position),r.multiplyScalar(e/6).add(i.velocity))})),u=this.force.getForces(d);return d.forEach(((t,e)=>{t.acceleration=u[e].divideScalar(t.mass)})),new l(d)}getInterKV(t,e,i,n){let s=t.map(((t,s)=>{let o=t.clone();return o.position.add(e[s].kx[i].clone().multiplyScalar(n)),o}));return this.force.getForces(s).map(((e,i)=>e.divideScalar(t[i].mass)))}getInterKX(t,e,i,n){return t.map(((t,s)=>t.velocity.clone().add(e[s].kv[i].clone().multiplyScalar(n))))}}class p{constructor(t){this.fn=t}transform(t,e){return this.fn(t,e)}}class m{constructor(t){if(void 0===t.currState)throw new Error("Missing Current State in Universe");if(void 0===t.simFunc)throw new Error("Missing Simulation Function in Universe");this.label=void 0===t.label?"Universe":t.label,this.prevState=void 0===t.prevState?t.currState:t.prevState,this.currState=t.currState,this.color=void 0===t.color?"rgba(255, 255, 255, 1)":t.color,this.simFunc=t.simFunc,this.transformations=void 0===t.transformations?[]:Array.isArray(t.transformations)?t.transformations:[t.transformations]}simulateStep(t){let e=this.simFunc.simulate(t,this.currState,this.prevState);this.prevState=this.currState,this.transformations.forEach((i=>{e=i.transform(e,t)})),this.currState=e}clone(){return new m({prevState:this.prevState,currState:this.currState,color:this.color,label:this.label,simFunc:this.simFunc,transformations:this.transformations})}}class g{constructor(t,e,i,n,s="div"){this.parent=t,this.object=e,this.property=i,this._disabled=!1,this._hidden=!1,this.initialValue=this.getValue(),this.domElement=document.createElement(s),this.domElement.classList.add("controller"),this.domElement.classList.add(n),this.$name=document.createElement("div"),this.$name.classList.add("name"),g.nextNameID=g.nextNameID||0,this.$name.id="lil-gui-name-"+ ++g.nextNameID,this.$widget=document.createElement("div"),this.$widget.classList.add("widget"),this.$disable=this.$widget,this.domElement.appendChild(this.$name),this.domElement.appendChild(this.$widget),this.domElement.addEventListener("keydown",(t=>t.stopPropagation())),this.domElement.addEventListener("keyup",(t=>t.stopPropagation())),this.parent.children.push(this),this.parent.controllers.push(this),this.parent.$children.appendChild(this.domElement),this._listenCallback=this._listenCallback.bind(this),this.name(i)}name(t){return this._name=t,this.$name.textContent=t,this}onChange(t){return this._onChange=t,this}_callOnChange(){this.parent._callOnChange(this),void 0!==this._onChange&&this._onChange.call(this,this.getValue()),this._changed=!0}onFinishChange(t){return this._onFinishChange=t,this}_callOnFinishChange(){this._changed&&(this.parent._callOnFinishChange(this),void 0!==this._onFinishChange&&this._onFinishChange.call(this,this.getValue())),this._changed=!1}reset(){return this.setValue(this.initialValue),this._callOnFinishChange(),this}enable(t=!0){return this.disable(!t)}disable(t=!0){return t===this._disabled||(this._disabled=t,this.domElement.classList.toggle("disabled",t),this.$disable.toggleAttribute("disabled",t)),this}show(t=!0){return this._hidden=!t,this.domElement.style.display=this._hidden?"none":"",this}hide(){return this.show(!1)}options(t){const e=this.parent.add(this.object,this.property,t);return e.name(this._name),this.destroy(),e}min(t){return this}max(t){return this}step(t){return this}decimals(t){return this}listen(t=!0){return this._listening=t,void 0!==this._listenCallbackID&&(cancelAnimationFrame(this._listenCallbackID),this._listenCallbackID=void 0),this._listening&&this._listenCallback(),this}_listenCallback(){this._listenCallbackID=requestAnimationFrame(this._listenCallback);const t=this.save();t!==this._listenPrevValue&&this.updateDisplay(),this._listenPrevValue=t}getValue(){return this.object[this.property]}setValue(t){return this.getValue()!==t&&(this.object[this.property]=t,this._callOnChange(),this.updateDisplay()),this}updateDisplay(){return this}load(t){return this.setValue(t),this._callOnFinishChange(),this}save(){return this.getValue()}destroy(){this.listen(!1),this.parent.children.splice(this.parent.children.indexOf(this),1),this.parent.controllers.splice(this.parent.controllers.indexOf(this),1),this.parent.$children.removeChild(this.domElement)}}class b extends g{constructor(t,e,i){super(t,e,i,"boolean","label"),this.$input=document.createElement("input"),this.$input.setAttribute("type","checkbox"),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$widget.appendChild(this.$input),this.$input.addEventListener("change",(()=>{this.setValue(this.$input.checked),this._callOnFinishChange()})),this.$disable=this.$input,this.updateDisplay()}updateDisplay(){return this.$input.checked=this.getValue(),this}}function f(t){let e,i;return(e=t.match(/(#|0x)?([a-f0-9]{6})/i))?i=e[2]:(e=t.match(/rgb\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*\)/))?i=parseInt(e[1]).toString(16).padStart(2,0)+parseInt(e[2]).toString(16).padStart(2,0)+parseInt(e[3]).toString(16).padStart(2,0):(e=t.match(/^#?([a-f0-9])([a-f0-9])([a-f0-9])$/i))&&(i=e[1]+e[1]+e[2]+e[2]+e[3]+e[3]),!!i&&"#"+i}const v={isPrimitive:!0,match:t=>"number"==typeof t,fromHexString:t=>parseInt(t.substring(1),16),toHexString:t=>"#"+t.toString(16).padStart(6,0)},y={isPrimitive:!1,match:t=>Array.isArray(t),fromHexString(t,e,i=1){const n=v.fromHexString(t);e[0]=(n>>16&255)/255*i,e[1]=(n>>8&255)/255*i,e[2]=(255&n)/255*i},toHexString:([t,e,i],n=1)=>v.toHexString(t*(n=255/n)<<16^e*n<<8^i*n)},w={isPrimitive:!1,match:t=>Object(t)===t,fromHexString(t,e,i=1){const n=v.fromHexString(t);e.r=(n>>16&255)/255*i,e.g=(n>>8&255)/255*i,e.b=(255&n)/255*i},toHexString:({r:t,g:e,b:i},n=1)=>v.toHexString(t*(n=255/n)<<16^e*n<<8^i*n)},A=[{isPrimitive:!0,match:t=>"string"==typeof t,fromHexString:f,toHexString:f},v,y,w];class x extends g{constructor(t,e,i,n){var s;super(t,e,i,"color"),this.$input=document.createElement("input"),this.$input.setAttribute("type","color"),this.$input.setAttribute("tabindex",-1),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$text=document.createElement("input"),this.$text.setAttribute("type","text"),this.$text.setAttribute("spellcheck","false"),this.$text.setAttribute("aria-labelledby",this.$name.id),this.$display=document.createElement("div"),this.$display.classList.add("display"),this.$display.appendChild(this.$input),this.$widget.appendChild(this.$display),this.$widget.appendChild(this.$text),this._format=(s=this.initialValue,A.find((t=>t.match(s)))),this._rgbScale=n,this._initialValueHexString=this.save(),this._textFocused=!1,this.$input.addEventListener("input",(()=>{this._setValueFromHexString(this.$input.value)})),this.$input.addEventListener("blur",(()=>{this._callOnFinishChange()})),this.$text.addEventListener("input",(()=>{const t=f(this.$text.value);t&&this._setValueFromHexString(t)})),this.$text.addEventListener("focus",(()=>{this._textFocused=!0,this.$text.select()})),this.$text.addEventListener("blur",(()=>{this._textFocused=!1,this.updateDisplay(),this._callOnFinishChange()})),this.$disable=this.$text,this.updateDisplay()}reset(){return this._setValueFromHexString(this._initialValueHexString),this}_setValueFromHexString(t){if(this._format.isPrimitive){const e=this._format.fromHexString(t);this.setValue(e)}else this._format.fromHexString(t,this.getValue(),this._rgbScale),this._callOnChange(),this.updateDisplay()}save(){return this._format.toHexString(this.getValue(),this._rgbScale)}load(t){return this._setValueFromHexString(t),this._callOnFinishChange(),this}updateDisplay(){return this.$input.value=this._format.toHexString(this.getValue(),this._rgbScale),this._textFocused||(this.$text.value=this.$input.value.substring(1)),this.$display.style.backgroundColor=this.$input.value,this}}class E extends g{constructor(t,e,i){super(t,e,i,"function"),this.$button=document.createElement("button"),this.$button.appendChild(this.$name),this.$widget.appendChild(this.$button),this.$button.addEventListener("click",(t=>{t.preventDefault(),this.getValue().call(this.object),this._callOnChange()})),this.$button.addEventListener("touchstart",(()=>{}),{passive:!0}),this.$disable=this.$button}}class S extends g{constructor(t,e,i,n,s,o){super(t,e,i,"number"),this._initInput(),this.min(n),this.max(s);const r=void 0!==o;this.step(r?o:this._getImplicitStep(),r),this.updateDisplay()}decimals(t){return this._decimals=t,this.updateDisplay(),this}min(t){return this._min=t,this._onUpdateMinMax(),this}max(t){return this._max=t,this._onUpdateMinMax(),this}step(t,e=!0){return this._step=t,this._stepExplicit=e,this}updateDisplay(){const t=this.getValue();if(this._hasSlider){let e=(t-this._min)/(this._max-this._min);e=Math.max(0,Math.min(e,1)),this.$fill.style.width=100*e+"%"}return this._inputFocused||(this.$input.value=void 0===this._decimals?t:t.toFixed(this._decimals)),this}_initInput(){this.$input=document.createElement("input"),this.$input.setAttribute("type","text"),this.$input.setAttribute("aria-labelledby",this.$name.id),window.matchMedia("(pointer: coarse)").matches&&(this.$input.setAttribute("type","number"),this.$input.setAttribute("step","any")),this.$widget.appendChild(this.$input),this.$disable=this.$input;const t=t=>{const e=parseFloat(this.$input.value);isNaN(e)||(this._snapClampSetValue(e+t),this.$input.value=this.getValue())};let e,i,n,s,o,r=!1;const a=t=>{if(r){const n=t.clientX-e,s=t.clientY-i;Math.abs(s)>5?(t.preventDefault(),this.$input.blur(),r=!1,this._setDraggingStyle(!0,"vertical")):Math.abs(n)>5&&l()}if(!r){const e=t.clientY-n;o-=e*this._step*this._arrowKeyMultiplier(t),s+o>this._max?o=this._max-s:s+o<this._min&&(o=this._min-s),this._snapClampSetValue(s+o)}n=t.clientY},l=()=>{this._setDraggingStyle(!1,"vertical"),this._callOnFinishChange(),window.removeEventListener("mousemove",a),window.removeEventListener("mouseup",l)};this.$input.addEventListener("input",(()=>{let t=parseFloat(this.$input.value);isNaN(t)||(this._stepExplicit&&(t=this._snap(t)),this.setValue(this._clamp(t)))})),this.$input.addEventListener("keydown",(e=>{"Enter"===e.key&&this.$input.blur(),"ArrowUp"===e.code&&(e.preventDefault(),t(this._step*this._arrowKeyMultiplier(e))),"ArrowDown"===e.code&&(e.preventDefault(),t(this._step*this._arrowKeyMultiplier(e)*-1))})),this.$input.addEventListener("wheel",(e=>{this._inputFocused&&(e.preventDefault(),t(this._step*this._normalizeMouseWheel(e)))}),{passive:!1}),this.$input.addEventListener("mousedown",(t=>{e=t.clientX,i=n=t.clientY,r=!0,s=this.getValue(),o=0,window.addEventListener("mousemove",a),window.addEventListener("mouseup",l)})),this.$input.addEventListener("focus",(()=>{this._inputFocused=!0})),this.$input.addEventListener("blur",(()=>{this._inputFocused=!1,this.updateDisplay(),this._callOnFinishChange()}))}_initSlider(){this._hasSlider=!0,this.$slider=document.createElement("div"),this.$slider.classList.add("slider"),this.$fill=document.createElement("div"),this.$fill.classList.add("fill"),this.$slider.appendChild(this.$fill),this.$widget.insertBefore(this.$slider,this.$input),this.domElement.classList.add("hasSlider");const t=t=>{const e=this.$slider.getBoundingClientRect();let i=(n=t,s=e.left,o=e.right,r=this._min,(n-s)/(o-s)*(this._max-r)+r);var n,s,o,r;this._snapClampSetValue(i)},e=e=>{t(e.clientX)},i=()=>{this._callOnFinishChange(),this._setDraggingStyle(!1),window.removeEventListener("mousemove",e),window.removeEventListener("mouseup",i)};let n,s,o=!1;const r=e=>{e.preventDefault(),this._setDraggingStyle(!0),t(e.touches[0].clientX),o=!1},a=e=>{if(o){const t=e.touches[0].clientX-n,i=e.touches[0].clientY-s;Math.abs(t)>Math.abs(i)?r(e):(window.removeEventListener("touchmove",a),window.removeEventListener("touchend",l))}else e.preventDefault(),t(e.touches[0].clientX)},l=()=>{this._callOnFinishChange(),this._setDraggingStyle(!1),window.removeEventListener("touchmove",a),window.removeEventListener("touchend",l)},c=this._callOnFinishChange.bind(this);let h;this.$slider.addEventListener("mousedown",(n=>{this._setDraggingStyle(!0),t(n.clientX),window.addEventListener("mousemove",e),window.addEventListener("mouseup",i)})),this.$slider.addEventListener("touchstart",(t=>{t.touches.length>1||(this._hasScrollBar?(n=t.touches[0].clientX,s=t.touches[0].clientY,o=!0):r(t),window.addEventListener("touchmove",a,{passive:!1}),window.addEventListener("touchend",l))}),{passive:!1}),this.$slider.addEventListener("wheel",(t=>{if(Math.abs(t.deltaX)<Math.abs(t.deltaY)&&this._hasScrollBar)return;t.preventDefault();const e=this._normalizeMouseWheel(t)*this._step;this._snapClampSetValue(this.getValue()+e),this.$input.value=this.getValue(),clearTimeout(h),h=setTimeout(c,400)}),{passive:!1})}_setDraggingStyle(t,e="horizontal"){this.$slider&&this.$slider.classList.toggle("active",t),document.body.classList.toggle("lil-gui-dragging",t),document.body.classList.toggle(`lil-gui-${e}`,t)}_getImplicitStep(){return this._hasMin&&this._hasMax?(this._max-this._min)/1e3:.1}_onUpdateMinMax(){!this._hasSlider&&this._hasMin&&this._hasMax&&(this._stepExplicit||this.step(this._getImplicitStep(),!1),this._initSlider(),this.updateDisplay())}_normalizeMouseWheel(t){let{deltaX:e,deltaY:i}=t;return Math.floor(t.deltaY)!==t.deltaY&&t.wheelDelta&&(e=0,i=-t.wheelDelta/120,i*=this._stepExplicit?1:10),e+-i}_arrowKeyMultiplier(t){let e=this._stepExplicit?1:10;return t.shiftKey?e*=10:t.altKey&&(e/=10),e}_snap(t){const e=Math.round(t/this._step)*this._step;return parseFloat(e.toPrecision(15))}_clamp(t){return t<this._min&&(t=this._min),t>this._max&&(t=this._max),t}_snapClampSetValue(t){this.setValue(this._clamp(this._snap(t)))}get _hasScrollBar(){const t=this.parent.root.$children;return t.scrollHeight>t.clientHeight}get _hasMin(){return void 0!==this._min}get _hasMax(){return void 0!==this._max}}class _ extends g{constructor(t,e,i,n){super(t,e,i,"option"),this.$select=document.createElement("select"),this.$select.setAttribute("aria-labelledby",this.$name.id),this.$display=document.createElement("div"),this.$display.classList.add("display"),this.$select.addEventListener("change",(()=>{this.setValue(this._values[this.$select.selectedIndex]),this._callOnFinishChange()})),this.$select.addEventListener("focus",(()=>{this.$display.classList.add("focus")})),this.$select.addEventListener("blur",(()=>{this.$display.classList.remove("focus")})),this.$widget.appendChild(this.$select),this.$widget.appendChild(this.$display),this.$disable=this.$select,this.options(n)}options(t){return this._values=Array.isArray(t)?t:Object.values(t),this._names=Array.isArray(t)?t:Object.keys(t),this.$select.replaceChildren(),this._names.forEach((t=>{const e=document.createElement("option");e.textContent=t,this.$select.appendChild(e)})),this.updateDisplay(),this}updateDisplay(){const t=this.getValue(),e=this._values.indexOf(t);return this.$select.selectedIndex=e,this.$display.textContent=-1===e?t:this._names[e],this}}class C extends g{constructor(t,e,i){super(t,e,i,"string"),this.$input=document.createElement("input"),this.$input.setAttribute("type","text"),this.$input.setAttribute("spellcheck","false"),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$input.addEventListener("input",(()=>{this.setValue(this.$input.value)})),this.$input.addEventListener("keydown",(t=>{"Enter"===t.code&&this.$input.blur()})),this.$input.addEventListener("blur",(()=>{this._callOnFinishChange()})),this.$widget.appendChild(this.$input),this.$disable=this.$input,this.updateDisplay()}updateDisplay(){return this.$input.value=this.getValue(),this}}let M=!1;class k{constructor({parent:t,autoPlace:e=void 0===t,container:i,width:n,title:s="Controls",closeFolders:o=!1,injectStyles:r=!0,touchStyles:a=!0}={}){if(this.parent=t,this.root=t?t.root:this,this.children=[],this.controllers=[],this.folders=[],this._closed=!1,this._hidden=!1,this.domElement=document.createElement("div"),this.domElement.classList.add("lil-gui"),this.$title=document.createElement("div"),this.$title.classList.add("title"),this.$title.setAttribute("role","button"),this.$title.setAttribute("aria-expanded",!0),this.$title.setAttribute("tabindex",0),this.$title.addEventListener("click",(()=>this.openAnimated(this._closed))),this.$title.addEventListener("keydown",(t=>{"Enter"!==t.code&&"Space"!==t.code||(t.preventDefault(),this.$title.click())})),this.$title.addEventListener("touchstart",(()=>{}),{passive:!0}),this.$children=document.createElement("div"),this.$children.classList.add("children"),this.domElement.appendChild(this.$title),this.domElement.appendChild(this.$children),this.title(s),this.parent)return this.parent.children.push(this),this.parent.folders.push(this),void this.parent.$children.appendChild(this.domElement);this.domElement.classList.add("root"),a&&this.domElement.classList.add("allow-touch-styles"),!M&&r&&(function(t){const e=document.createElement("style");e.innerHTML='.lil-gui {\n  font-family: var(--font-family);\n  font-size: var(--font-size);\n  line-height: 1;\n  font-weight: normal;\n  font-style: normal;\n  text-align: left;\n  color: var(--text-color);\n  user-select: none;\n  -webkit-user-select: none;\n  touch-action: manipulation;\n  --background-color: #1f1f1f;\n  --text-color: #ebebeb;\n  --title-background-color: #111111;\n  --title-text-color: #ebebeb;\n  --widget-color: #424242;\n  --hover-color: #4f4f4f;\n  --focus-color: #595959;\n  --number-color: #2cc9ff;\n  --string-color: #a2db3c;\n  --font-size: 11px;\n  --input-font-size: 11px;\n  --font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Arial, sans-serif;\n  --font-family-mono: Menlo, Monaco, Consolas, "Droid Sans Mono", monospace;\n  --padding: 4px;\n  --spacing: 4px;\n  --widget-height: 20px;\n  --title-height: calc(var(--widget-height) + var(--spacing) * 1.25);\n  --name-width: 45%;\n  --slider-knob-width: 2px;\n  --slider-input-width: 27%;\n  --color-input-width: 27%;\n  --slider-input-min-width: 45px;\n  --color-input-min-width: 45px;\n  --folder-indent: 7px;\n  --widget-padding: 0 0 0 3px;\n  --widget-border-radius: 2px;\n  --checkbox-size: calc(0.75 * var(--widget-height));\n  --scrollbar-width: 5px;\n}\n.lil-gui, .lil-gui * {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n.lil-gui.root {\n  width: var(--width, 245px);\n  display: flex;\n  flex-direction: column;\n  background: var(--background-color);\n}\n.lil-gui.root > .title {\n  background: var(--title-background-color);\n  color: var(--title-text-color);\n}\n.lil-gui.root > .children {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n.lil-gui.root > .children::-webkit-scrollbar {\n  width: var(--scrollbar-width);\n  height: var(--scrollbar-width);\n  background: var(--background-color);\n}\n.lil-gui.root > .children::-webkit-scrollbar-thumb {\n  border-radius: var(--scrollbar-width);\n  background: var(--focus-color);\n}\n@media (pointer: coarse) {\n  .lil-gui.allow-touch-styles, .lil-gui.allow-touch-styles .lil-gui {\n    --widget-height: 28px;\n    --padding: 6px;\n    --spacing: 6px;\n    --font-size: 13px;\n    --input-font-size: 16px;\n    --folder-indent: 10px;\n    --scrollbar-width: 7px;\n    --slider-input-min-width: 50px;\n    --color-input-min-width: 65px;\n  }\n}\n.lil-gui.force-touch-styles, .lil-gui.force-touch-styles .lil-gui {\n  --widget-height: 28px;\n  --padding: 6px;\n  --spacing: 6px;\n  --font-size: 13px;\n  --input-font-size: 16px;\n  --folder-indent: 10px;\n  --scrollbar-width: 7px;\n  --slider-input-min-width: 50px;\n  --color-input-min-width: 65px;\n}\n.lil-gui.autoPlace {\n  max-height: 100%;\n  position: fixed;\n  top: 0;\n  right: 15px;\n  z-index: 1001;\n}\n\n.lil-gui .controller {\n  display: flex;\n  align-items: center;\n  padding: 0 var(--padding);\n  margin: var(--spacing) 0;\n}\n.lil-gui .controller.disabled {\n  opacity: 0.5;\n}\n.lil-gui .controller.disabled, .lil-gui .controller.disabled * {\n  pointer-events: none !important;\n}\n.lil-gui .controller > .name {\n  min-width: var(--name-width);\n  flex-shrink: 0;\n  white-space: pre;\n  padding-right: var(--spacing);\n  line-height: var(--widget-height);\n}\n.lil-gui .controller .widget {\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  min-height: var(--widget-height);\n}\n.lil-gui .controller.string input {\n  color: var(--string-color);\n}\n.lil-gui .controller.boolean {\n  cursor: pointer;\n}\n.lil-gui .controller.color .display {\n  width: 100%;\n  height: var(--widget-height);\n  border-radius: var(--widget-border-radius);\n  position: relative;\n}\n@media (hover: hover) {\n  .lil-gui .controller.color .display:hover:before {\n    content: " ";\n    display: block;\n    position: absolute;\n    border-radius: var(--widget-border-radius);\n    border: 1px solid #fff9;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n}\n.lil-gui .controller.color input[type=color] {\n  opacity: 0;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n}\n.lil-gui .controller.color input[type=text] {\n  margin-left: var(--spacing);\n  font-family: var(--font-family-mono);\n  min-width: var(--color-input-min-width);\n  width: var(--color-input-width);\n  flex-shrink: 0;\n}\n.lil-gui .controller.option select {\n  opacity: 0;\n  position: absolute;\n  width: 100%;\n  max-width: 100%;\n}\n.lil-gui .controller.option .display {\n  position: relative;\n  pointer-events: none;\n  border-radius: var(--widget-border-radius);\n  height: var(--widget-height);\n  line-height: var(--widget-height);\n  max-width: 100%;\n  overflow: hidden;\n  word-break: break-all;\n  padding-left: 0.55em;\n  padding-right: 1.75em;\n  background: var(--widget-color);\n}\n@media (hover: hover) {\n  .lil-gui .controller.option .display.focus {\n    background: var(--focus-color);\n  }\n}\n.lil-gui .controller.option .display.active {\n  background: var(--focus-color);\n}\n.lil-gui .controller.option .display:after {\n  font-family: "lil-gui";\n  content: "↕";\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  padding-right: 0.375em;\n}\n.lil-gui .controller.option .widget,\n.lil-gui .controller.option select {\n  cursor: pointer;\n}\n@media (hover: hover) {\n  .lil-gui .controller.option .widget:hover .display {\n    background: var(--hover-color);\n  }\n}\n.lil-gui .controller.number input {\n  color: var(--number-color);\n}\n.lil-gui .controller.number.hasSlider input {\n  margin-left: var(--spacing);\n  width: var(--slider-input-width);\n  min-width: var(--slider-input-min-width);\n  flex-shrink: 0;\n}\n.lil-gui .controller.number .slider {\n  width: 100%;\n  height: var(--widget-height);\n  background: var(--widget-color);\n  border-radius: var(--widget-border-radius);\n  padding-right: var(--slider-knob-width);\n  overflow: hidden;\n  cursor: ew-resize;\n  touch-action: pan-y;\n}\n@media (hover: hover) {\n  .lil-gui .controller.number .slider:hover {\n    background: var(--hover-color);\n  }\n}\n.lil-gui .controller.number .slider.active {\n  background: var(--focus-color);\n}\n.lil-gui .controller.number .slider.active .fill {\n  opacity: 0.95;\n}\n.lil-gui .controller.number .fill {\n  height: 100%;\n  border-right: var(--slider-knob-width) solid var(--number-color);\n  box-sizing: content-box;\n}\n\n.lil-gui-dragging .lil-gui {\n  --hover-color: var(--widget-color);\n}\n.lil-gui-dragging * {\n  cursor: ew-resize !important;\n}\n\n.lil-gui-dragging.lil-gui-vertical * {\n  cursor: ns-resize !important;\n}\n\n.lil-gui .title {\n  height: var(--title-height);\n  line-height: calc(var(--title-height) - 4px);\n  font-weight: 600;\n  padding: 0 var(--padding);\n  -webkit-tap-highlight-color: transparent;\n  cursor: pointer;\n  outline: none;\n  text-decoration-skip: objects;\n}\n.lil-gui .title:before {\n  font-family: "lil-gui";\n  content: "▾";\n  padding-right: 2px;\n  display: inline-block;\n}\n.lil-gui .title:active {\n  background: var(--title-background-color);\n  opacity: 0.75;\n}\n@media (hover: hover) {\n  body:not(.lil-gui-dragging) .lil-gui .title:hover {\n    background: var(--title-background-color);\n    opacity: 0.85;\n  }\n  .lil-gui .title:focus {\n    text-decoration: underline var(--focus-color);\n  }\n}\n.lil-gui.root > .title:focus {\n  text-decoration: none !important;\n}\n.lil-gui.closed > .title:before {\n  content: "▸";\n}\n.lil-gui.closed > .children {\n  transform: translateY(-7px);\n  opacity: 0;\n}\n.lil-gui.closed:not(.transition) > .children {\n  display: none;\n}\n.lil-gui.transition > .children {\n  transition-duration: 300ms;\n  transition-property: height, opacity, transform;\n  transition-timing-function: cubic-bezier(0.2, 0.6, 0.35, 1);\n  overflow: hidden;\n  pointer-events: none;\n}\n.lil-gui .children:empty:before {\n  content: "Empty";\n  padding: 0 var(--padding);\n  margin: var(--spacing) 0;\n  display: block;\n  height: var(--widget-height);\n  font-style: italic;\n  line-height: var(--widget-height);\n  opacity: 0.5;\n}\n.lil-gui.root > .children > .lil-gui > .title {\n  border: 0 solid var(--widget-color);\n  border-width: 1px 0;\n  transition: border-color 300ms;\n}\n.lil-gui.root > .children > .lil-gui.closed > .title {\n  border-bottom-color: transparent;\n}\n.lil-gui + .controller {\n  border-top: 1px solid var(--widget-color);\n  margin-top: 0;\n  padding-top: var(--spacing);\n}\n.lil-gui .lil-gui .lil-gui > .title {\n  border: none;\n}\n.lil-gui .lil-gui .lil-gui > .children {\n  border: none;\n  margin-left: var(--folder-indent);\n  border-left: 2px solid var(--widget-color);\n}\n.lil-gui .lil-gui .controller {\n  border: none;\n}\n\n.lil-gui label, .lil-gui input, .lil-gui button {\n  -webkit-tap-highlight-color: transparent;\n}\n.lil-gui input {\n  border: 0;\n  outline: none;\n  font-family: var(--font-family);\n  font-size: var(--input-font-size);\n  border-radius: var(--widget-border-radius);\n  height: var(--widget-height);\n  background: var(--widget-color);\n  color: var(--text-color);\n  width: 100%;\n}\n@media (hover: hover) {\n  .lil-gui input:hover {\n    background: var(--hover-color);\n  }\n  .lil-gui input:active {\n    background: var(--focus-color);\n  }\n}\n.lil-gui input:disabled {\n  opacity: 1;\n}\n.lil-gui input[type=text],\n.lil-gui input[type=number] {\n  padding: var(--widget-padding);\n  -moz-appearance: textfield;\n}\n.lil-gui input[type=text]:focus,\n.lil-gui input[type=number]:focus {\n  background: var(--focus-color);\n}\n.lil-gui input[type=checkbox] {\n  appearance: none;\n  width: var(--checkbox-size);\n  height: var(--checkbox-size);\n  border-radius: var(--widget-border-radius);\n  text-align: center;\n  cursor: pointer;\n}\n.lil-gui input[type=checkbox]:checked:before {\n  font-family: "lil-gui";\n  content: "✓";\n  font-size: var(--checkbox-size);\n  line-height: var(--checkbox-size);\n}\n@media (hover: hover) {\n  .lil-gui input[type=checkbox]:focus {\n    box-shadow: inset 0 0 0 1px var(--focus-color);\n  }\n}\n.lil-gui button {\n  outline: none;\n  cursor: pointer;\n  font-family: var(--font-family);\n  font-size: var(--font-size);\n  color: var(--text-color);\n  width: 100%;\n  height: var(--widget-height);\n  text-transform: none;\n  background: var(--widget-color);\n  border-radius: var(--widget-border-radius);\n  border: none;\n}\n@media (hover: hover) {\n  .lil-gui button:hover {\n    background: var(--hover-color);\n  }\n  .lil-gui button:focus {\n    box-shadow: inset 0 0 0 1px var(--focus-color);\n  }\n}\n.lil-gui button:active {\n  background: var(--focus-color);\n}\n\n@font-face {\n  font-family: "lil-gui";\n  src: url("data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAUsAAsAAAAACJwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAAH4AAADAImwmYE9TLzIAAAGIAAAAPwAAAGBKqH5SY21hcAAAAcgAAAD0AAACrukyyJBnbHlmAAACvAAAAF8AAACEIZpWH2hlYWQAAAMcAAAAJwAAADZfcj2zaGhlYQAAA0QAAAAYAAAAJAC5AHhobXR4AAADXAAAABAAAABMAZAAAGxvY2EAAANsAAAAFAAAACgCEgIybWF4cAAAA4AAAAAeAAAAIAEfABJuYW1lAAADoAAAASIAAAIK9SUU/XBvc3QAAATEAAAAZgAAAJCTcMc2eJxVjbEOgjAURU+hFRBK1dGRL+ALnAiToyMLEzFpnPz/eAshwSa97517c/MwwJmeB9kwPl+0cf5+uGPZXsqPu4nvZabcSZldZ6kfyWnomFY/eScKqZNWupKJO6kXN3K9uCVoL7iInPr1X5baXs3tjuMqCtzEuagm/AAlzQgPAAB4nGNgYRBlnMDAysDAYM/gBiT5oLQBAwuDJAMDEwMrMwNWEJDmmsJwgCFeXZghBcjlZMgFCzOiKOIFAB71Bb8AeJy1kjFuwkAQRZ+DwRAwBtNQRUGKQ8OdKCAWUhAgKLhIuAsVSpWz5Bbkj3dEgYiUIszqWdpZe+Z7/wB1oCYmIoboiwiLT2WjKl/jscrHfGg/pKdMkyklC5Zs2LEfHYpjcRoPzme9MWWmk3dWbK9ObkWkikOetJ554fWyoEsmdSlt+uR0pCJR34b6t/TVg1SY3sYvdf8vuiKrpyaDXDISiegp17p7579Gp3p++y7HPAiY9pmTibljrr85qSidtlg4+l25GLCaS8e6rRxNBmsnERunKbaOObRz7N72ju5vdAjYpBXHgJylOAVsMseDAPEP8LYoUHicY2BiAAEfhiAGJgZWBgZ7RnFRdnVJELCQlBSRlATJMoLV2DK4glSYs6ubq5vbKrJLSbGrgEmovDuDJVhe3VzcXFwNLCOILB/C4IuQ1xTn5FPilBTj5FPmBAB4WwoqAHicY2BkYGAA4sk1sR/j+W2+MnAzpDBgAyEMQUCSg4EJxAEAwUgFHgB4nGNgZGBgSGFggJMhDIwMqEAYAByHATJ4nGNgAIIUNEwmAABl3AGReJxjYAACIQYlBiMGJ3wQAEcQBEV4nGNgZGBgEGZgY2BiAAEQyQWEDAz/wXwGAAsPATIAAHicXdBNSsNAHAXwl35iA0UQXYnMShfS9GPZA7T7LgIu03SSpkwzYTIt1BN4Ak/gKTyAeCxfw39jZkjymzcvAwmAW/wgwHUEGDb36+jQQ3GXGot79L24jxCP4gHzF/EIr4jEIe7wxhOC3g2TMYy4Q7+Lu/SHuEd/ivt4wJd4wPxbPEKMX3GI5+DJFGaSn4qNzk8mcbKSR6xdXdhSzaOZJGtdapd4vVPbi6rP+cL7TGXOHtXKll4bY1Xl7EGnPtp7Xy2n00zyKLVHfkHBa4IcJ2oD3cgggWvt/V/FbDrUlEUJhTn/0azVWbNTNr0Ens8de1tceK9xZmfB1CPjOmPH4kitmvOubcNpmVTN3oFJyjzCvnmrwhJTzqzVj9jiSX911FjeAAB4nG3HMRKCMBBA0f0giiKi4DU8k0V2GWbIZDOh4PoWWvq6J5V8If9NVNQcaDhyouXMhY4rPTcG7jwYmXhKq8Wz+p762aNaeYXom2n3m2dLTVgsrCgFJ7OTmIkYbwIbC6vIB7WmFfAAAA==") format("woff");\n}';const i=document.querySelector("head link[rel=stylesheet], head style");i?document.head.insertBefore(e,i):document.head.appendChild(e)}(),M=!0),i?i.appendChild(this.domElement):e&&(this.domElement.classList.add("autoPlace"),document.body.appendChild(this.domElement)),n&&this.domElement.style.setProperty("--width",n+"px"),this._closeFolders=o}add(t,e,i,n,s){if(Object(i)===i)return new _(this,t,e,i);const o=t[e];switch(typeof o){case"number":return new S(this,t,e,i,n,s);case"boolean":return new b(this,t,e);case"string":return new C(this,t,e);case"function":return new E(this,t,e)}console.error("gui.add failed\n\tproperty:",e,"\n\tobject:",t,"\n\tvalue:",o)}addColor(t,e,i=1){return new x(this,t,e,i)}addFolder(t){const e=new k({parent:this,title:t});return this.root._closeFolders&&e.close(),e}load(t,e=!0){return t.controllers&&this.controllers.forEach((e=>{e instanceof E||e._name in t.controllers&&e.load(t.controllers[e._name])})),e&&t.folders&&this.folders.forEach((e=>{e._title in t.folders&&e.load(t.folders[e._title])})),this}save(t=!0){const e={controllers:{},folders:{}};return this.controllers.forEach((t=>{if(!(t instanceof E)){if(t._name in e.controllers)throw new Error(`Cannot save GUI with duplicate property "${t._name}"`);e.controllers[t._name]=t.save()}})),t&&this.folders.forEach((t=>{if(t._title in e.folders)throw new Error(`Cannot save GUI with duplicate folder "${t._title}"`);e.folders[t._title]=t.save()})),e}open(t=!0){return this._setClosed(!t),this.$title.setAttribute("aria-expanded",!this._closed),this.domElement.classList.toggle("closed",this._closed),this}close(){return this.open(!1)}_setClosed(t){this._closed!==t&&(this._closed=t,this._callOnOpenClose(this))}show(t=!0){return this._hidden=!t,this.domElement.style.display=this._hidden?"none":"",this}hide(){return this.show(!1)}openAnimated(t=!0){return this._setClosed(!t),this.$title.setAttribute("aria-expanded",!this._closed),requestAnimationFrame((()=>{const e=this.$children.clientHeight;this.$children.style.height=e+"px",this.domElement.classList.add("transition");const i=t=>{t.target===this.$children&&(this.$children.style.height="",this.domElement.classList.remove("transition"),this.$children.removeEventListener("transitionend",i))};this.$children.addEventListener("transitionend",i);const n=t?this.$children.scrollHeight:0;this.domElement.classList.toggle("closed",!t),requestAnimationFrame((()=>{this.$children.style.height=n+"px"}))})),this}title(t){return this._title=t,this.$title.textContent=t,this}reset(t=!0){return(t?this.controllersRecursive():this.controllers).forEach((t=>t.reset())),this}onChange(t){return this._onChange=t,this}_callOnChange(t){this.parent&&this.parent._callOnChange(t),void 0!==this._onChange&&this._onChange.call(this,{object:t.object,property:t.property,value:t.getValue(),controller:t})}onFinishChange(t){return this._onFinishChange=t,this}_callOnFinishChange(t){this.parent&&this.parent._callOnFinishChange(t),void 0!==this._onFinishChange&&this._onFinishChange.call(this,{object:t.object,property:t.property,value:t.getValue(),controller:t})}onOpenClose(t){return this._onOpenClose=t,this}_callOnOpenClose(t){this.parent&&this.parent._callOnOpenClose(t),void 0!==this._onOpenClose&&this._onOpenClose.call(this,t)}destroy(){this.parent&&(this.parent.children.splice(this.parent.children.indexOf(this),1),this.parent.folders.splice(this.parent.folders.indexOf(this),1)),this.domElement.parentElement&&this.domElement.parentElement.removeChild(this.domElement),Array.from(this.children).forEach((t=>t.destroy()))}controllersRecursive(){let t=Array.from(this.controllers);return this.folders.forEach((e=>{t=t.concat(e.controllersRecursive())})),t}foldersRecursive(){let t=Array.from(this.folders);return this.folders.forEach((e=>{t=t.concat(e.foldersRecursive())})),t}}const $=k;var L=s(924),O=s.n(L);const T={type:"change"},I={type:"start"},F={type:"end"},j=new t.Ray,P=new t.Plane,V=Math.cos(70*t.MathUtils.DEG2RAD);class z extends t.EventDispatcher{constructor(e,i){super(),this.object=e,this.domElement=i,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new t.Vector3,this.cursor=new t.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:t.MOUSE.ROTATE,MIDDLE:t.MOUSE.DOLLY,RIGHT:t.MOUSE.PAN},this.touches={ONE:t.TOUCH.ROTATE,TWO:t.TOUCH.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return a.phi},this.getAzimuthalAngle=function(){return a.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(t){t.addEventListener("keydown",it),this._domElementKeyEvents=t},this.stopListenToKeyEvents=function(){this._domElementKeyEvents.removeEventListener("keydown",it),this._domElementKeyEvents=null},this.saveState=function(){n.target0.copy(n.target),n.position0.copy(n.object.position),n.zoom0=n.object.zoom},this.reset=function(){n.target.copy(n.target0),n.object.position.copy(n.position0),n.object.zoom=n.zoom0,n.object.updateProjectionMatrix(),n.dispatchEvent(T),n.update(),o=s.NONE},this.update=function(){const i=new t.Vector3,d=(new t.Quaternion).setFromUnitVectors(e.up,new t.Vector3(0,1,0)),u=d.clone().invert(),p=new t.Vector3,m=new t.Quaternion,g=new t.Vector3,b=2*Math.PI;return function(f=null){const v=n.object.position;i.copy(v).sub(n.target),i.applyQuaternion(d),a.setFromVector3(i),n.autoRotate&&o===s.NONE&&M(function(t){return null!==t?2*Math.PI/60*n.autoRotateSpeed*t:2*Math.PI/60/60*n.autoRotateSpeed}(f)),n.enableDamping?(a.theta+=l.theta*n.dampingFactor,a.phi+=l.phi*n.dampingFactor):(a.theta+=l.theta,a.phi+=l.phi);let y=n.minAzimuthAngle,E=n.maxAzimuthAngle;isFinite(y)&&isFinite(E)&&(y<-Math.PI?y+=b:y>Math.PI&&(y-=b),E<-Math.PI?E+=b:E>Math.PI&&(E-=b),a.theta=y<=E?Math.max(y,Math.min(E,a.theta)):a.theta>(y+E)/2?Math.max(y,a.theta):Math.min(E,a.theta)),a.phi=Math.max(n.minPolarAngle,Math.min(n.maxPolarAngle,a.phi)),a.makeSafe(),!0===n.enableDamping?n.target.addScaledVector(h,n.dampingFactor):n.target.add(h),n.target.sub(n.cursor),n.target.clampLength(n.minTargetRadius,n.maxTargetRadius),n.target.add(n.cursor);let S=!1;if(n.zoomToCursor&&x||n.object.isOrthographicCamera)a.radius=N(a.radius);else{const t=a.radius;a.radius=N(a.radius*c),S=t!=a.radius}if(i.setFromSpherical(a),i.applyQuaternion(u),v.copy(n.target).add(i),n.object.lookAt(n.target),!0===n.enableDamping?(l.theta*=1-n.dampingFactor,l.phi*=1-n.dampingFactor,h.multiplyScalar(1-n.dampingFactor)):(l.set(0,0,0),h.set(0,0,0)),n.zoomToCursor&&x){let s=null;if(n.object.isPerspectiveCamera){const t=i.length();s=N(t*c);const e=t-s;n.object.position.addScaledVector(w,e),n.object.updateMatrixWorld(),S=!!e}else if(n.object.isOrthographicCamera){const e=new t.Vector3(A.x,A.y,0);e.unproject(n.object);const o=n.object.zoom;n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/c)),n.object.updateProjectionMatrix(),S=o!==n.object.zoom;const r=new t.Vector3(A.x,A.y,0);r.unproject(n.object),n.object.position.sub(r).add(e),n.object.updateMatrixWorld(),s=i.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),n.zoomToCursor=!1;null!==s&&(this.screenSpacePanning?n.target.set(0,0,-1).transformDirection(n.object.matrix).multiplyScalar(s).add(n.object.position):(j.origin.copy(n.object.position),j.direction.set(0,0,-1).transformDirection(n.object.matrix),Math.abs(n.object.up.dot(j.direction))<V?e.lookAt(n.target):(P.setFromNormalAndCoplanarPoint(n.object.up,n.target),j.intersectPlane(P,n.target))))}else if(n.object.isOrthographicCamera){const t=n.object.zoom;n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/c)),t!==n.object.zoom&&(n.object.updateProjectionMatrix(),S=!0)}return c=1,x=!1,!!(S||p.distanceToSquared(n.object.position)>r||8*(1-m.dot(n.object.quaternion))>r||g.distanceToSquared(n.target)>r)&&(n.dispatchEvent(T),p.copy(n.object.position),m.copy(n.object.quaternion),g.copy(n.target),!0)}}(),this.dispose=function(){n.domElement.removeEventListener("contextmenu",st),n.domElement.removeEventListener("pointerdown",q),n.domElement.removeEventListener("pointercancel",J),n.domElement.removeEventListener("wheel",Q),n.domElement.removeEventListener("pointermove",Z),n.domElement.removeEventListener("pointerup",J),n.domElement.getRootNode().removeEventListener("keydown",tt,{capture:!0}),null!==n._domElementKeyEvents&&(n._domElementKeyEvents.removeEventListener("keydown",it),n._domElementKeyEvents=null)};const n=this,s={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let o=s.NONE;const r=1e-6,a=new t.Spherical,l=new t.Spherical;let c=1;const h=new t.Vector3,d=new t.Vector2,u=new t.Vector2,p=new t.Vector2,m=new t.Vector2,g=new t.Vector2,b=new t.Vector2,f=new t.Vector2,v=new t.Vector2,y=new t.Vector2,w=new t.Vector3,A=new t.Vector2;let x=!1;const E=[],S={};let _=!1;function C(t){const e=Math.abs(.01*t);return Math.pow(.95,n.zoomSpeed*e)}function M(t){l.theta-=t}function k(t){l.phi-=t}const $=function(){const e=new t.Vector3;return function(t,i){e.setFromMatrixColumn(i,0),e.multiplyScalar(-t),h.add(e)}}(),L=function(){const e=new t.Vector3;return function(t,i){!0===n.screenSpacePanning?e.setFromMatrixColumn(i,1):(e.setFromMatrixColumn(i,0),e.crossVectors(n.object.up,e)),e.multiplyScalar(t),h.add(e)}}(),O=function(){const e=new t.Vector3;return function(t,i){const s=n.domElement;if(n.object.isPerspectiveCamera){const o=n.object.position;e.copy(o).sub(n.target);let r=e.length();r*=Math.tan(n.object.fov/2*Math.PI/180),$(2*t*r/s.clientHeight,n.object.matrix),L(2*i*r/s.clientHeight,n.object.matrix)}else n.object.isOrthographicCamera?($(t*(n.object.right-n.object.left)/n.object.zoom/s.clientWidth,n.object.matrix),L(i*(n.object.top-n.object.bottom)/n.object.zoom/s.clientHeight,n.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),n.enablePan=!1)}}();function z(t){n.object.isPerspectiveCamera||n.object.isOrthographicCamera?c/=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function D(t){n.object.isPerspectiveCamera||n.object.isOrthographicCamera?c*=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function H(t,e){if(!n.zoomToCursor)return;x=!0;const i=n.domElement.getBoundingClientRect(),s=t-i.left,o=e-i.top,r=i.width,a=i.height;A.x=s/r*2-1,A.y=-o/a*2+1,w.set(A.x,A.y,1).unproject(n.object).sub(n.object.position).normalize()}function N(t){return Math.max(n.minDistance,Math.min(n.maxDistance,t))}function R(t){d.set(t.clientX,t.clientY)}function Y(t){m.set(t.clientX,t.clientY)}function B(t){if(1===E.length)d.set(t.pageX,t.pageY);else{const e=rt(t),i=.5*(t.pageX+e.x),n=.5*(t.pageY+e.y);d.set(i,n)}}function U(t){if(1===E.length)m.set(t.pageX,t.pageY);else{const e=rt(t),i=.5*(t.pageX+e.x),n=.5*(t.pageY+e.y);m.set(i,n)}}function K(t){const e=rt(t),i=t.pageX-e.x,n=t.pageY-e.y,s=Math.sqrt(i*i+n*n);f.set(0,s)}function X(t){if(1==E.length)u.set(t.pageX,t.pageY);else{const e=rt(t),i=.5*(t.pageX+e.x),n=.5*(t.pageY+e.y);u.set(i,n)}p.subVectors(u,d).multiplyScalar(n.rotateSpeed);const e=n.domElement;M(2*Math.PI*p.x/e.clientHeight),k(2*Math.PI*p.y/e.clientHeight),d.copy(u)}function W(t){if(1===E.length)g.set(t.pageX,t.pageY);else{const e=rt(t),i=.5*(t.pageX+e.x),n=.5*(t.pageY+e.y);g.set(i,n)}b.subVectors(g,m).multiplyScalar(n.panSpeed),O(b.x,b.y),m.copy(g)}function G(t){const e=rt(t),i=t.pageX-e.x,s=t.pageY-e.y,o=Math.sqrt(i*i+s*s);v.set(0,o),y.set(0,Math.pow(v.y/f.y,n.zoomSpeed)),z(y.y),f.copy(v),H(.5*(t.pageX+e.x),.5*(t.pageY+e.y))}function q(e){!1!==n.enabled&&(0===E.length&&(n.domElement.setPointerCapture(e.pointerId),n.domElement.addEventListener("pointermove",Z),n.domElement.addEventListener("pointerup",J)),function(t){for(let e=0;e<E.length;e++)if(E[e]==t.pointerId)return!0;return!1}(e)||(function(t){E.push(t.pointerId)}(e),"touch"===e.pointerType?nt(e):function(e){let i;switch(e.button){case 0:i=n.mouseButtons.LEFT;break;case 1:i=n.mouseButtons.MIDDLE;break;case 2:i=n.mouseButtons.RIGHT;break;default:i=-1}switch(i){case t.MOUSE.DOLLY:if(!1===n.enableZoom)return;!function(t){H(t.clientX,t.clientX),f.set(t.clientX,t.clientY)}(e),o=s.DOLLY;break;case t.MOUSE.ROTATE:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===n.enablePan)return;Y(e),o=s.PAN}else{if(!1===n.enableRotate)return;R(e),o=s.ROTATE}break;case t.MOUSE.PAN:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===n.enableRotate)return;R(e),o=s.ROTATE}else{if(!1===n.enablePan)return;Y(e),o=s.PAN}break;default:o=s.NONE}o!==s.NONE&&n.dispatchEvent(I)}(e)))}function Z(t){!1!==n.enabled&&("touch"===t.pointerType?function(t){switch(ot(t),o){case s.TOUCH_ROTATE:if(!1===n.enableRotate)return;X(t),n.update();break;case s.TOUCH_PAN:if(!1===n.enablePan)return;W(t),n.update();break;case s.TOUCH_DOLLY_PAN:if(!1===n.enableZoom&&!1===n.enablePan)return;!function(t){n.enableZoom&&G(t),n.enablePan&&W(t)}(t),n.update();break;case s.TOUCH_DOLLY_ROTATE:if(!1===n.enableZoom&&!1===n.enableRotate)return;!function(t){n.enableZoom&&G(t),n.enableRotate&&X(t)}(t),n.update();break;default:o=s.NONE}}(t):function(t){switch(o){case s.ROTATE:if(!1===n.enableRotate)return;!function(t){u.set(t.clientX,t.clientY),p.subVectors(u,d).multiplyScalar(n.rotateSpeed);const e=n.domElement;M(2*Math.PI*p.x/e.clientHeight),k(2*Math.PI*p.y/e.clientHeight),d.copy(u),n.update()}(t);break;case s.DOLLY:if(!1===n.enableZoom)return;!function(t){v.set(t.clientX,t.clientY),y.subVectors(v,f),y.y>0?z(C(y.y)):y.y<0&&D(C(y.y)),f.copy(v),n.update()}(t);break;case s.PAN:if(!1===n.enablePan)return;!function(t){g.set(t.clientX,t.clientY),b.subVectors(g,m).multiplyScalar(n.panSpeed),O(b.x,b.y),m.copy(g),n.update()}(t)}}(t))}function J(t){switch(function(t){delete S[t.pointerId];for(let e=0;e<E.length;e++)if(E[e]==t.pointerId)return void E.splice(e,1)}(t),E.length){case 0:n.domElement.releasePointerCapture(t.pointerId),n.domElement.removeEventListener("pointermove",Z),n.domElement.removeEventListener("pointerup",J),n.dispatchEvent(F),o=s.NONE;break;case 1:const e=E[0],i=S[e];nt({pointerId:e,pageX:i.x,pageY:i.y})}}function Q(t){!1!==n.enabled&&!1!==n.enableZoom&&o===s.NONE&&(t.preventDefault(),n.dispatchEvent(I),function(t){H(t.clientX,t.clientY),t.deltaY<0?D(C(t.deltaY)):t.deltaY>0&&z(C(t.deltaY)),n.update()}(function(t){const e=t.deltaMode,i={clientX:t.clientX,clientY:t.clientY,deltaY:t.deltaY};switch(e){case 1:i.deltaY*=16;break;case 2:i.deltaY*=100}return t.ctrlKey&&!_&&(i.deltaY*=10),i}(t)),n.dispatchEvent(F))}function tt(t){"Control"===t.key&&(_=!0,n.domElement.getRootNode().addEventListener("keyup",et,{passive:!0,capture:!0}))}function et(t){"Control"===t.key&&(_=!1,n.domElement.getRootNode().removeEventListener("keyup",et,{passive:!0,capture:!0}))}function it(t){!1!==n.enabled&&!1!==n.enablePan&&function(t){let e=!1;switch(t.code){case n.keys.UP:t.ctrlKey||t.metaKey||t.shiftKey?k(2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):O(0,n.keyPanSpeed),e=!0;break;case n.keys.BOTTOM:t.ctrlKey||t.metaKey||t.shiftKey?k(-2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):O(0,-n.keyPanSpeed),e=!0;break;case n.keys.LEFT:t.ctrlKey||t.metaKey||t.shiftKey?M(2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):O(n.keyPanSpeed,0),e=!0;break;case n.keys.RIGHT:t.ctrlKey||t.metaKey||t.shiftKey?M(-2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):O(-n.keyPanSpeed,0),e=!0}e&&(t.preventDefault(),n.update())}(t)}function nt(e){switch(ot(e),E.length){case 1:switch(n.touches.ONE){case t.TOUCH.ROTATE:if(!1===n.enableRotate)return;B(e),o=s.TOUCH_ROTATE;break;case t.TOUCH.PAN:if(!1===n.enablePan)return;U(e),o=s.TOUCH_PAN;break;default:o=s.NONE}break;case 2:switch(n.touches.TWO){case t.TOUCH.DOLLY_PAN:if(!1===n.enableZoom&&!1===n.enablePan)return;!function(t){n.enableZoom&&K(t),n.enablePan&&U(t)}(e),o=s.TOUCH_DOLLY_PAN;break;case t.TOUCH.DOLLY_ROTATE:if(!1===n.enableZoom&&!1===n.enableRotate)return;!function(t){n.enableZoom&&K(t),n.enableRotate&&B(t)}(e),o=s.TOUCH_DOLLY_ROTATE;break;default:o=s.NONE}break;default:o=s.NONE}o!==s.NONE&&n.dispatchEvent(I)}function st(t){!1!==n.enabled&&t.preventDefault()}function ot(e){let i=S[e.pointerId];void 0===i&&(i=new t.Vector2,S[e.pointerId]=i),i.set(e.pageX,e.pageY)}function rt(t){const e=t.pointerId===E[0]?E[1]:E[0];return S[e]}n.domElement.addEventListener("contextmenu",st),n.domElement.addEventListener("pointerdown",q),n.domElement.addEventListener("pointercancel",J),n.domElement.addEventListener("wheel",Q,{passive:!1}),n.domElement.getRootNode().addEventListener("keydown",tt,{passive:!0,capture:!0}),this.update()}}class D extends t.Object3D{constructor(e,i){super(),this.isViewHelper=!0,this.animating=!1,this.center=new t.Vector3;const n=new t.Color("#ff3653"),s=new t.Color("#8adb00"),o=new t.Color("#2c8fff"),r=[],a=new t.Raycaster,l=new t.Vector2,c=new t.Object3D,h=new t.OrthographicCamera(-2,2,2,-2,0,4);h.position.set(0,0,2);const d=new t.BoxGeometry(.8,.05,.05).translate(.4,0,0),u=new t.Mesh(d,L(n)),p=new t.Mesh(d,L(s)),m=new t.Mesh(d,L(o));p.rotation.z=Math.PI/2,m.rotation.y=-Math.PI/2,this.add(u),this.add(m),this.add(p);const g=new t.Sprite(O(n,"X"));g.userData.type="posX";const b=new t.Sprite(O(s,"Y"));b.userData.type="posY";const f=new t.Sprite(O(o,"Z"));f.userData.type="posZ";const v=new t.Sprite(O(n));v.userData.type="negX";const y=new t.Sprite(O(s));y.userData.type="negY";const w=new t.Sprite(O(o));w.userData.type="negZ",g.position.x=1,b.position.y=1,f.position.z=1,v.position.x=-1,v.scale.setScalar(.8),y.position.y=-1,y.scale.setScalar(.8),w.position.z=-1,w.scale.setScalar(.8),this.add(g),this.add(b),this.add(f),this.add(v),this.add(y),this.add(w),r.push(g),r.push(b),r.push(f),r.push(v),r.push(y),r.push(w);const A=new t.Vector3,x=128,E=2*Math.PI;this.render=function(t){this.quaternion.copy(e.quaternion).invert(),this.updateMatrixWorld(),A.set(0,0,1),A.applyQuaternion(e.quaternion),A.x>=0?(g.material.opacity=1,v.material.opacity=.5):(g.material.opacity=.5,v.material.opacity=1),A.y>=0?(b.material.opacity=1,y.material.opacity=.5):(b.material.opacity=.5,y.material.opacity=1),A.z>=0?(f.material.opacity=1,w.material.opacity=.5):(f.material.opacity=.5,w.material.opacity=1);const n=i.offsetWidth-x;t.clearDepth(),t.getViewport(k),t.setViewport(n,0,x,x),t.render(this,h),t.setViewport(k.x,k.y,k.z,k.w)};const S=new t.Vector3,_=new t.Quaternion,C=new t.Quaternion,M=new t.Quaternion,k=new t.Vector4;let $=0;function L(e){return new t.MeshBasicMaterial({color:e,toneMapped:!1})}function O(e,i=null){const n=document.createElement("canvas");n.width=64,n.height=64;const s=n.getContext("2d");s.beginPath(),s.arc(32,32,16,0,2*Math.PI),s.closePath(),s.fillStyle=e.getStyle(),s.fill(),null!==i&&(s.font="24px Arial",s.textAlign="center",s.fillStyle="#000000",s.fillText(i,32,41));const o=new t.CanvasTexture(n);return new t.SpriteMaterial({map:o,toneMapped:!1})}this.handleClick=function(n){if(!0===this.animating)return!1;const s=i.getBoundingClientRect(),o=s.left+(i.offsetWidth-x),d=s.top+(i.offsetHeight-x);l.x=(n.clientX-o)/(s.right-o)*2-1,l.y=-(n.clientY-d)/(s.bottom-d)*2+1,a.setFromCamera(l,h);const u=a.intersectObjects(r);return u.length>0&&(function(i,n){switch(i.userData.type){case"posX":S.set(1,0,0),_.setFromEuler(new t.Euler(0,.5*Math.PI,0));break;case"posY":S.set(0,1,0),_.setFromEuler(new t.Euler(.5*-Math.PI,0,0));break;case"posZ":S.set(0,0,1),_.setFromEuler(new t.Euler);break;case"negX":S.set(-1,0,0),_.setFromEuler(new t.Euler(0,.5*-Math.PI,0));break;case"negY":S.set(0,-1,0),_.setFromEuler(new t.Euler(.5*Math.PI,0,0));break;case"negZ":S.set(0,0,-1),_.setFromEuler(new t.Euler(0,Math.PI,0));break;default:console.error("ViewHelper: Invalid axis.")}$=e.position.distanceTo(n),S.multiplyScalar($).add(n),c.position.copy(n),c.lookAt(e.position),C.copy(c.quaternion),c.lookAt(S),M.copy(c.quaternion)}(u[0].object,this.center),this.animating=!0,!0)},this.update=function(t){const i=t*E;C.rotateTowards(M,i),e.position.set(0,0,1).applyQuaternion(C).multiplyScalar($).add(this.center),e.quaternion.rotateTowards(_,i),0===C.angleTo(M)&&(this.animating=!1)},this.dispose=function(){d.dispose(),u.material.dispose(),p.material.dispose(),m.material.dispose(),g.material.map.dispose(),b.material.map.dispose(),f.material.map.dispose(),v.material.map.dispose(),y.material.map.dispose(),w.material.map.dispose(),g.material.dispose(),b.material.dispose(),f.material.dispose(),v.material.dispose(),y.material.dispose(),w.material.dispose()}}}var H=function(){var t=0,e=document.createElement("div");function i(t){return e.appendChild(t.dom),t}function n(i){for(var n=0;n<e.children.length;n++)e.children[n].style.display=n===i?"block":"none";t=i}e.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",e.addEventListener("click",(function(i){i.preventDefault(),n(++t%e.children.length)}),!1);var s=(performance||Date).now(),o=s,r=0,a=i(new H.Panel("FPS","#0ff","#002")),l=i(new H.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var c=i(new H.Panel("MB","#f08","#201"));return n(0),{REVISION:16,dom:e,addPanel:i,showPanel:n,begin:function(){s=(performance||Date).now()},end:function(){r++;var t=(performance||Date).now();if(l.update(t-s,200),t>=o+1e3&&(a.update(1e3*r/(t-o),100),o=t,r=0,c)){var e=performance.memory;c.update(e.usedJSHeapSize/1048576,e.jsHeapSizeLimit/1048576)}return t},update:function(){s=this.end()},domElement:e,setMode:n}};H.Panel=function(t,e,i){var n=1/0,s=0,o=Math.round,r=o(window.devicePixelRatio||1),a=80*r,l=48*r,c=3*r,h=2*r,d=3*r,u=15*r,p=74*r,m=30*r,g=document.createElement("canvas");g.width=a,g.height=l,g.style.cssText="width:80px;height:48px";var b=g.getContext("2d");return b.font="bold "+9*r+"px Helvetica,Arial,sans-serif",b.textBaseline="top",b.fillStyle=i,b.fillRect(0,0,a,l),b.fillStyle=e,b.fillText(t,c,h),b.fillRect(d,u,p,m),b.fillStyle=i,b.globalAlpha=.9,b.fillRect(d,u,p,m),{dom:g,update:function(l,f){n=Math.min(n,l),s=Math.max(s,l),b.fillStyle=i,b.globalAlpha=1,b.fillRect(0,0,a,u),b.fillStyle=e,b.fillText(o(l)+" "+t+" ("+o(n)+"-"+o(s)+")",c,h),b.drawImage(g,d+r,u,p-r,m,d,u,p-r,m),b.fillRect(d+p-r,u,r,m),b.fillStyle=i,b.globalAlpha=.9,b.fillRect(d+p-r,u,r,o((1-l/f)*m))}}};const N=H;class R extends t.Object3D{constructor(e=document.createElement("div")){super(),this.isCSS2DObject=!0,this.element=e,this.element.style.position="absolute",this.element.style.userSelect="none",this.element.setAttribute("draggable",!1),this.center=new t.Vector2(.5,.5),this.addEventListener("removed",(function(){this.traverse((function(t){t.element instanceof Element&&null!==t.element.parentNode&&t.element.parentNode.removeChild(t.element)}))}))}copy(t,e){return super.copy(t,e),this.element=t.element.cloneNode(!0),this.center=t.center,this}}const Y=new t.Vector3,B=new t.Matrix4,U=new t.Matrix4,K=new t.Vector3,X=new t.Vector3;class W{constructor(t={}){const e=this;let i,n,s,o;const r={objects:new WeakMap},a=void 0!==t.element?t.element:document.createElement("div");function l(t,i,n){if(t.isCSS2DObject){Y.setFromMatrixPosition(t.matrixWorld),Y.applyMatrix4(U);const l=!0===t.visible&&Y.z>=-1&&Y.z<=1&&!0===t.layers.test(n.layers);if(t.element.style.display=!0===l?"":"none",!0===l){t.onBeforeRender(e,i,n);const r=t.element;r.style.transform="translate("+-100*t.center.x+"%,"+-100*t.center.y+"%)translate("+(Y.x*s+s)+"px,"+(-Y.y*o+o)+"px)",r.parentNode!==a&&a.appendChild(r),t.onAfterRender(e,i,n)}const d={distanceToCameraSquared:(c=n,h=t,K.setFromMatrixPosition(c.matrixWorld),X.setFromMatrixPosition(h.matrixWorld),K.distanceToSquared(X))};r.objects.set(t,d)}var c,h;for(let e=0,s=t.children.length;e<s;e++)l(t.children[e],i,n)}a.style.overflow="hidden",this.domElement=a,this.getSize=function(){return{width:i,height:n}},this.render=function(t,e){!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld(),null===e.parent&&!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),B.copy(e.matrixWorldInverse),U.multiplyMatrices(e.projectionMatrix,B),l(t,t,e),function(t){const e=function(t){const e=[];return t.traverse((function(t){t.isCSS2DObject&&e.push(t)})),e}(t).sort((function(t,e){return t.renderOrder!==e.renderOrder?e.renderOrder-t.renderOrder:r.objects.get(t).distanceToCameraSquared-r.objects.get(e).distanceToCameraSquared})),i=e.length;for(let t=0,n=e.length;t<n;t++)e[t].element.style.zIndex=i-t}(t)},this.setSize=function(t,e){i=t,n=e,s=i/2,o=n/2,a.style.width=t+"px",a.style.height=e+"px"}}}let G=null;function q(t,e,i){return t<e?e:t>i?i:t}class Z{constructor(t){this.divId="",this.type="scatter",this.speeds=[0,.5,1,2,4,10,20,100,1e3,1e4,1e5,1e6,1e7],this.playing=!1,this.simulation=t}play(t,e){this.divId=t,this.playing=!0;let i=document.getElementById(t);if(null===i)return;const n=this.speeds.map((t=>({label:t.toString(),method:"skip"}))),s=this.simulation.universes.map((t=>({x:t.currState.bodies.map((t=>t.position.x)),y:t.currState.bodies.map((t=>t.position.y)),z:t.currState.bodies.map((t=>t.position.z)),type:this.type,mode:"markers",marker:{color:t.color,sizemin:6,size:t.currState.bodies.map((t=>Math.min(10,t.mass)))}}))),o=i.clientWidth,r=i.clientHeight;let a=0,l=0;this.simulation.universes.forEach((t=>t.currState.bodies.forEach((t=>{a=Math.max(a,Math.abs(t.position.x)),l=Math.max(l,Math.abs(t.position.y))}))));const c=.5*Math.min(r/l,o/a),h={paper_bgcolor:"#000000",plot_bgcolor:"#000000",font:{color:"#bfbfbf"},xaxis:{autorange:!1,range:[-o/2/c,o/2/c]},yaxis:{autorange:!1,range:[-r/2/c,r/2/c]},uirevision:"true",sliders:[{steps:n,active:0}]};if(O().newPlot(t,s,h),null!=G)return;let d=0,u=e;const p=()=>{0!==u&&this.simulation.simulateStep(.016*u)},m=e=>{var i,n;if(u=this.speeds[parseInt(null===(n=null===(i=document.getElementById(t))||void 0===i?void 0:i.layout)||void 0===n?void 0:n.sliders[0].active)],0===u||!this.playing)return void(G=requestAnimationFrame(m));d=e,p();const s=this.simulation.universes.map((t=>({x:t.currState.bodies.map((t=>t.position.x)),y:t.currState.bodies.map((t=>t.position.y)),z:t.currState.bodies.map((t=>t.position.z)),hovertext:t.currState.bodies.map((t=>t.label)),color:t.color,marker:{size:t.currState.bodies.map((t=>Math.min(10,t.mass)))}})));O().animate(t,{data:s},{transition:{duration:0},frame:{duration:0,redraw:!1}}),G=requestAnimationFrame(m)};requestAnimationFrame(m)}pause(){this.playing=!1}resume(){this.playing=!0}stop(){this.playing=!1,O().purge(this.divId),this.divId=""}}class J{constructor(t){this.traced=[],this.traceInd=0,this.maxTraceLength=t}addTrace(e,i,n){const s=new t.BufferGeometry;s.setAttribute("position",new t.BufferAttribute(new Float32Array(e.toArray()),3));const o=new t.PointsMaterial({size:.005*n,color:16777215}),r=new t.Points(s,o);i.add(r),this.traced.length<this.maxTraceLength?(this.traced.push(r),this.traceInd=this.traced.length-1):(this.traceInd=(this.traceInd+1)%this.maxTraceLength,void 0!==this.traced[this.traceInd]&&i.remove(this.traced[this.traceInd]),this.traced[this.traceInd]=r)}popTrace(t){return void 0!==this.traced[this.traceInd]&&(t.remove(this.traced[this.traceInd]),this.traced[this.traceInd]=void 0,this.traceInd=0===this.traceInd?this.traced.length-1:this.traceInd-1,!0)}popAllTraces(t){for(;this.popTrace(t););}}class Q{constructor(t){this.divId="",this.speeds=[0,.5,1,2,4,10,100,1e3,1e4],this.playing=!1,this.universeTracers=[],this.maxTraceLength=200,this.simulation=t}play(e,i){var n;this.divId=e,this.playing=!0;let s=document.getElementById(e);if(null===s)return;const o=s.clientWidth,r=s.clientHeight;let a=0,l=0;this.simulation.universes.forEach((t=>t.currState.bodies.forEach((t=>{a=Math.max(a,Math.abs(t.position.x)),l=Math.max(l,Math.abs(t.position.y))}))));const c=.5*Math.min(r/l,o/a),h=new t.Scene,d=new t.OrthographicCamera(o/-2,o/2,r/2,r/-2,0,1e10);d.position.set(0,0,Math.max(o,r));const u=new t.WebGLRenderer;u.setSize(window.innerWidth,window.innerHeight),u.autoClear=!1,s.appendChild(u.domElement);const p=new N;null===(n=s.parentNode)||void 0===n||n.appendChild(p.dom);const m=document.createElement("div");m.className="label",m.textContent="Earthhgkjfdghkjfgh",m.style.backgroundColor="transparent",m.style.color="white",m.style.fontFamily="sans-serif",m.style.background="rgba(0, 0, 0, 0.6)";const g=new R(m);g.position.set(0,0,0),g.center.set(0,1),g.layers.set(0);const b=new W;b.setSize(o,r),b.domElement.style.position="absolute",b.domElement.style.top="0px",s.appendChild(b.domElement);const f=new z(d,b.domElement);f.listenToKeyEvents(window),f.update();const v=new t.AxesHelper(o);h.add(v);const y=new D(d,b.domElement);let w=[];this.simulation.universes.forEach((e=>{this.universeTracers.push(new J(this.maxTraceLength)),e.currState.bodies.forEach((i=>{const n=new t.SphereGeometry(q(Math.log2(i.mass)-70,10,40),8,8),s=new t.WireframeGeometry(n),o=new t.LineSegments(s,new t.LineBasicMaterial({color:new t.Color(e.color)}));h.add(o),o.position.copy(i.position.clone().multiplyScalar(c)),w.push(o)}))}));let A=performance.now();const x=new $;let E={"Time Scale":i,showTracers:!0,showUniverse:{}};x.add(E,"Time Scale"),x.add(E,"showTracers").onChange((t=>{!1===t&&this.universeTracers.forEach((t=>{t.popAllTraces(h)})),E.showTracers=t}));const S=x.addFolder("Show Universe");S.open(!1),this.simulation.universes.forEach(((t,e)=>{E.showUniverse[t.label]=!0,S.add(E.showUniverse,t.label).onChange((i=>{!1===i&&this.universeTracers[e].popAllTraces(h),E.showUniverse[t.label]=i}))}));const _=t=>{this.simulation.simulateStep(E["Time Scale"]*Math.min(t-A,10)/1e3),A=t};let C=performance.now();const M=t=>{if(0===E["Time Scale"]||!this.playing)return void requestAnimationFrame(M);_(t),C=t,p.update();let e=0;this.simulation.universes.forEach(((t,i)=>{E.showUniverse[t.label]?t.currState.bodies.forEach((t=>{w[e].visible=!0,w[e].position.copy(t.position.clone().multiplyScalar(c)),E.showTracers&&this.universeTracers[i].addTrace(w[e].position,h,c),e++})):t.currState.bodies.forEach((t=>{w[e].visible=!1,e++}))})),requestAnimationFrame(M),u.clear(),u.render(h,d),y.render(u),f.update()};requestAnimationFrame(M)}pause(){this.playing=!1}resume(){this.playing=!0}stop(){this.playing=!1,this.divId=""}}class tt{constructor(t,e){this.divId="",this.type="scatter",this.speeds=[0,.5,1,2,4,10,20,100,1e3,1e4,1e5,1e6,1e7],this.playing=!1,this.simulation=t}play(t,e){this.divId=t,this.playing=!0;let i=document.getElementById(t);if(null===i)return;const n=this.speeds.map((t=>({label:t.toString(),method:"skip"}))),s=this.simulation.universes.map((t=>({x:t.currState.bodies.map((t=>t.position.x)),y:t.currState.bodies.map((t=>t.position.y)),z:t.currState.bodies.map((t=>t.position.z)),type:this.type,mode:"markers",marker:{color:t.color,sizemin:6,size:t.currState.bodies.map((t=>Math.min(10,t.mass)))}}))),o=i.clientWidth,r=i.clientHeight;let a=0,l=0;this.simulation.universes.forEach((t=>t.currState.bodies.forEach((t=>{a=Math.max(a,Math.abs(t.position.x)),l=Math.max(l,Math.abs(t.position.y))}))));const c=.5*Math.min(r/l,o/a),h={paper_bgcolor:"#000000",plot_bgcolor:"#000000",font:{color:"#bfbfbf"},xaxis:{autorange:!1,range:[-o/2/c,o/2/c]},yaxis:{autorange:!1,range:[-r/2/c,r/2/c]},uirevision:"true",sliders:[{steps:n,active:0}]};if(O().newPlot(t,s,h),null!=G)return;let d=0,u=e;const p=e=>{var i,n;if(u=this.speeds[parseInt(null===(n=null===(i=document.getElementById(t))||void 0===i?void 0:i.layout)||void 0===n?void 0:n.sliders[0].active)],0===u||!this.playing)return void(G=requestAnimationFrame(p));d=e,m();const s=this.simulation.universes.map((t=>({x:t.currState.bodies.map((t=>t.position.x)),y:t.currState.bodies.map((t=>t.position.y)),z:t.currState.bodies.map((t=>t.position.z)),hovertext:t.currState.bodies.map((t=>t.label)),color:t.color,marker:{size:t.currState.bodies.map((t=>Math.min(10,t.mass)))}})));O().animate(t,{data:s},{transition:{duration:0},frame:{duration:0,redraw:!1}}),G=requestAnimationFrame(p)},m=()=>{0!==u&&this.simulation.simulateStep(.016*u)};requestAnimationFrame(p)}pause(){this.playing=!1}resume(){this.playing=!0}stop(){this.playing=!1,O().purge(this.divId),this.divId=""}}class et{constructor(t,e){this.divId="",this.speeds=[0,.5,1,2,4,10,100,1e3,1e4],this.playing=!1,this.universeTracers=[],this.maxTraceLength=200,this.recordedFrames=[],this.playInd=0,this.simulation=t,this.recordFor=e}play(e,i){var n;this.divId=e,this.playing=!0;let s=document.getElementById(e);if(null===s)return;const o=s.clientWidth,r=s.clientHeight;let a=0,l=0;this.simulation.universes.forEach((t=>t.currState.bodies.forEach((t=>{a=Math.max(a,Math.abs(t.position.x)),l=Math.max(l,Math.abs(t.position.y))}))));const c=.5*Math.min(r/l,o/a);for(let t=0;t<60*this.recordFor;t++)this.recordedFrames.push(this.simulation.universes[0].currState.clone()),this.simulation.simulateStep(1/60);const h=new t.Scene,d=new t.OrthographicCamera(o/-2,o/2,r/2,r/-2,0,1e10);d.position.set(0,0,Math.max(o,r));const u=new t.WebGLRenderer;u.setSize(window.innerWidth,window.innerHeight),u.autoClear=!1,s.appendChild(u.domElement);const p=new N;null===(n=s.parentNode)||void 0===n||n.appendChild(p.dom);const m=new z(d,u.domElement);m.listenToKeyEvents(window),m.update();const g=new t.AxesHelper(o);h.add(g);const b=new D(d,u.domElement);let f=[];this.simulation.universes.forEach(((e,i)=>{i>0||(this.universeTracers.push(new J(this.maxTraceLength)),e.currState.bodies.forEach((i=>{const n=new t.SphereGeometry(q(Math.log2(i.mass)-70,10,40),8,8),s=new t.WireframeGeometry(n),o=new t.LineSegments(s,new t.LineBasicMaterial({color:new t.Color(e.color)}));h.add(o),o.position.copy(i.position.clone().multiplyScalar(c)),f.push(o)})))}));const v=new $;let y={"Time Scale":i};v.add(y,"Time Scale");const w=t=>{p.update();let e=0;if(void 0===this.recordedFrames[this.playInd])throw new Error("undefined frame");this.recordedFrames[this.playInd].bodies.forEach((t=>{f[e].visible=!0,f[e].position.copy(t.position.clone().multiplyScalar(c)),e++})),this.playInd=(this.playInd+Math.floor(y["Time Scale"])+this.recordedFrames.length)%this.recordedFrames.length,requestAnimationFrame(w),u.clear(),u.render(h,d),b.render(u),m.update()};requestAnimationFrame(w)}pause(){this.playing=!1}resume(){this.playing=!0}stop(){this.playing=!1,this.divId=""}}class it{constructor(t,e,i,n){if(this.universes=Array.isArray(t)?t:[t],this.universes.length>10)throw new Error("Too many universes");if(new Set(this.universes.map((t=>t.label))).size!==this.universes.length)throw new Error("Duplicate label in universes");if(i){if(void 0===n)throw new Error("recordFor must be defined if record is true");if(this.universes.length>1)throw new Error("Cannot record multiple universes");this.visualizer="2D"===e?new tt(this,n):new et(this,n)}else this.visualizer="2D"===e?new Z(this):new Q(this)}simulateStep(t){this.universes.forEach((e=>{e.simulateStep(t)}))}getVisState(){}play(t,e=1){this.visualizer.play(t,e)}pause(){this.visualizer.pause()}resume(){this.visualizer.resume()}stop(){this.visualizer.stop()}}class nt{transform(t){const e=t.bodies[0].position.clone();return t.bodies.forEach((t=>{t.position.sub(e)})),t}}class st{transform(e){let i=0,n=new t.Vector3;return e.bodies.forEach((t=>{i+=t.mass,n.add(t.position.clone().multiplyScalar(t.mass))})),n.divideScalar(i),e.bodies.forEach((t=>{t.position.sub(n)})),e}}class ot{constructor(t,e){this.axis=t,this.angle=e}transform(t){return t.bodies.forEach((t=>{t.position.applyAxisAngle(this.axis,this.angle),t.velocity.applyAxisAngle(this.axis,this.angle),t.acceleration.applyAxisAngle(this.axis,this.angle)})),t}}})(),o})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,