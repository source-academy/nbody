/*! For license information please see index.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("three"),require("plotly.js-dist"),require("three/examples/jsm/Addons"),require("three/examples/jsm/libs/stats.module")):"function"==typeof define&&define.amd?define(["three","plotly.js-dist","three/examples/jsm/Addons","three/examples/jsm/libs/stats.module"],e):"object"==typeof exports?exports.nbody=e(require("three"),require("plotly.js-dist"),require("three/examples/jsm/Addons"),require("three/examples/jsm/libs/stats.module")):t.nbody=e(t.three,t["plotly.js-dist"],t["three/examples/jsm/Addons"],t["three/examples/jsm/libs/stats.module"])}(this,((t,e,i,s)=>(()=>{"use strict";var n={924:t=>{t.exports=e},604:e=>{e.exports=t},987:t=>{t.exports=i},686:t=>{t.exports=s}},o={};function r(t){var e=o[t];if(void 0!==e)return e.exports;var i=o[t]={exports:{}};return n[t](i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var i in e)r.o(e,i)&&!r.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var l={};return(()=>{r.r(l),r.d(l,{BodyCenterTransformation:()=>P,CelestialBody:()=>t,CentripetalForce:()=>s,CoMTransformation:()=>G,CombinedForce:()=>n,ExplicitEulerSim:()=>h,Gravity:()=>i,LambdaSim:()=>u,LambdaTransformation:()=>Y,RealTimeVisualizer:()=>z,RealTimeVisualizer3D:()=>O,RecordingVisualizer:()=>j,RecordingVisualizer3D:()=>U,RotateTransformation:()=>R,RungeKutta4Sim:()=>c,SemiImplicitEulerSim:()=>d,Simulation:()=>H,State:()=>o,Universe:()=>K,Vector3:()=>e.Vector3,VelocityVerletSim:()=>a});class t{constructor(t,e,i,s,n){this.label=t,this.mass=e,this.position=i,this.velocity=s,this.acceleration=n}clone(e,i,s){return new t(this.label,this.mass,void 0===e?this.position.clone():e,void 0===i?this.velocity.clone():i,void 0===s?this.acceleration.clone():s)}}var e=r(604);class i{constructor(t=6674e-14){this.G=t}getForces(t){let i=t.length,s=[];for(let t=0;t<i;t++)s.push(new e.Vector3(0,0,0));for(let e=0;e<i;e++)for(let n=e+1;n<i;n++){let i=this.calcNewtonian(t[e],t[n]);s[e].add(i),s[n].sub(i)}return s}calcNewtonian(t,e){let i=t.position.distanceToSquared(e.position),s=this.G*t.mass*e.mass/i;return e.position.clone().sub(t.position).normalize().multiplyScalar(s)}}class s{constructor(t=new e.Vector3(0,0,0)){this.center=t}getForces(t){return t.map((t=>{const e=this.center.clone().sub(t.position);return e.setLength(t.mass*t.velocity.lengthSq()/e.length())}))}}class n{constructor(t){this.forces=t}getForces(t){const i=t.map((()=>new e.Vector3(0,0,0)));return this.forces.forEach((e=>{e.getForces(t).forEach(((t,e)=>{i[e].add(t)}))})),i}}class o{constructor(t){this.bodies=t}clone(){return new o(this.bodies.map((t=>t.clone())))}}class a{constructor(t){this.forceCalculator=t}simulate(t,e){if(t<=0)return e.clone();let i=e.bodies.map((e=>{let i=e.clone();return i.position=this.calcNewPos(i.position,i.velocity,i.acceleration,t),i})),s=this.forceCalculator.getForces(i);return new o(i.map(((e,i)=>{let n=s[i].divideScalar(e.mass);return e.velocity.add(e.acceleration.add(n).multiplyScalar(t/2)),e.acceleration=n,e})))}calcNewPos(t,e,i,s){return t.clone().add(e.clone().multiplyScalar(s)).add(i.clone().multiplyScalar(s*s*.5))}}class h{constructor(t){this.force=t}simulate(t,e){const i=e.bodies.map((e=>e.clone(this.rateUpdate(e.position,e.velocity,t),this.rateUpdate(e.velocity,e.acceleration,t)))),s=this.force.getForces(i);return i.forEach(((t,e)=>{t.acceleration=s[e].divideScalar(t.mass)})),new o(i)}rateUpdate(t,e,i){return e.clone().multiplyScalar(i).add(t)}}class d{constructor(t){this.force=t}simulate(t,e){const i=e.bodies.map((e=>{const i=this.rateUpdate(e.velocity,e.acceleration,t);return e.clone(this.rateUpdate(e.position,i,t),i)})),s=this.force.getForces(i);return i.forEach(((t,e)=>{t.acceleration=s[e].divideScalar(t.mass)})),new o(i)}rateUpdate(t,e,i){return e.clone().multiplyScalar(i).add(t)}}class c{constructor(t,e){if(this.force=t,4!==e.length)throw new Error("Weights for RK4 must be of length 4");this.weights=e}simulate(t,i){let s=i.bodies.map((t=>({kv:[t.acceleration.clone()],kx:[t.velocity.clone()]})));const n=this.getInterKV(i.bodies,s,0,t/2),r=this.getInterKX(i.bodies,s,0,t/2);s.forEach(((t,e)=>{t.kv.push(n[e]),t.kx.push(r[e])}));const l=this.getInterKV(i.bodies,s,1,t/2),a=this.getInterKX(i.bodies,s,1,t/2);s.forEach(((t,e)=>{t.kv.push(l[e]),t.kx.push(a[e])}));const h=this.getInterKV(i.bodies,s,2,t),d=this.getInterKX(i.bodies,s,2,t);s.forEach(((t,e)=>{t.kv.push(h[e]),t.kx.push(d[e])}));const c=i.bodies.map(((i,n)=>{const o=new e.Vector3,r=new e.Vector3;return s[n].kx.forEach(((t,e)=>{o.add(t.multiplyScalar(this.weights[e]))})),s[n].kv.forEach(((t,e)=>{r.add(t.multiplyScalar(this.weights[e]))})),i.clone(o.multiplyScalar(t/6).add(i.position),r.multiplyScalar(t/6).add(i.velocity))})),u=this.force.getForces(c);return c.forEach(((t,e)=>{t.acceleration=u[e].divideScalar(t.mass)})),new o(c)}getInterKV(t,e,i,s){let n=t.map(((t,n)=>{let o=t.clone();return o.position.add(e[n].kx[i].clone().multiplyScalar(s)),o}));return this.force.getForces(n).map(((e,i)=>e.divideScalar(t[i].mass)))}getInterKX(t,e,i,s){return t.map(((t,n)=>t.velocity.clone().add(e[n].kv[i].clone().multiplyScalar(s))))}}class u{constructor(t){this.fn=t}simulate(t,e,i){return this.fn(t,e,i)}}class p{constructor(t,e,i,s,n="div"){this.parent=t,this.object=e,this.property=i,this._disabled=!1,this._hidden=!1,this.initialValue=this.getValue(),this.domElement=document.createElement(n),this.domElement.classList.add("controller"),this.domElement.classList.add(s),this.$name=document.createElement("div"),this.$name.classList.add("name"),p.nextNameID=p.nextNameID||0,this.$name.id="lil-gui-name-"+ ++p.nextNameID,this.$widget=document.createElement("div"),this.$widget.classList.add("widget"),this.$disable=this.$widget,this.domElement.appendChild(this.$name),this.domElement.appendChild(this.$widget),this.domElement.addEventListener("keydown",(t=>t.stopPropagation())),this.domElement.addEventListener("keyup",(t=>t.stopPropagation())),this.parent.children.push(this),this.parent.controllers.push(this),this.parent.$children.appendChild(this.domElement),this._listenCallback=this._listenCallback.bind(this),this.name(i)}name(t){return this._name=t,this.$name.textContent=t,this}onChange(t){return this._onChange=t,this}_callOnChange(){this.parent._callOnChange(this),void 0!==this._onChange&&this._onChange.call(this,this.getValue()),this._changed=!0}onFinishChange(t){return this._onFinishChange=t,this}_callOnFinishChange(){this._changed&&(this.parent._callOnFinishChange(this),void 0!==this._onFinishChange&&this._onFinishChange.call(this,this.getValue())),this._changed=!1}reset(){return this.setValue(this.initialValue),this._callOnFinishChange(),this}enable(t=!0){return this.disable(!t)}disable(t=!0){return t===this._disabled||(this._disabled=t,this.domElement.classList.toggle("disabled",t),this.$disable.toggleAttribute("disabled",t)),this}show(t=!0){return this._hidden=!t,this.domElement.style.display=this._hidden?"none":"",this}hide(){return this.show(!1)}options(t){const e=this.parent.add(this.object,this.property,t);return e.name(this._name),this.destroy(),e}min(t){return this}max(t){return this}step(t){return this}decimals(t){return this}listen(t=!0){return this._listening=t,void 0!==this._listenCallbackID&&(cancelAnimationFrame(this._listenCallbackID),this._listenCallbackID=void 0),this._listening&&this._listenCallback(),this}_listenCallback(){this._listenCallbackID=requestAnimationFrame(this._listenCallback);const t=this.save();t!==this._listenPrevValue&&this.updateDisplay(),this._listenPrevValue=t}getValue(){return this.object[this.property]}setValue(t){return this.getValue()!==t&&(this.object[this.property]=t,this._callOnChange(),this.updateDisplay()),this}updateDisplay(){return this}load(t){return this.setValue(t),this._callOnFinishChange(),this}save(){return this.getValue()}destroy(){this.listen(!1),this.parent.children.splice(this.parent.children.indexOf(this),1),this.parent.controllers.splice(this.parent.controllers.indexOf(this),1),this.parent.$children.removeChild(this.domElement)}}class m extends p{constructor(t,e,i){super(t,e,i,"boolean","label"),this.$input=document.createElement("input"),this.$input.setAttribute("type","checkbox"),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$widget.appendChild(this.$input),this.$input.addEventListener("change",(()=>{this.setValue(this.$input.checked),this._callOnFinishChange()})),this.$disable=this.$input,this.updateDisplay()}updateDisplay(){return this.$input.checked=this.getValue(),this}}function g(t){let e,i;return(e=t.match(/(#|0x)?([a-f0-9]{6})/i))?i=e[2]:(e=t.match(/rgb\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*\)/))?i=parseInt(e[1]).toString(16).padStart(2,0)+parseInt(e[2]).toString(16).padStart(2,0)+parseInt(e[3]).toString(16).padStart(2,0):(e=t.match(/^#?([a-f0-9])([a-f0-9])([a-f0-9])$/i))&&(i=e[1]+e[1]+e[2]+e[2]+e[3]+e[3]),!!i&&"#"+i}const v={isPrimitive:!0,match:t=>"number"==typeof t,fromHexString:t=>parseInt(t.substring(1),16),toHexString:t=>"#"+t.toString(16).padStart(6,0)},b={isPrimitive:!1,match:t=>Array.isArray(t),fromHexString(t,e,i=1){const s=v.fromHexString(t);e[0]=(s>>16&255)/255*i,e[1]=(s>>8&255)/255*i,e[2]=(255&s)/255*i},toHexString:([t,e,i],s=1)=>v.toHexString(t*(s=255/s)<<16^e*s<<8^i*s)},f={isPrimitive:!1,match:t=>Object(t)===t,fromHexString(t,e,i=1){const s=v.fromHexString(t);e.r=(s>>16&255)/255*i,e.g=(s>>8&255)/255*i,e.b=(255&s)/255*i},toHexString:({r:t,g:e,b:i},s=1)=>v.toHexString(t*(s=255/s)<<16^e*s<<8^i*s)},w=[{isPrimitive:!0,match:t=>"string"==typeof t,fromHexString:g,toHexString:g},v,b,f];class y extends p{constructor(t,e,i,s){var n;super(t,e,i,"color"),this.$input=document.createElement("input"),this.$input.setAttribute("type","color"),this.$input.setAttribute("tabindex",-1),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$text=document.createElement("input"),this.$text.setAttribute("type","text"),this.$text.setAttribute("spellcheck","false"),this.$text.setAttribute("aria-labelledby",this.$name.id),this.$display=document.createElement("div"),this.$display.classList.add("display"),this.$display.appendChild(this.$input),this.$widget.appendChild(this.$display),this.$widget.appendChild(this.$text),this._format=(n=this.initialValue,w.find((t=>t.match(n)))),this._rgbScale=s,this._initialValueHexString=this.save(),this._textFocused=!1,this.$input.addEventListener("input",(()=>{this._setValueFromHexString(this.$input.value)})),this.$input.addEventListener("blur",(()=>{this._callOnFinishChange()})),this.$text.addEventListener("input",(()=>{const t=g(this.$text.value);t&&this._setValueFromHexString(t)})),this.$text.addEventListener("focus",(()=>{this._textFocused=!0,this.$text.select()})),this.$text.addEventListener("blur",(()=>{this._textFocused=!1,this.updateDisplay(),this._callOnFinishChange()})),this.$disable=this.$text,this.updateDisplay()}reset(){return this._setValueFromHexString(this._initialValueHexString),this}_setValueFromHexString(t){if(this._format.isPrimitive){const e=this._format.fromHexString(t);this.setValue(e)}else this._format.fromHexString(t,this.getValue(),this._rgbScale),this._callOnChange(),this.updateDisplay()}save(){return this._format.toHexString(this.getValue(),this._rgbScale)}load(t){return this._setValueFromHexString(t),this._callOnFinishChange(),this}updateDisplay(){return this.$input.value=this._format.toHexString(this.getValue(),this._rgbScale),this._textFocused||(this.$text.value=this.$input.value.substring(1)),this.$display.style.backgroundColor=this.$input.value,this}}class A extends p{constructor(t,e,i){super(t,e,i,"function"),this.$button=document.createElement("button"),this.$button.appendChild(this.$name),this.$widget.appendChild(this.$button),this.$button.addEventListener("click",(t=>{t.preventDefault(),this.getValue().call(this.object),this._callOnChange()})),this.$button.addEventListener("touchstart",(()=>{}),{passive:!0}),this.$disable=this.$button}}class x extends p{constructor(t,e,i,s,n,o){super(t,e,i,"number"),this._initInput(),this.min(s),this.max(n);const r=void 0!==o;this.step(r?o:this._getImplicitStep(),r),this.updateDisplay()}decimals(t){return this._decimals=t,this.updateDisplay(),this}min(t){return this._min=t,this._onUpdateMinMax(),this}max(t){return this._max=t,this._onUpdateMinMax(),this}step(t,e=!0){return this._step=t,this._stepExplicit=e,this}updateDisplay(){const t=this.getValue();if(this._hasSlider){let e=(t-this._min)/(this._max-this._min);e=Math.max(0,Math.min(e,1)),this.$fill.style.width=100*e+"%"}return this._inputFocused||(this.$input.value=void 0===this._decimals?t:t.toFixed(this._decimals)),this}_initInput(){this.$input=document.createElement("input"),this.$input.setAttribute("type","text"),this.$input.setAttribute("aria-labelledby",this.$name.id),window.matchMedia("(pointer: coarse)").matches&&(this.$input.setAttribute("type","number"),this.$input.setAttribute("step","any")),this.$widget.appendChild(this.$input),this.$disable=this.$input;const t=t=>{const e=parseFloat(this.$input.value);isNaN(e)||(this._snapClampSetValue(e+t),this.$input.value=this.getValue())};let e,i,s,n,o,r=!1;const l=t=>{if(r){const s=t.clientX-e,n=t.clientY-i;Math.abs(n)>5?(t.preventDefault(),this.$input.blur(),r=!1,this._setDraggingStyle(!0,"vertical")):Math.abs(s)>5&&a()}if(!r){const e=t.clientY-s;o-=e*this._step*this._arrowKeyMultiplier(t),n+o>this._max?o=this._max-n:n+o<this._min&&(o=this._min-n),this._snapClampSetValue(n+o)}s=t.clientY},a=()=>{this._setDraggingStyle(!1,"vertical"),this._callOnFinishChange(),window.removeEventListener("mousemove",l),window.removeEventListener("mouseup",a)};this.$input.addEventListener("input",(()=>{let t=parseFloat(this.$input.value);isNaN(t)||(this._stepExplicit&&(t=this._snap(t)),this.setValue(this._clamp(t)))})),this.$input.addEventListener("keydown",(e=>{"Enter"===e.key&&this.$input.blur(),"ArrowUp"===e.code&&(e.preventDefault(),t(this._step*this._arrowKeyMultiplier(e))),"ArrowDown"===e.code&&(e.preventDefault(),t(this._step*this._arrowKeyMultiplier(e)*-1))})),this.$input.addEventListener("wheel",(e=>{this._inputFocused&&(e.preventDefault(),t(this._step*this._normalizeMouseWheel(e)))}),{passive:!1}),this.$input.addEventListener("mousedown",(t=>{e=t.clientX,i=s=t.clientY,r=!0,n=this.getValue(),o=0,window.addEventListener("mousemove",l),window.addEventListener("mouseup",a)})),this.$input.addEventListener("focus",(()=>{this._inputFocused=!0})),this.$input.addEventListener("blur",(()=>{this._inputFocused=!1,this.updateDisplay(),this._callOnFinishChange()}))}_initSlider(){this._hasSlider=!0,this.$slider=document.createElement("div"),this.$slider.classList.add("slider"),this.$fill=document.createElement("div"),this.$fill.classList.add("fill"),this.$slider.appendChild(this.$fill),this.$widget.insertBefore(this.$slider,this.$input),this.domElement.classList.add("hasSlider");const t=t=>{const e=this.$slider.getBoundingClientRect();let i=(s=t,n=e.left,o=e.right,r=this._min,(s-n)/(o-n)*(this._max-r)+r);var s,n,o,r;this._snapClampSetValue(i)},e=e=>{t(e.clientX)},i=()=>{this._callOnFinishChange(),this._setDraggingStyle(!1),window.removeEventListener("mousemove",e),window.removeEventListener("mouseup",i)};let s,n,o=!1;const r=e=>{e.preventDefault(),this._setDraggingStyle(!0),t(e.touches[0].clientX),o=!1},l=e=>{if(o){const t=e.touches[0].clientX-s,i=e.touches[0].clientY-n;Math.abs(t)>Math.abs(i)?r(e):(window.removeEventListener("touchmove",l),window.removeEventListener("touchend",a))}else e.preventDefault(),t(e.touches[0].clientX)},a=()=>{this._callOnFinishChange(),this._setDraggingStyle(!1),window.removeEventListener("touchmove",l),window.removeEventListener("touchend",a)},h=this._callOnFinishChange.bind(this);let d;this.$slider.addEventListener("mousedown",(s=>{this._setDraggingStyle(!0),t(s.clientX),window.addEventListener("mousemove",e),window.addEventListener("mouseup",i)})),this.$slider.addEventListener("touchstart",(t=>{t.touches.length>1||(this._hasScrollBar?(s=t.touches[0].clientX,n=t.touches[0].clientY,o=!0):r(t),window.addEventListener("touchmove",l,{passive:!1}),window.addEventListener("touchend",a))}),{passive:!1}),this.$slider.addEventListener("wheel",(t=>{if(Math.abs(t.deltaX)<Math.abs(t.deltaY)&&this._hasScrollBar)return;t.preventDefault();const e=this._normalizeMouseWheel(t)*this._step;this._snapClampSetValue(this.getValue()+e),this.$input.value=this.getValue(),clearTimeout(d),d=setTimeout(h,400)}),{passive:!1})}_setDraggingStyle(t,e="horizontal"){this.$slider&&this.$slider.classList.toggle("active",t),document.body.classList.toggle("lil-gui-dragging",t),document.body.classList.toggle(`lil-gui-${e}`,t)}_getImplicitStep(){return this._hasMin&&this._hasMax?(this._max-this._min)/1e3:.1}_onUpdateMinMax(){!this._hasSlider&&this._hasMin&&this._hasMax&&(this._stepExplicit||this.step(this._getImplicitStep(),!1),this._initSlider(),this.updateDisplay())}_normalizeMouseWheel(t){let{deltaX:e,deltaY:i}=t;return Math.floor(t.deltaY)!==t.deltaY&&t.wheelDelta&&(e=0,i=-t.wheelDelta/120,i*=this._stepExplicit?1:10),e+-i}_arrowKeyMultiplier(t){let e=this._stepExplicit?1:10;return t.shiftKey?e*=10:t.altKey&&(e/=10),e}_snap(t){const e=Math.round(t/this._step)*this._step;return parseFloat(e.toPrecision(15))}_clamp(t){return t<this._min&&(t=this._min),t>this._max&&(t=this._max),t}_snapClampSetValue(t){this.setValue(this._clamp(this._snap(t)))}get _hasScrollBar(){const t=this.parent.root.$children;return t.scrollHeight>t.clientHeight}get _hasMin(){return void 0!==this._min}get _hasMax(){return void 0!==this._max}}class E extends p{constructor(t,e,i,s){super(t,e,i,"option"),this.$select=document.createElement("select"),this.$select.setAttribute("aria-labelledby",this.$name.id),this.$display=document.createElement("div"),this.$display.classList.add("display"),this.$select.addEventListener("change",(()=>{this.setValue(this._values[this.$select.selectedIndex]),this._callOnFinishChange()})),this.$select.addEventListener("focus",(()=>{this.$display.classList.add("focus")})),this.$select.addEventListener("blur",(()=>{this.$display.classList.remove("focus")})),this.$widget.appendChild(this.$select),this.$widget.appendChild(this.$display),this.$disable=this.$select,this.options(s)}options(t){return this._values=Array.isArray(t)?t:Object.values(t),this._names=Array.isArray(t)?t:Object.keys(t),this.$select.replaceChildren(),this._names.forEach((t=>{const e=document.createElement("option");e.textContent=t,this.$select.appendChild(e)})),this.updateDisplay(),this}updateDisplay(){const t=this.getValue(),e=this._values.indexOf(t);return this.$select.selectedIndex=e,this.$display.textContent=-1===e?t:this._names[e],this}}class S extends p{constructor(t,e,i){super(t,e,i,"string"),this.$input=document.createElement("input"),this.$input.setAttribute("type","text"),this.$input.setAttribute("spellcheck","false"),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$input.addEventListener("input",(()=>{this.setValue(this.$input.value)})),this.$input.addEventListener("keydown",(t=>{"Enter"===t.code&&this.$input.blur()})),this.$input.addEventListener("blur",(()=>{this._callOnFinishChange()})),this.$widget.appendChild(this.$input),this.$disable=this.$input,this.updateDisplay()}updateDisplay(){return this.$input.value=this.getValue(),this}}let _=!1;class ${constructor({parent:t,autoPlace:e=void 0===t,container:i,width:s,title:n="Controls",closeFolders:o=!1,injectStyles:r=!0,touchStyles:l=!0}={}){if(this.parent=t,this.root=t?t.root:this,this.children=[],this.controllers=[],this.folders=[],this._closed=!1,this._hidden=!1,this.domElement=document.createElement("div"),this.domElement.classList.add("lil-gui"),this.$title=document.createElement("div"),this.$title.classList.add("title"),this.$title.setAttribute("role","button"),this.$title.setAttribute("aria-expanded",!0),this.$title.setAttribute("tabindex",0),this.$title.addEventListener("click",(()=>this.openAnimated(this._closed))),this.$title.addEventListener("keydown",(t=>{"Enter"!==t.code&&"Space"!==t.code||(t.preventDefault(),this.$title.click())})),this.$title.addEventListener("touchstart",(()=>{}),{passive:!0}),this.$children=document.createElement("div"),this.$children.classList.add("children"),this.domElement.appendChild(this.$title),this.domElement.appendChild(this.$children),this.title(n),this.parent)return this.parent.children.push(this),this.parent.folders.push(this),void this.parent.$children.appendChild(this.domElement);this.domElement.classList.add("root"),l&&this.domElement.classList.add("allow-touch-styles"),!_&&r&&(function(t){const e=document.createElement("style");e.innerHTML='.lil-gui {\n  font-family: var(--font-family);\n  font-size: var(--font-size);\n  line-height: 1;\n  font-weight: normal;\n  font-style: normal;\n  text-align: left;\n  color: var(--text-color);\n  user-select: none;\n  -webkit-user-select: none;\n  touch-action: manipulation;\n  --background-color: #1f1f1f;\n  --text-color: #ebebeb;\n  --title-background-color: #111111;\n  --title-text-color: #ebebeb;\n  --widget-color: #424242;\n  --hover-color: #4f4f4f;\n  --focus-color: #595959;\n  --number-color: #2cc9ff;\n  --string-color: #a2db3c;\n  --font-size: 11px;\n  --input-font-size: 11px;\n  --font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Arial, sans-serif;\n  --font-family-mono: Menlo, Monaco, Consolas, "Droid Sans Mono", monospace;\n  --padding: 4px;\n  --spacing: 4px;\n  --widget-height: 20px;\n  --title-height: calc(var(--widget-height) + var(--spacing) * 1.25);\n  --name-width: 45%;\n  --slider-knob-width: 2px;\n  --slider-input-width: 27%;\n  --color-input-width: 27%;\n  --slider-input-min-width: 45px;\n  --color-input-min-width: 45px;\n  --folder-indent: 7px;\n  --widget-padding: 0 0 0 3px;\n  --widget-border-radius: 2px;\n  --checkbox-size: calc(0.75 * var(--widget-height));\n  --scrollbar-width: 5px;\n}\n.lil-gui, .lil-gui * {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n.lil-gui.root {\n  width: var(--width, 245px);\n  display: flex;\n  flex-direction: column;\n  background: var(--background-color);\n}\n.lil-gui.root > .title {\n  background: var(--title-background-color);\n  color: var(--title-text-color);\n}\n.lil-gui.root > .children {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n.lil-gui.root > .children::-webkit-scrollbar {\n  width: var(--scrollbar-width);\n  height: var(--scrollbar-width);\n  background: var(--background-color);\n}\n.lil-gui.root > .children::-webkit-scrollbar-thumb {\n  border-radius: var(--scrollbar-width);\n  background: var(--focus-color);\n}\n@media (pointer: coarse) {\n  .lil-gui.allow-touch-styles, .lil-gui.allow-touch-styles .lil-gui {\n    --widget-height: 28px;\n    --padding: 6px;\n    --spacing: 6px;\n    --font-size: 13px;\n    --input-font-size: 16px;\n    --folder-indent: 10px;\n    --scrollbar-width: 7px;\n    --slider-input-min-width: 50px;\n    --color-input-min-width: 65px;\n  }\n}\n.lil-gui.force-touch-styles, .lil-gui.force-touch-styles .lil-gui {\n  --widget-height: 28px;\n  --padding: 6px;\n  --spacing: 6px;\n  --font-size: 13px;\n  --input-font-size: 16px;\n  --folder-indent: 10px;\n  --scrollbar-width: 7px;\n  --slider-input-min-width: 50px;\n  --color-input-min-width: 65px;\n}\n.lil-gui.autoPlace {\n  max-height: 100%;\n  position: fixed;\n  top: 0;\n  right: 15px;\n  z-index: 1001;\n}\n\n.lil-gui .controller {\n  display: flex;\n  align-items: center;\n  padding: 0 var(--padding);\n  margin: var(--spacing) 0;\n}\n.lil-gui .controller.disabled {\n  opacity: 0.5;\n}\n.lil-gui .controller.disabled, .lil-gui .controller.disabled * {\n  pointer-events: none !important;\n}\n.lil-gui .controller > .name {\n  min-width: var(--name-width);\n  flex-shrink: 0;\n  white-space: pre;\n  padding-right: var(--spacing);\n  line-height: var(--widget-height);\n}\n.lil-gui .controller .widget {\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  min-height: var(--widget-height);\n}\n.lil-gui .controller.string input {\n  color: var(--string-color);\n}\n.lil-gui .controller.boolean {\n  cursor: pointer;\n}\n.lil-gui .controller.color .display {\n  width: 100%;\n  height: var(--widget-height);\n  border-radius: var(--widget-border-radius);\n  position: relative;\n}\n@media (hover: hover) {\n  .lil-gui .controller.color .display:hover:before {\n    content: " ";\n    display: block;\n    position: absolute;\n    border-radius: var(--widget-border-radius);\n    border: 1px solid #fff9;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n}\n.lil-gui .controller.color input[type=color] {\n  opacity: 0;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n}\n.lil-gui .controller.color input[type=text] {\n  margin-left: var(--spacing);\n  font-family: var(--font-family-mono);\n  min-width: var(--color-input-min-width);\n  width: var(--color-input-width);\n  flex-shrink: 0;\n}\n.lil-gui .controller.option select {\n  opacity: 0;\n  position: absolute;\n  width: 100%;\n  max-width: 100%;\n}\n.lil-gui .controller.option .display {\n  position: relative;\n  pointer-events: none;\n  border-radius: var(--widget-border-radius);\n  height: var(--widget-height);\n  line-height: var(--widget-height);\n  max-width: 100%;\n  overflow: hidden;\n  word-break: break-all;\n  padding-left: 0.55em;\n  padding-right: 1.75em;\n  background: var(--widget-color);\n}\n@media (hover: hover) {\n  .lil-gui .controller.option .display.focus {\n    background: var(--focus-color);\n  }\n}\n.lil-gui .controller.option .display.active {\n  background: var(--focus-color);\n}\n.lil-gui .controller.option .display:after {\n  font-family: "lil-gui";\n  content: "↕";\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  padding-right: 0.375em;\n}\n.lil-gui .controller.option .widget,\n.lil-gui .controller.option select {\n  cursor: pointer;\n}\n@media (hover: hover) {\n  .lil-gui .controller.option .widget:hover .display {\n    background: var(--hover-color);\n  }\n}\n.lil-gui .controller.number input {\n  color: var(--number-color);\n}\n.lil-gui .controller.number.hasSlider input {\n  margin-left: var(--spacing);\n  width: var(--slider-input-width);\n  min-width: var(--slider-input-min-width);\n  flex-shrink: 0;\n}\n.lil-gui .controller.number .slider {\n  width: 100%;\n  height: var(--widget-height);\n  background: var(--widget-color);\n  border-radius: var(--widget-border-radius);\n  padding-right: var(--slider-knob-width);\n  overflow: hidden;\n  cursor: ew-resize;\n  touch-action: pan-y;\n}\n@media (hover: hover) {\n  .lil-gui .controller.number .slider:hover {\n    background: var(--hover-color);\n  }\n}\n.lil-gui .controller.number .slider.active {\n  background: var(--focus-color);\n}\n.lil-gui .controller.number .slider.active .fill {\n  opacity: 0.95;\n}\n.lil-gui .controller.number .fill {\n  height: 100%;\n  border-right: var(--slider-knob-width) solid var(--number-color);\n  box-sizing: content-box;\n}\n\n.lil-gui-dragging .lil-gui {\n  --hover-color: var(--widget-color);\n}\n.lil-gui-dragging * {\n  cursor: ew-resize !important;\n}\n\n.lil-gui-dragging.lil-gui-vertical * {\n  cursor: ns-resize !important;\n}\n\n.lil-gui .title {\n  height: var(--title-height);\n  line-height: calc(var(--title-height) - 4px);\n  font-weight: 600;\n  padding: 0 var(--padding);\n  -webkit-tap-highlight-color: transparent;\n  cursor: pointer;\n  outline: none;\n  text-decoration-skip: objects;\n}\n.lil-gui .title:before {\n  font-family: "lil-gui";\n  content: "▾";\n  padding-right: 2px;\n  display: inline-block;\n}\n.lil-gui .title:active {\n  background: var(--title-background-color);\n  opacity: 0.75;\n}\n@media (hover: hover) {\n  body:not(.lil-gui-dragging) .lil-gui .title:hover {\n    background: var(--title-background-color);\n    opacity: 0.85;\n  }\n  .lil-gui .title:focus {\n    text-decoration: underline var(--focus-color);\n  }\n}\n.lil-gui.root > .title:focus {\n  text-decoration: none !important;\n}\n.lil-gui.closed > .title:before {\n  content: "▸";\n}\n.lil-gui.closed > .children {\n  transform: translateY(-7px);\n  opacity: 0;\n}\n.lil-gui.closed:not(.transition) > .children {\n  display: none;\n}\n.lil-gui.transition > .children {\n  transition-duration: 300ms;\n  transition-property: height, opacity, transform;\n  transition-timing-function: cubic-bezier(0.2, 0.6, 0.35, 1);\n  overflow: hidden;\n  pointer-events: none;\n}\n.lil-gui .children:empty:before {\n  content: "Empty";\n  padding: 0 var(--padding);\n  margin: var(--spacing) 0;\n  display: block;\n  height: var(--widget-height);\n  font-style: italic;\n  line-height: var(--widget-height);\n  opacity: 0.5;\n}\n.lil-gui.root > .children > .lil-gui > .title {\n  border: 0 solid var(--widget-color);\n  border-width: 1px 0;\n  transition: border-color 300ms;\n}\n.lil-gui.root > .children > .lil-gui.closed > .title {\n  border-bottom-color: transparent;\n}\n.lil-gui + .controller {\n  border-top: 1px solid var(--widget-color);\n  margin-top: 0;\n  padding-top: var(--spacing);\n}\n.lil-gui .lil-gui .lil-gui > .title {\n  border: none;\n}\n.lil-gui .lil-gui .lil-gui > .children {\n  border: none;\n  margin-left: var(--folder-indent);\n  border-left: 2px solid var(--widget-color);\n}\n.lil-gui .lil-gui .controller {\n  border: none;\n}\n\n.lil-gui label, .lil-gui input, .lil-gui button {\n  -webkit-tap-highlight-color: transparent;\n}\n.lil-gui input {\n  border: 0;\n  outline: none;\n  font-family: var(--font-family);\n  font-size: var(--input-font-size);\n  border-radius: var(--widget-border-radius);\n  height: var(--widget-height);\n  background: var(--widget-color);\n  color: var(--text-color);\n  width: 100%;\n}\n@media (hover: hover) {\n  .lil-gui input:hover {\n    background: var(--hover-color);\n  }\n  .lil-gui input:active {\n    background: var(--focus-color);\n  }\n}\n.lil-gui input:disabled {\n  opacity: 1;\n}\n.lil-gui input[type=text],\n.lil-gui input[type=number] {\n  padding: var(--widget-padding);\n  -moz-appearance: textfield;\n}\n.lil-gui input[type=text]:focus,\n.lil-gui input[type=number]:focus {\n  background: var(--focus-color);\n}\n.lil-gui input[type=checkbox] {\n  appearance: none;\n  width: var(--checkbox-size);\n  height: var(--checkbox-size);\n  border-radius: var(--widget-border-radius);\n  text-align: center;\n  cursor: pointer;\n}\n.lil-gui input[type=checkbox]:checked:before {\n  font-family: "lil-gui";\n  content: "✓";\n  font-size: var(--checkbox-size);\n  line-height: var(--checkbox-size);\n}\n@media (hover: hover) {\n  .lil-gui input[type=checkbox]:focus {\n    box-shadow: inset 0 0 0 1px var(--focus-color);\n  }\n}\n.lil-gui button {\n  outline: none;\n  cursor: pointer;\n  font-family: var(--font-family);\n  font-size: var(--font-size);\n  color: var(--text-color);\n  width: 100%;\n  height: var(--widget-height);\n  text-transform: none;\n  background: var(--widget-color);\n  border-radius: var(--widget-border-radius);\n  border: none;\n}\n@media (hover: hover) {\n  .lil-gui button:hover {\n    background: var(--hover-color);\n  }\n  .lil-gui button:focus {\n    box-shadow: inset 0 0 0 1px var(--focus-color);\n  }\n}\n.lil-gui button:active {\n  background: var(--focus-color);\n}\n\n@font-face {\n  font-family: "lil-gui";\n  src: url("data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAUsAAsAAAAACJwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAAH4AAADAImwmYE9TLzIAAAGIAAAAPwAAAGBKqH5SY21hcAAAAcgAAAD0AAACrukyyJBnbHlmAAACvAAAAF8AAACEIZpWH2hlYWQAAAMcAAAAJwAAADZfcj2zaGhlYQAAA0QAAAAYAAAAJAC5AHhobXR4AAADXAAAABAAAABMAZAAAGxvY2EAAANsAAAAFAAAACgCEgIybWF4cAAAA4AAAAAeAAAAIAEfABJuYW1lAAADoAAAASIAAAIK9SUU/XBvc3QAAATEAAAAZgAAAJCTcMc2eJxVjbEOgjAURU+hFRBK1dGRL+ALnAiToyMLEzFpnPz/eAshwSa97517c/MwwJmeB9kwPl+0cf5+uGPZXsqPu4nvZabcSZldZ6kfyWnomFY/eScKqZNWupKJO6kXN3K9uCVoL7iInPr1X5baXs3tjuMqCtzEuagm/AAlzQgPAAB4nGNgYRBlnMDAysDAYM/gBiT5oLQBAwuDJAMDEwMrMwNWEJDmmsJwgCFeXZghBcjlZMgFCzOiKOIFAB71Bb8AeJy1kjFuwkAQRZ+DwRAwBtNQRUGKQ8OdKCAWUhAgKLhIuAsVSpWz5Bbkj3dEgYiUIszqWdpZe+Z7/wB1oCYmIoboiwiLT2WjKl/jscrHfGg/pKdMkyklC5Zs2LEfHYpjcRoPzme9MWWmk3dWbK9ObkWkikOetJ554fWyoEsmdSlt+uR0pCJR34b6t/TVg1SY3sYvdf8vuiKrpyaDXDISiegp17p7579Gp3p++y7HPAiY9pmTibljrr85qSidtlg4+l25GLCaS8e6rRxNBmsnERunKbaOObRz7N72ju5vdAjYpBXHgJylOAVsMseDAPEP8LYoUHicY2BiAAEfhiAGJgZWBgZ7RnFRdnVJELCQlBSRlATJMoLV2DK4glSYs6ubq5vbKrJLSbGrgEmovDuDJVhe3VzcXFwNLCOILB/C4IuQ1xTn5FPilBTj5FPmBAB4WwoqAHicY2BkYGAA4sk1sR/j+W2+MnAzpDBgAyEMQUCSg4EJxAEAwUgFHgB4nGNgZGBgSGFggJMhDIwMqEAYAByHATJ4nGNgAIIUNEwmAABl3AGReJxjYAACIQYlBiMGJ3wQAEcQBEV4nGNgZGBgEGZgY2BiAAEQyQWEDAz/wXwGAAsPATIAAHicXdBNSsNAHAXwl35iA0UQXYnMShfS9GPZA7T7LgIu03SSpkwzYTIt1BN4Ak/gKTyAeCxfw39jZkjymzcvAwmAW/wgwHUEGDb36+jQQ3GXGot79L24jxCP4gHzF/EIr4jEIe7wxhOC3g2TMYy4Q7+Lu/SHuEd/ivt4wJd4wPxbPEKMX3GI5+DJFGaSn4qNzk8mcbKSR6xdXdhSzaOZJGtdapd4vVPbi6rP+cL7TGXOHtXKll4bY1Xl7EGnPtp7Xy2n00zyKLVHfkHBa4IcJ2oD3cgggWvt/V/FbDrUlEUJhTn/0azVWbNTNr0Ens8de1tceK9xZmfB1CPjOmPH4kitmvOubcNpmVTN3oFJyjzCvnmrwhJTzqzVj9jiSX911FjeAAB4nG3HMRKCMBBA0f0giiKi4DU8k0V2GWbIZDOh4PoWWvq6J5V8If9NVNQcaDhyouXMhY4rPTcG7jwYmXhKq8Wz+p762aNaeYXom2n3m2dLTVgsrCgFJ7OTmIkYbwIbC6vIB7WmFfAAAA==") format("woff");\n}';const i=document.querySelector("head link[rel=stylesheet], head style");i?document.head.insertBefore(e,i):document.head.appendChild(e)}(),_=!0),i?i.appendChild(this.domElement):e&&(this.domElement.classList.add("autoPlace"),document.body.appendChild(this.domElement)),s&&this.domElement.style.setProperty("--width",s+"px"),this._closeFolders=o}add(t,e,i,s,n){if(Object(i)===i)return new E(this,t,e,i);const o=t[e];switch(typeof o){case"number":return new x(this,t,e,i,s,n);case"boolean":return new m(this,t,e);case"string":return new S(this,t,e);case"function":return new A(this,t,e)}console.error("gui.add failed\n\tproperty:",e,"\n\tobject:",t,"\n\tvalue:",o)}addColor(t,e,i=1){return new y(this,t,e,i)}addFolder(t){const e=new $({parent:this,title:t});return this.root._closeFolders&&e.close(),e}load(t,e=!0){return t.controllers&&this.controllers.forEach((e=>{e instanceof A||e._name in t.controllers&&e.load(t.controllers[e._name])})),e&&t.folders&&this.folders.forEach((e=>{e._title in t.folders&&e.load(t.folders[e._title])})),this}save(t=!0){const e={controllers:{},folders:{}};return this.controllers.forEach((t=>{if(!(t instanceof A)){if(t._name in e.controllers)throw new Error(`Cannot save GUI with duplicate property "${t._name}"`);e.controllers[t._name]=t.save()}})),t&&this.folders.forEach((t=>{if(t._title in e.folders)throw new Error(`Cannot save GUI with duplicate folder "${t._title}"`);e.folders[t._title]=t.save()})),e}open(t=!0){return this._setClosed(!t),this.$title.setAttribute("aria-expanded",!this._closed),this.domElement.classList.toggle("closed",this._closed),this}close(){return this.open(!1)}_setClosed(t){this._closed!==t&&(this._closed=t,this._callOnOpenClose(this))}show(t=!0){return this._hidden=!t,this.domElement.style.display=this._hidden?"none":"",this}hide(){return this.show(!1)}openAnimated(t=!0){return this._setClosed(!t),this.$title.setAttribute("aria-expanded",!this._closed),requestAnimationFrame((()=>{const e=this.$children.clientHeight;this.$children.style.height=e+"px",this.domElement.classList.add("transition");const i=t=>{t.target===this.$children&&(this.$children.style.height="",this.domElement.classList.remove("transition"),this.$children.removeEventListener("transitionend",i))};this.$children.addEventListener("transitionend",i);const s=t?this.$children.scrollHeight:0;this.domElement.classList.toggle("closed",!t),requestAnimationFrame((()=>{this.$children.style.height=s+"px"}))})),this}title(t){return this._title=t,this.$title.textContent=t,this}reset(t=!0){return(t?this.controllersRecursive():this.controllers).forEach((t=>t.reset())),this}onChange(t){return this._onChange=t,this}_callOnChange(t){this.parent&&this.parent._callOnChange(t),void 0!==this._onChange&&this._onChange.call(this,{object:t.object,property:t.property,value:t.getValue(),controller:t})}onFinishChange(t){return this._onFinishChange=t,this}_callOnFinishChange(t){this.parent&&this.parent._callOnFinishChange(t),void 0!==this._onFinishChange&&this._onFinishChange.call(this,{object:t.object,property:t.property,value:t.getValue(),controller:t})}onOpenClose(t){return this._onOpenClose=t,this}_callOnOpenClose(t){this.parent&&this.parent._callOnOpenClose(t),void 0!==this._onOpenClose&&this._onOpenClose.call(this,t)}destroy(){this.parent&&(this.parent.children.splice(this.parent.children.indexOf(this),1),this.parent.folders.splice(this.parent.folders.indexOf(this),1)),this.domElement.parentElement&&this.domElement.parentElement.removeChild(this.domElement),Array.from(this.children).forEach((t=>t.destroy()))}controllersRecursive(){let t=Array.from(this.controllers);return this.folders.forEach((e=>{t=t.concat(e.controllersRecursive())})),t}foldersRecursive(){let t=Array.from(this.folders);return this.folders.forEach((e=>{t=t.concat(e.foldersRecursive())})),t}}const C=$;var L=r(924),T=r.n(L),k=r(987),F=r(686),M=r.n(F);let I=null;function D(t,e,i){return t<e?e:t>i?i:t}class V{constructor(t,e){this.data={x:[],y:[],mode:"markers",marker:{size:1,color:"white"}},this.data.marker.color=e,this.trailLength=0,this.maxTrailLength=t,this.trailInd=0}addTrail(t,e){this.trailLength<this.maxTrailLength?(this.data.x.push(t),this.data.y.push(e),this.trailLength++):(this.data.x[this.trailInd]=t,this.data.y[this.trailInd]=e,this.trailInd=(this.trailInd+1)%this.trailLength)}popAllTrails(){this.data.x=[],this.data.y=[],this.trailLength=0,this.trailInd=0}}class z{constructor(t){this.divId="",this.universeTrails=[],this.simulation=t}addControls(t){const e=new C({container:t});e.domElement.style.position="absolute",e.domElement.style.top="0",e.domElement.style.left="0",e.domElement.style.zIndex="1000";const i=this.simulation.controls;e.add(i,"speed"),e.add(i,"showTrails").onChange((t=>{!1===t&&this.universeTrails.forEach((t=>t.popAllTrails())),i.showTrails=t}));const s=e.addFolder("Show Universe");s.open(!1),this.simulation.universes.forEach(((t,e)=>{s.add(i.showUniverse,t.label).onChange((s=>{!1===s&&this.universeTrails[e].popAllTrails(),i.showUniverse[t.label]=s}))}))}start(t,e,i){if(""!==this.divId)return void console.error("Simulation already playing. Stop the current playtime before initiating a new one.");this.divId=t;let s=document.getElementById(t);if(null===s)return;let n=0,o=0;this.simulation.universes.forEach((t=>t.currState.bodies.forEach((t=>{n=Math.max(n,Math.abs(t.position.x)),o=Math.max(o,Math.abs(t.position.y))}))));const r=.5*Math.min(i/o,e/n),l={paper_bgcolor:"#000000",plot_bgcolor:"#000000",font:{color:"#bfbfbf"},xaxis:{autorange:!1,range:[-e/2/r,e/2/r]},yaxis:{autorange:!1,range:[-i/2/r,i/2/r]},showlegend:!1};let a;"ui"===this.simulation.controller&&this.addControls(s),this.simulation.showDebugInfo&&(a=new(M()),a.dom.style.position="absolute",a.dom.style.bottom="0px",a.dom.style.removeProperty("top"),s.appendChild(a.dom));const h=this.simulation.universes.flatMap((t=>{const e=new V(this.simulation.getMaxTrailLength(),"string"==typeof t.color?t.color:t.color[0]);this.universeTrails.push(e);const i={x:t.currState.bodies.map((t=>t.position.x)),y:t.currState.bodies.map((t=>t.position.y)),type:"scatter",mode:"markers",marker:{color:t.color,sizemin:6,size:t.currState.bodies.map((t=>Math.min(10,t.mass)))}};return this.simulation.getShowTrails()?(t.currState.bodies.forEach((t=>{e.addTrail(t.position.x,t.position.y)})),[i,e.data]):[i,{x:[],y:[]}]}));T().newPlot(t,h,l,{scrollZoom:!0,modeBarButtonsToRemove:["lasso2d","select2d","toImage","resetScale2d"]});const d=1e3/this.simulation.maxFrameRate;if(null!==I)return;let c=0,u=0;const p=t=>{this.simulation.simulateStep(this.simulation.controls.speed*Math.min(t-u,33.33)/1e3),u=t},m=e=>{if(0===this.simulation.controls.speed||this.simulation.controls.paused)return void(I=requestAnimationFrame(m));if(p(e),d>0&&e-c<d)return void(I=requestAnimationFrame(m));c=e;const i=this.simulation.universes.flatMap(((t,e)=>{if(!this.simulation.getShowUniverse(t.label))return[{x:[],y:[]},{}];const i={x:t.currState.bodies.map((t=>t.position.x)),y:t.currState.bodies.map((t=>t.position.y)),hovertext:t.currState.bodies.map((t=>t.label)),marker:{size:t.currState.bodies.map((t=>Math.min(10,t.mass))),color:t.color,sizemin:6},mode:"markers"};let s={};if(this.simulation.getShowTrails()){const i=this.universeTrails[e];t.currState.bodies.forEach((t=>{i.addTrail(t.position.x,t.position.y)})),s=i.data}return[i,s]}));T().react(t,i,l),this.simulation.showDebugInfo&&a&&a.update(),I=requestAnimationFrame(m)};I=requestAnimationFrame(m)}stop(){T().purge(this.divId),this.divId="",this.universeTrails.forEach((t=>{t.popAllTrails()})),this.universeTrails=[]}}class B{constructor(t,i,s,n){const o=new e.BufferGeometry;o.setAttribute("position",new e.BufferAttribute(new Float32Array(0),3)),this.trails=new e.Points(o,new e.PointsMaterial({color:i,size:.005*n})),s.add(this.trails),this.trailInd=0,this.trailLength=0,this.maxTrailLength=t}addTrail(t){if(this.trailLength<this.maxTrailLength){this.trails.visible=!0,this.trailLength++;const i=new Float32Array(3*this.trailLength);i.set(this.trails.geometry.attributes.position.array),i.set(t.toArray(),3*this.trailLength-3),this.trails.geometry.setAttribute("position",new e.BufferAttribute(i,3)),this.trails.geometry.attributes.position.needsUpdate=!0}else this.trails.geometry.attributes.position.array.set(t.toArray(),3*this.trailInd),this.trailInd=(this.trailInd+1)%this.maxTrailLength,this.trails.geometry.attributes.position.needsUpdate=!0}popAllTrails(){this.trails.visible=!1,this.trails.geometry.setAttribute("position",new e.BufferAttribute(new Float32Array(0),3)),this.trailInd=0,this.trailLength=0}}class O{constructor(t){this.universeTrails=[],this.simulation=t}addControls(t){const e=new C({container:t});e.domElement.style.position="absolute",e.domElement.style.top="0",e.domElement.style.left="0",e.domElement.style.zIndex="1000";const i=this.simulation.controls;e.add(i,"speed"),e.add(i,"showTrails").onChange((t=>{!1===t&&this.universeTrails.forEach((t=>{t.popAllTrails()})),i.showTrails=t}));const s=e.addFolder("Show Universe");s.open(!1),this.simulation.universes.forEach(((t,e)=>{s.add(i.showUniverse,t.label).onChange((s=>{!1===s&&this.universeTrails[e].popAllTrails(),i.showUniverse[t.label]=s}))}))}start(t,i,s){if(void 0!==this.scene)return void console.error("Simulation already playing. Stop the current playtime before initiating a new one.");let n=document.getElementById(t);if(null===n)return;n.style.position="relative";let o=0,r=0;this.simulation.universes.forEach((t=>t.currState.bodies.forEach((t=>{o=Math.max(o,Math.abs(t.position.x)),r=Math.max(r,Math.abs(t.position.y))}))));const l=.5*Math.min(s/r,i/o);this.scene=new e.Scene;const a=new e.OrthographicCamera(i/-2,i/2,s/2,s/-2,0,1e10);a.position.set(0,0,Math.max(i,s));const h=new e.WebGLRenderer;let d;h.setSize(i,s),h.autoClear=!1,n.appendChild(h.domElement),this.simulation.showDebugInfo&&(d=new(M()),d.dom.style.position="absolute",d.dom.style.right="0px",d.dom.style.removeProperty("left"),n.appendChild(d.dom)),"ui"===this.simulation.controller&&this.addControls(n);const c=new k.OrbitControls(a,h.domElement);c.listenToKeyEvents(window),c.update();const u=new e.AxesHelper(i);this.scene.add(u);const p=new k.ViewHelper(a,h.domElement);let m=[];this.simulation.universes.forEach((t=>{this.universeTrails.push(new B(this.simulation.maxTrailLength,"string"==typeof t.color?t.color:t.color[0],this.scene,l)),t.currState.bodies.forEach((i=>{const s=new e.SphereGeometry(D(Math.log2(i.mass)-70,10,40),8,8),n=new e.WireframeGeometry(s),o=new e.LineSegments(n,new e.LineBasicMaterial({color:new e.Color(t.color)}));this.scene.add(o),o.position.copy(i.position.clone().multiplyScalar(l)),m.push(o)}))}));const g=1e3/this.simulation.maxFrameRate;let v=performance.now(),b=performance.now();const f=t=>{this.simulation.simulateStep(this.simulation.controls.speed*Math.min(t-v,16.67)/1e3),v=t},w=t=>{if(0===this.simulation.controls.speed||this.simulation.controls.paused)return requestAnimationFrame(w),h.clear(),h.render(this.scene,a),p.render(h),void c.update();if(f(t),g>0&&t-b<g)return requestAnimationFrame(w),h.clear(),h.render(this.scene,a),p.render(h),void c.update();b=t,this.simulation.showDebugInfo&&d&&d.update();let e=0;this.simulation.universes.forEach(((t,i)=>{this.simulation.controls.showUniverse[t.label]?t.currState.bodies.forEach((t=>{m[e].visible=!0,m[e].position.copy(t.position.clone().multiplyScalar(l)),this.simulation.controls.showTrails&&this.universeTrails[i].addTrail(m[e].position),e++})):t.currState.bodies.forEach((t=>{m[e].visible=!1,e++}))})),requestAnimationFrame(w),h.clear(),h.render(this.scene,a),p.render(h),c.update()};requestAnimationFrame(w)}stop(){var t;null===(t=this.scene)||void 0===t||t.clear(),this.scene=void 0,this.universeTrails.forEach((t=>{t.popAllTrails()})),this.universeTrails=[]}}class j{constructor(t){this.divId="",this.universeTrails=[],this.simulation=t}addControls(t){const e=new C({container:t});e.domElement.style.position="absolute",e.domElement.style.top="0",e.domElement.style.left="0",e.domElement.style.zIndex="1000";const i=this.simulation.controls;e.add(i,"speed"),e.add(i,"showTrails").onChange((t=>{!1===t&&this.universeTrails.forEach((t=>t.popAllTrails())),i.showTrails=t}));const s=e.addFolder("Show Universe");s.open(!1),this.simulation.universes.forEach(((t,e)=>{s.add(i.showUniverse,t.label).onChange((s=>{!1===s&&this.universeTrails[e].popAllTrails(),i.showUniverse[t.label]=s}))}))}start(t,e,i,s){if(""!==this.divId)return void console.error("Simulation already playing. Stop the current playtime before initiating a new one.");this.divId=t;let n=document.getElementById(t);if(null===n)return;let o=0,r=0;this.simulation.universes.forEach((t=>t.currState.bodies.forEach((t=>{o=Math.max(o,Math.abs(t.position.x)),r=Math.max(r,Math.abs(t.position.y))}))));const l=.5*Math.min(i/r,e/o),a=[],h=this.simulation.maxFrameRate*s;let d=1;this.simulation.universes.forEach((t=>{a.push([t.currState.clone()])}));for(let t=0;t<h;t++)this.simulation.simulateStep(1/this.simulation.maxFrameRate),this.simulation.universes.forEach(((t,e)=>{a[e].push(t.currState.clone())}));const c={paper_bgcolor:"#000000",plot_bgcolor:"#000000",font:{color:"#bfbfbf"},xaxis:{autorange:!1,range:[-e/2/l,e/2/l]},yaxis:{autorange:!1,range:[-i/2/l,i/2/l]},showlegend:!1};let u;"ui"===this.simulation.controller&&this.addControls(n),this.simulation.showDebugInfo&&(u=new(M()),u.dom.style.position="absolute",u.dom.style.bottom="0px",u.dom.style.removeProperty("top"),n.appendChild(u.dom));const p=this.simulation.universes.flatMap((t=>{const e=new V(this.simulation.getMaxTrailLength(),"string"==typeof t.color?t.color:t.color[0]);this.universeTrails.push(e);const i={x:t.currState.bodies.map((t=>t.position.x)),y:t.currState.bodies.map((t=>t.position.y)),type:"scatter",mode:"markers",marker:{color:t.color,sizemin:6,size:t.currState.bodies.map((t=>Math.min(10,t.mass)))}};return this.simulation.getShowTrails()?(t.currState.bodies.forEach((t=>{e.addTrail(t.position.x,t.position.y)})),[i,e.data]):[i,{x:[],y:[]}]}));if(T().newPlot(t,p,c,{scrollZoom:!0,modeBarButtonsToRemove:["zoom2d","lasso2d","select2d","toImage","resetScale2d"]}),null!==I)return;const m=e=>{if(0===this.simulation.controls.speed||this.simulation.controls.paused)return void(I=requestAnimationFrame(m));const i=Math.round(d),s=this.simulation.universes.flatMap(((t,e)=>{if(!this.simulation.getShowUniverse(t.label))return[{x:[],y:[]},{}];const s=a[e][i],n={x:s.bodies.map((t=>t.position.x)),y:s.bodies.map((t=>t.position.y)),hovertext:s.bodies.map((t=>t.label)),marker:{size:s.bodies.map((t=>Math.min(10,t.mass))),color:t.color,sizemin:6},mode:"markers"};let o={};if(this.simulation.getShowTrails()){const t=this.universeTrails[e];s.bodies.forEach((e=>{t.addTrail(e.position.x,e.position.y)})),o=t.data}return[n,o]}));T().react(t,s,c),this.simulation.showDebugInfo&&u&&u.update(),d=Math.round(d+this.simulation.controls.speed),d<0?d=this.simulation.looped?(d%h+h)%h:0:d>=h&&(this.simulation.looped?d%=h:d=h-1),I=requestAnimationFrame(m)};I=requestAnimationFrame(m)}stop(){T().purge(this.divId),this.divId="",this.universeTrails=[]}}class U{constructor(t){this.universeTrails=[],this.simulation=t}addControls(t){const e=new C({container:t});e.domElement.style.position="absolute",e.domElement.style.top="0",e.domElement.style.left="0",e.domElement.style.zIndex="1000";const i=this.simulation.controls;e.add(i,"speed"),e.add(i,"showTrails").onChange((t=>{!1===t&&this.universeTrails.forEach((t=>{t.popAllTrails()})),i.showTrails=t}));const s=e.addFolder("Show Universe");s.open(!1),this.simulation.universes.forEach(((t,e)=>{s.add(i.showUniverse,t.label).onChange((s=>{!1===s&&this.universeTrails[e].popAllTrails(),i.showUniverse[t.label]=s}))}))}start(t,i,s,n){if(void 0!==this.scene)return void console.error("Simulation already playing. Stop the current playtime before initiating a new one.");let o=document.getElementById(t);if(null===o)return;let r=0,l=0;this.simulation.universes.forEach((t=>t.currState.bodies.forEach((t=>{r=Math.max(r,Math.abs(t.position.x)),l=Math.max(l,Math.abs(t.position.y))}))));const a=.5*Math.min(s/l,i/r);this.scene=new e.Scene;const h=new e.OrthographicCamera(i/-2,i/2,s/2,s/-2,0,1e10);h.position.set(0,0,Math.max(i,s));const d=new e.WebGLRenderer;let c;d.setSize(i,s),d.autoClear=!1,o.appendChild(d.domElement),this.simulation.showDebugInfo&&(c=new(M()),c.dom.style.position="absolute",c.dom.style.right="0px",c.dom.style.removeProperty("left"),o.appendChild(c.dom)),"ui"===this.simulation.controller&&this.addControls(o);const u=new k.OrbitControls(h,d.domElement);u.listenToKeyEvents(window),u.update();const p=new e.AxesHelper(i);this.scene.add(p);const m=new k.ViewHelper(h,d.domElement);let g=[];this.simulation.universes.forEach((t=>{this.universeTrails.push(new B(this.simulation.maxTrailLength,"string"==typeof t.color?t.color:t.color[0],this.scene,a)),t.currState.bodies.forEach((i=>{const s=new e.SphereGeometry(D(Math.log2(i.mass)-70,10,40),8,8),n=new e.WireframeGeometry(s),o=new e.LineSegments(n,new e.LineBasicMaterial({color:new e.Color(t.color)}));this.scene.add(o),o.position.copy(i.position.clone().multiplyScalar(a)),g.push(o)}))}));const v=[],b=this.simulation.maxFrameRate*n;let f=1;this.simulation.universes.forEach((t=>{v.push([t.currState.clone()])}));for(let t=0;t<b;t++)this.simulation.simulateStep(1/this.simulation.maxFrameRate),this.simulation.universes.forEach(((t,e)=>{v[e].push(t.currState.clone())}));const w=t=>{if(0===this.simulation.controls.speed||this.simulation.controls.paused)return requestAnimationFrame(w),d.clear(),d.render(this.scene,h),m.render(d),void u.update();let e=0;this.simulation.universes.forEach(((t,i)=>{this.simulation.controls.showUniverse[t.label]?v[i][f].bodies.forEach((t=>{g[e].visible=!0,g[e].position.copy(t.position.clone().multiplyScalar(a)),this.simulation.controls.showTrails&&this.universeTrails[i].addTrail(g[e].position),e++})):t.currState.bodies.forEach((()=>{g[e].visible=!1,e++}))})),this.simulation.showDebugInfo&&c&&c.update(),f=Math.round(f+this.simulation.controls.speed),f<0?f=this.simulation.looped?(f%b+b)%b:0:f>=b&&(this.simulation.looped?f%=b:f=b-1),requestAnimationFrame(w),d.clear(),d.render(this.scene,h),m.render(d),u.update()};requestAnimationFrame(w)}stop(){var t;null===(t=this.scene)||void 0===t||t.clear(),this.scene=void 0,this.universeTrails.forEach((t=>{t.popAllTrails()})),this.universeTrails=[]}}class H{constructor(t,{visType:e="2D",record:i=!1,looped:s=!0,controller:n="none",showTrails:o=!1,showDebugInfo:r=!1,maxFrameRate:l=-1,maxTrailLength:a=100}){if(this.controls={speed:1,paused:!0,showTrails:!1,showUniverse:{}},this.universes=Array.isArray(t)?t:[t],this.universes.length>10)throw new Error("Too many universes");if(new Set(this.universes.map((t=>t.label))).size!==this.universes.length)throw new Error("Duplicate label in universes");this.controller=n,this.universes.forEach((t=>{this.controls.showUniverse[t.label]=!0})),this.controls.showTrails=o,this.showDebugInfo=r,this.maxFrameRate=l,this.maxTrailLength=a,this.looped=s,i?(this.maxFrameRate=60,this.visualizer="2D"===e?new j(this):new U(this)):this.visualizer="2D"===e?new z(this):new O(this)}getSpeed(){return this.controls.speed}setSpeed(t){"code"===this.controller&&(this.controls.speed=t)}isPlaying(){return!this.controls.paused}pause(){"code"===this.controller&&(this.controls.paused=!0)}resume(){"code"===this.controller&&(this.controls.paused=!1)}getShowTrails(){return this.controls.showTrails}setShowTrails(t){"code"===this.controller&&(this.controls.showTrails=t)}getShowUniverse(t){return this.controls.showUniverse[t]}setShowUniverse(t,e){"code"===this.controller&&(this.controls.showUniverse[t]=e)}getMaxTrailLength(){return this.maxTrailLength}setMaxTrailLength(t){"code"===this.controller&&(this.maxTrailLength=t)}simulateStep(t){this.universes.forEach((e=>{e.simulateStep(t)}))}start(t,e,i,s=1,n=!1,o=0){if(void 0===o)throw new Error("recordFor must be defined if record is true");this.controls.paused=n,this.controls.speed=s,this.visualizer.start(t,e,i,o)}stop(){this.visualizer.stop()}}class P{transform(t){const e=t.bodies[0].position.clone();return t.bodies.forEach((t=>{t.position.sub(e)})),t}}class G{transform(t){let i=0,s=new e.Vector3;return t.bodies.forEach((t=>{i+=t.mass,s.add(t.position.clone().multiplyScalar(t.mass))})),s.divideScalar(i),t.bodies.forEach((t=>{t.position.sub(s)})),t}}class R{constructor(t,e){this.axis=t,this.angle=e}transform(t){return t.bodies.forEach((t=>{t.position.applyAxisAngle(this.axis,this.angle),t.velocity.applyAxisAngle(this.axis,this.angle),t.acceleration.applyAxisAngle(this.axis,this.angle)})),t}}class Y{constructor(t){this.fn=t}transform(t,e){return this.fn(t,e)}}class K{constructor(t){if(void 0===t.currState)throw new Error("Missing Current State in Universe");if(void 0===t.simFunc)throw new Error("Missing Simulation Function in Universe");this.label=void 0===t.label?"Universe":t.label,this.prevState=void 0===t.prevState?t.currState:t.prevState,this.currState=t.currState,this.color=void 0===t.color?"rgba(255, 255, 255, 1)":t.color,this.simFunc=t.simFunc,this.transformations=void 0===t.transformations?[]:Array.isArray(t.transformations)?t.transformations:[t.transformations]}simulateStep(t){let e=this.simFunc.simulate(t,this.currState,this.prevState);this.prevState=this.currState,this.transformations.forEach((i=>{e=i.transform(e,t)})),this.currState=e}clone(){return new K({prevState:this.prevState.clone(),currState:this.currState.clone(),color:this.color,label:this.label,simFunc:this.simFunc,transformations:this.transformations})}}})(),l})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SCxLQUFLOEUsVUFDdEI5RSxLQUFLNGdCLGdCQUFnQnZjLFNBQVN5YyxJQUM1QkQsRUFBV0MsRUFBRWIsVUFBVVksRUFBVWhjLEVBQU8sSUFFMUM3RSxLQUFLOEUsVUFBWStiLENBQ25CLENBTUEsS0FBQXRlLEdBQ0UsT0FBTyxJQUFJbWUsRUFBUyxDQUNsQnBaLFVBQVd0SCxLQUFLc0gsVUFBVS9FLFFBQzFCdUMsVUFBVzlFLEtBQUs4RSxVQUFVdkMsUUFDMUJ1VixNQUFPOVgsS0FBSzhYLE1BQ1o1VixNQUFPbEMsS0FBS2tDLE1BQ1p5ZSxRQUFTM2dCLEtBQUsyZ0IsUUFDZEMsZ0JBQWlCNWdCLEtBQUs0Z0IsaUJBRTFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmJvZHkvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL25ib2R5L2V4dGVybmFsIHVtZCBcInBsb3RseS5qcy1kaXN0XCIiLCJ3ZWJwYWNrOi8vbmJvZHkvZXh0ZXJuYWwgdW1kIFwidGhyZWVcIiIsIndlYnBhY2s6Ly9uYm9keS9leHRlcm5hbCB1bWQgXCJ0aHJlZS9leGFtcGxlcy9qc20vQWRkb25zXCIiLCJ3ZWJwYWNrOi8vbmJvZHkvZXh0ZXJuYWwgdW1kIFwidGhyZWUvZXhhbXBsZXMvanNtL2xpYnMvc3RhdHMubW9kdWxlXCIiLCJ3ZWJwYWNrOi8vbmJvZHkvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbmJvZHkvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vbmJvZHkvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL25ib2R5L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vbmJvZHkvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9uYm9keS8uL3NyYy9DZWxlc3RpYWxCb2R5LnRzIiwid2VicGFjazovL25ib2R5Ly4vc3JjL2xpYnJhcnkvRm9yY2UudHMiLCJ3ZWJwYWNrOi8vbmJvZHkvLi9zcmMvU3RhdGUudHMiLCJ3ZWJwYWNrOi8vbmJvZHkvLi9zcmMvbGlicmFyeS9TaW11bGF0ZUZ1bmN0aW9uLnRzIiwid2VicGFjazovL25ib2R5Ly4vc3JjL1NpbXVsYXRlRnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vbmJvZHkvLi9ub2RlX21vZHVsZXMvbGlsLWd1aS9kaXN0L2xpbC1ndWkuZXNtLmpzIiwid2VicGFjazovL25ib2R5Ly4vc3JjL2xpYnJhcnkvVmlzdWFsaXplci50cyIsIndlYnBhY2s6Ly9uYm9keS8uL3NyYy9TaW11bGF0aW9uLnRzIiwid2VicGFjazovL25ib2R5Ly4vc3JjL2xpYnJhcnkvVHJhbnNmb3JtYXRpb24udHMiLCJ3ZWJwYWNrOi8vbmJvZHkvLi9zcmMvVHJhbnNmb3JtYXRpb24udHMiLCJ3ZWJwYWNrOi8vbmJvZHkvLi9zcmMvVW5pdmVyc2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwidGhyZWVcIiksIHJlcXVpcmUoXCJwbG90bHkuanMtZGlzdFwiKSwgcmVxdWlyZShcInRocmVlL2V4YW1wbGVzL2pzbS9BZGRvbnNcIiksIHJlcXVpcmUoXCJ0aHJlZS9leGFtcGxlcy9qc20vbGlicy9zdGF0cy5tb2R1bGVcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW1widGhyZWVcIiwgXCJwbG90bHkuanMtZGlzdFwiLCBcInRocmVlL2V4YW1wbGVzL2pzbS9BZGRvbnNcIiwgXCJ0aHJlZS9leGFtcGxlcy9qc20vbGlicy9zdGF0cy5tb2R1bGVcIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wibmJvZHlcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJ0aHJlZVwiKSwgcmVxdWlyZShcInBsb3RseS5qcy1kaXN0XCIpLCByZXF1aXJlKFwidGhyZWUvZXhhbXBsZXMvanNtL0FkZG9uc1wiKSwgcmVxdWlyZShcInRocmVlL2V4YW1wbGVzL2pzbS9saWJzL3N0YXRzLm1vZHVsZVwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wibmJvZHlcIl0gPSBmYWN0b3J5KHJvb3RbXCJ0aHJlZVwiXSwgcm9vdFtcInBsb3RseS5qcy1kaXN0XCJdLCByb290W1widGhyZWUvZXhhbXBsZXMvanNtL0FkZG9uc1wiXSwgcm9vdFtcInRocmVlL2V4YW1wbGVzL2pzbS9saWJzL3N0YXRzLm1vZHVsZVwiXSk7XG59KSh0aGlzLCAoX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNjA0X18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzkyNF9fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX185ODdfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNjg2X18pID0+IHtcbnJldHVybiAiLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzkyNF9fOyIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNjA0X187IiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX185ODdfXzsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzY4Nl9fOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgeyB0eXBlIFZlY3RvcjMgfSBmcm9tICd0aHJlZSc7XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIGNlbGVzdGlhbCBib2R5IHdpdGggYWxsIG9mIGl0cyBraW5lbWF0aWMgcHJvcGVydGllcy5cclxuICogQGNhdGVnb3J5IEJ1aWxkaW5nIGJsb2Nrc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENlbGVzdGlhbEJvZHkge1xyXG4gIC8qKlxyXG4gICAqIExhYmVsIG9mIHRoZSBib2R5LlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGxhYmVsOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogTWVhbiBtYXNzIG9mIHRoZSBib2R5LlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IG1hc3M6IG51bWJlcjsgLy8gbWVhbiBtYXNzXHJcbiAgLyoqXHJcbiAgICogUG9zaXRpb24gdmVjdG9yIG9mIHRoZSBib2R5LlxyXG4gICAqL1xyXG4gIHBvc2l0aW9uOiBWZWN0b3IzO1xyXG4gIC8qKlxyXG4gICAqIFZlbG9jaXR5IHZlY3RvciBvZiB0aGUgYm9keS5cclxuICAgKi9cclxuICB2ZWxvY2l0eTogVmVjdG9yMztcclxuICAvKipcclxuICAgKiBBY2NlbGVyYXRpb24gdmVjdG9yIG9mIHRoZSBib2R5LlxyXG4gICAqL1xyXG4gIGFjY2VsZXJhdGlvbjogVmVjdG9yMztcclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgbmV3IENlbGVzdGlhbEJvZHkgd2l0aCB0aGUgcHJvdmlkZWQgaW5mb3JtYXRpb24uXHJcbiAgICogQHBhcmFtIGxhYmVsIGxhYmVsIG9mIHRoZSBib2R5LlxyXG4gICAqIEBwYXJhbSBtYXNzIG1hc3Mgb2YgdGhlIGJvZHkuXHJcbiAgICogQHBhcmFtIHBvc2l0aW9uIHBvc2l0aW9uIG9mIHRoZSBib2R5LlxyXG4gICAqIEBwYXJhbSB2ZWxvY2l0eSB2ZWxvY2l0eSBvZiB0aGUgYm9keS5cclxuICAgKiBAcGFyYW0gYWNjZWxlcmF0aW9uIGFjY2VsZXJhdGlvbiBvZiB0aGUgYm9keS5cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGxhYmVsOiBzdHJpbmcsXHJcbiAgICBtYXNzOiBudW1iZXIsXHJcbiAgICBwb3NpdGlvbjogVmVjdG9yMyxcclxuICAgIHZlbG9jaXR5OiBWZWN0b3IzLFxyXG4gICAgYWNjZWxlcmF0aW9uOiBWZWN0b3IzLFxyXG4gICkge1xyXG4gICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xyXG4gICAgdGhpcy5tYXNzID0gbWFzcztcclxuICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcclxuICAgIHRoaXMudmVsb2NpdHkgPSB2ZWxvY2l0eTtcclxuICAgIHRoaXMuYWNjZWxlcmF0aW9uID0gYWNjZWxlcmF0aW9uO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGVlcCBjb3B5IHRoZSBjdXJyZW50IENlbGVzdGlhbEJvZHkgd2l0aCB0aGUgdXBkYXRlZCBraW5lbWF0aWMgcHJvcGVydGllcy5cclxuICAgKiBAcGFyYW0gcG9zaXRpb24gbmV3IHBvc2l0aW9uLlxyXG4gICAqIEBwYXJhbSB2ZWxvY2l0eSBuZXcgdmVsb2NpdHkuXHJcbiAgICogQHBhcmFtIGFjY2VsZXJhdGlvbiBuZXcgYWNjZWxlcmF0aW9uLlxyXG4gICAqIEByZXR1cm5zIGEgbmV3IENlbGVzdGlhbEJvZHkgaW5zdGFuY2Ugd2l0aCB0aGUgdXBkYXRlZCBwcm9wZXJ0aWVzLlxyXG4gICAqL1xyXG4gIGNsb25lKHBvc2l0aW9uPzogVmVjdG9yMyxcclxuICAgIHZlbG9jaXR5PzogVmVjdG9yMyxcclxuICAgIGFjY2VsZXJhdGlvbj86IFZlY3RvcjMpOiBDZWxlc3RpYWxCb2R5IHtcclxuICAgIHJldHVybiBuZXcgQ2VsZXN0aWFsQm9keShcclxuICAgICAgdGhpcy5sYWJlbCxcclxuICAgICAgdGhpcy5tYXNzLFxyXG4gICAgICBwb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gdGhpcy5wb3NpdGlvbi5jbG9uZSgpIDogcG9zaXRpb24sXHJcbiAgICAgIHZlbG9jaXR5ID09PSB1bmRlZmluZWQgPyB0aGlzLnZlbG9jaXR5LmNsb25lKCkgOiB2ZWxvY2l0eSxcclxuICAgICAgYWNjZWxlcmF0aW9uID09PSB1bmRlZmluZWQgPyB0aGlzLmFjY2VsZXJhdGlvbi5jbG9uZSgpIDogYWNjZWxlcmF0aW9uLFxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJ3RocmVlJztcclxuaW1wb3J0IHsgdHlwZSBDZWxlc3RpYWxCb2R5IH0gZnJvbSAnLi4vQ2VsZXN0aWFsQm9keSc7XHJcbmltcG9ydCB7IHR5cGUgRm9yY2UgfSBmcm9tICcuLi9Gb3JjZSc7XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIFtOZXd0b25pYW4gR3Jhdml0YXRpb25hbCBmb3JjZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTmV3dG9uJTI3c19sYXdfb2ZfdW5pdmVyc2FsX2dyYXZpdGF0aW9uKSBvYmplY3QuXHJcbiAqIEBjYXRlZ29yeSBGb3JjZXNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBHcmF2aXR5IGltcGxlbWVudHMgRm9yY2Uge1xyXG4gIC8qKlxyXG4gICAqIEdyYXZpdGF0aW9uYWwgY29uc3RhbnQuXHJcbiAgICogQGRlZmF1bHRWYWx1ZSA2LjY3NGUtMTFcclxuICAgKi9cclxuICByZWFkb25seSBHOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIG5ldyBHcmF2aXR5IHdpdGggdGhlIHByb3ZpZGVkIGdyYXZpdGF0aW9uYWwgY29uc3RhbnQuXHJcbiAgICogQHBhcmFtIEcgZ3Jhdml0YXRpb25hbCBjb25zdGFudC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihHOiBudW1iZXIgPSA2LjY3NGUtMTEpIHtcclxuICAgIHRoaXMuRyA9IEc7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxjdWxhdGUgYW5kIHJldHVybiB0aGUgZm9yY2VzIGFjdGluZyBvbiB0aGUgYm9kaWVzLiBhcnJbaV0gcmVwcmVzZW50cyB0aGUgZm9yY2UgYWN0aW5nIG9uIHRoZSBpdGggYm9keSBhcyBhIHJlc3VsdCBvZiBhbGwgb3RoZXIgYm9kaWVzLlxyXG4gICAqIEBwYXJhbSBib2RpZXMgY2VsZXN0aWFsIGJvZGllc1xyXG4gICAqIEByZXR1cm5zIGZvcmNlc1xyXG4gICAqL1xyXG4gIGdldEZvcmNlcyhib2RpZXM6IENlbGVzdGlhbEJvZHlbXSk6IFZlY3RvcjNbXSB7XHJcbiAgICBsZXQgbiA9IGJvZGllcy5sZW5ndGg7XHJcbiAgICBsZXQgYW5zOiBWZWN0b3IzW10gPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgIGFucy5wdXNoKG5ldyBWZWN0b3IzKDAsIDAsIDApKTtcclxuICAgIH1cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IG47IGorKykge1xyXG4gICAgICAgIGxldCBjdXJyRm9yY2UgPSB0aGlzLmNhbGNOZXd0b25pYW4oYm9kaWVzW2ldLCBib2RpZXNbal0pO1xyXG4gICAgICAgIGFuc1tpXS5hZGQoY3VyckZvcmNlKTtcclxuICAgICAgICBhbnNbal0uc3ViKGN1cnJGb3JjZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBhbnM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxjdWxhdGUgdGhlIGdyYXZpdGF0aW9uYWwgZm9yY2UgYWN0aW5nIG9uIGJvZHkgYSBkdWUgdG8gYm9keSBiLlxyXG4gICAqIEBwYXJhbSBhIGJvZHkgYS5cclxuICAgKiBAcGFyYW0gYiBib2R5IGIuXHJcbiAgICogQHJldHVybnMgZ3Jhdml0YXRpb25hbCBmb3JjZSBvZiBhIG9uIGIuXHJcbiAgICogQGhpZGRlblxyXG4gICAqL1xyXG4gIHByaXZhdGUgY2FsY05ld3RvbmlhbihhOiBDZWxlc3RpYWxCb2R5LCBiOiBDZWxlc3RpYWxCb2R5KTogVmVjdG9yMyB7XHJcbiAgICBsZXQgZGlzdFNxID0gYS5wb3NpdGlvbi5kaXN0YW5jZVRvU3F1YXJlZChiLnBvc2l0aW9uKTtcclxuICAgIGxldCBmb3JjZVZhbCA9ICh0aGlzLkcgKiBhLm1hc3MgKiBiLm1hc3MpIC8gZGlzdFNxO1xyXG4gICAgcmV0dXJuIGIucG9zaXRpb25cclxuICAgICAgLmNsb25lKClcclxuICAgICAgLnN1YihhLnBvc2l0aW9uKVxyXG4gICAgICAubm9ybWFsaXplKClcclxuICAgICAgLm11bHRpcGx5U2NhbGFyKGZvcmNlVmFsKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGEgW0NlbnRyaXBldGFsIGZvcmNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DZW50cmlwZXRhbF9mb3JjZSkgb2JqZWN0LiBUbyBiZSB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgZm9yY2UgcmVxdWlyZWQgdG8ga2VlcCB0aGUgYm9kaWVzIGluIGNpcmN1bGFyIG1vdGlvbiBhcm91bmQgYSBnaXZlbiBjZW50ZXIuXHJcbiAqIEBjYXRlZ29yeSBGb3JjZXNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDZW50cmlwZXRhbEZvcmNlIGltcGxlbWVudHMgRm9yY2Uge1xyXG4gIC8qKlxyXG4gICAqIENlbnRlciBvZiBmb3JjZS5cclxuICAgKi9cclxuICByZWFkb25seSBjZW50ZXI6IFZlY3RvcjM7XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIG5ldyBDZW50cmlwZXRhbEZvcmNlIHdpdGggdGhlIHByb3ZpZGVkIGNlbnRlciBvZiBmb3JjZS5cclxuICAgKiBAcGFyYW0gY2VudGVyIGNlbnRlciBvZiBmb3JjZS5cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihjZW50ZXI6IFZlY3RvcjMgPSBuZXcgVmVjdG9yMygwLCAwLCAwKSkge1xyXG4gICAgdGhpcy5jZW50ZXIgPSBjZW50ZXI7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxjdWxhdGUgdGhlIGZvcmNlIHJlcXVpcmVkIHRvIGtlZXAgdGhlIGJvZGllcyBpbiBjaXJjdWxhciBtb3Rpb24gYXJvdW5kIHRoZSBjZW50ZXIuIGFycltpXSByZXByZXNlbnRzIHRoZSBjZW50cmlwZXRhbCBmb3JjZSByZXF1aXJlZCBmb3IgdGhlIGl0aCBib2R5LlxyXG4gICAqIEBwYXJhbSBib2RpZXMgY2VsZXN0aWFsIGJvZGllcy5cclxuICAgKiBAcmV0dXJucyBmb3JjZXMuXHJcbiAgICovXHJcbiAgZ2V0Rm9yY2VzKGJvZGllczogQ2VsZXN0aWFsQm9keVtdKTogVmVjdG9yM1tdIHtcclxuICAgIC8vIFRPRE86IG12XjIvciBzaW4gb3IgY29zIHRoZXRoYT9cclxuICAgIHJldHVybiBib2RpZXMubWFwKChib2R5KSA9PiB7XHJcbiAgICAgIGNvbnN0IGRpcmVjdGlvblZlY3RvciA9IHRoaXMuY2VudGVyLmNsb25lKClcclxuICAgICAgICAuc3ViKGJvZHkucG9zaXRpb24pO1xyXG4gICAgICByZXR1cm4gZGlyZWN0aW9uVmVjdG9yLnNldExlbmd0aChcclxuICAgICAgICAoYm9keS5tYXNzICogYm9keS52ZWxvY2l0eS5sZW5ndGhTcSgpKSAvIGRpcmVjdGlvblZlY3Rvci5sZW5ndGgoKSxcclxuICAgICAgKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBjb21iaW5lZCBmb3JjZSBvYmplY3QuIFRvIGJlIHVzZWQgdG8gYWRkaXRpdmVseSBjb21iaW5lIG11bHRpcGxlIGZvcmNlcyBhY3Rpbmcgb24gYSBzeXN0ZW0gb2YgYm9kaWVzLlxyXG4gKiBAY2F0ZWdvcnkgRm9yY2VzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ29tYmluZWRGb3JjZSBpbXBsZW1lbnRzIEZvcmNlIHtcclxuICBmb3JjZXM6IEZvcmNlW107XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIG5ldyBDb21iaW5lZEZvcmNlIHdpdGggdGhlIHByb3ZpZGVkIGZvcmNlcy5cclxuICAgKiBAcGFyYW0gZm9yY2VzIGFycmF5IG9mIGZvcmNlcy5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihmb3JjZXM6IEZvcmNlW10pIHtcclxuICAgIHRoaXMuZm9yY2VzID0gZm9yY2VzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBjb21iaW5lZCBmb3JjZXMgYWN0aW5nIG9uIHRoZSBib2RpZXMuIGFycltpXSByZXByZXNlbnRzIHRoZSBjb21iaW5lZCBmb3JjZSBhY3Rpbmcgb24gdGhlIGl0aCBib2R5IGFzIGEgcmVzdWx0IG9mIGFsbCBmb3JjZSBzeXN0ZW1zLlxyXG4gICAqIEBwYXJhbSBib2RpZXMgY2VsZXN0aWFsIGJvZGllcy5cclxuICAgKiBAcmV0dXJucyBlbGVtZW50LXdpc2UgY29tYmluZWQgZm9yY2VzLlxyXG4gICAqL1xyXG4gIGdldEZvcmNlcyhib2RpZXM6IENlbGVzdGlhbEJvZHlbXSk6IFZlY3RvcjNbXSB7XHJcbiAgICBjb25zdCBmb3JjZVZhbDogVmVjdG9yM1tdID0gYm9kaWVzLm1hcCgoKSA9PiBuZXcgVmVjdG9yMygwLCAwLCAwKSk7XHJcbiAgICB0aGlzLmZvcmNlcy5mb3JFYWNoKChmb3JjZSkgPT4ge1xyXG4gICAgICBmb3JjZS5nZXRGb3JjZXMoYm9kaWVzKVxyXG4gICAgICAgIC5mb3JFYWNoKCh2YWwsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICBmb3JjZVZhbFtpbmRleF0uYWRkKHZhbCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBmb3JjZVZhbDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHR5cGUgeyBDZWxlc3RpYWxCb2R5IH0gZnJvbSAnLi9DZWxlc3RpYWxCb2R5JztcclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGEgVW5pdmVyc2UncyBzdGF0ZSBzbmFwc2hvdC5cclxuICogQGNhdGVnb3J5IEJ1aWxkaW5nIGJsb2Nrc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFN0YXRlIHtcclxuICAvKipcclxuICAgKiBBcnJheSBvZiBjZWxlc3RpYWwgYm9kaWVzIHRoYXQgbWFrZSB1cCB0aGlzIHN0YXRlIG9mIHRoZSBVbml2ZXJzZS5cclxuICAgKi9cclxuICByZWFkb25seSBib2RpZXM6IENlbGVzdGlhbEJvZHlbXTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgbmV3IFN0YXRlIHdpdGggdGhlIGdpdmVuIGNlbGVzdGlhbCBib2RpZXMuXHJcbiAgICogQHBhcmFtIGJvZGllcyBhcnJheSBvZiBjZWxlc3RpYWwgYm9kaWVzLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKGJvZGllczogQ2VsZXN0aWFsQm9keVtdKSB7XHJcbiAgICB0aGlzLmJvZGllcyA9IGJvZGllcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlZXAgY29weSB0aGlzIHN0YXRlXHJcbiAgICogQHJldHVybnMgYSBuZXcgU3RhdGUgaW5zdGFuY2UuXHJcbiAgICovXHJcbiAgY2xvbmUoKTogU3RhdGUge1xyXG4gICAgcmV0dXJuIG5ldyBTdGF0ZSh0aGlzLmJvZGllcy5tYXAoKGJvZHkpID0+IGJvZHkuY2xvbmUoKSkpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAndGhyZWUnO1xyXG5pbXBvcnQgeyB0eXBlIENlbGVzdGlhbEJvZHkgfSBmcm9tICcuLi9DZWxlc3RpYWxCb2R5JztcclxuaW1wb3J0IHsgdHlwZSBGb3JjZSB9IGZyb20gJy4uL0ZvcmNlJztcclxuaW1wb3J0IHsgdHlwZSBTaW11bGF0ZUZ1bmN0aW9uIH0gZnJvbSAnLi4vU2ltdWxhdGVGdW5jdGlvbic7XHJcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi4vU3RhdGUnO1xyXG5cclxuLy8gZXhwb3J0IGNsYXNzIFZlcmxldFNpbSBpbXBsZW1lbnRzIFNpbXVsYXRlRnVuY3Rpb24ge1xyXG4vLyAgIGZvcmNlQ2FsY3VsYXRvcjogRm9yY2U7XHJcbi8vICAgcHJldkRlbHRhVDogbnVtYmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG5cclxuLy8gICBjb25zdHJ1Y3Rvcihmb3JjZUNhbGN1bGF0b3I6IEZvcmNlKSB7XHJcbi8vICAgICB0aGlzLmZvcmNlQ2FsY3VsYXRvciA9IGZvcmNlQ2FsY3VsYXRvcjtcclxuLy8gICB9XHJcblxyXG4vLyAgIHByaXZhdGUgZnJvbU9uZVN0YXRlKFxyXG4vLyAgICAgY3VyclN0YXRlOiBTdGF0ZSxcclxuLy8gICAgIGRlbHRhVDogbnVtYmVyLFxyXG4vLyAgICAgZm9yY2VzOiBWZWN0b3IzW11cclxuLy8gICApOiBTdGF0ZSB7XHJcbi8vICAgICBsZXQgdXBkYXRlZEJvZGllczogQ2VsZXN0aWFsQm9keVtdID0gY3VyclN0YXRlLmJvZGllcy5tYXAoKGJvZHksIGluZGV4KSA9PiB7XHJcbi8vICAgICAgIGNvbnN0IGN1cnJBY2NlbCA9IGZvcmNlc1tpbmRleF0uZGl2aWRlU2NhbGFyKGJvZHkubWFzcyk7XHJcbi8vICAgICAgIGNvbnN0IG5ld1BvcyA9IGN1cnJBY2NlbFxyXG4vLyAgICAgICAgIC5jbG9uZSgpXHJcbi8vICAgICAgICAgLm11bHRpcGx5U2NhbGFyKGRlbHRhVCAvIDIpXHJcbi8vICAgICAgICAgLmFkZChib2R5LnZlbG9jaXR5KVxyXG4vLyAgICAgICAgIC5tdWx0aXBseVNjYWxhcihkZWx0YVQpXHJcbi8vICAgICAgICAgLmFkZChib2R5LnBvc2l0aW9uKTtcclxuLy8gICAgICAgcmV0dXJuIGJvZHkuY2xvbmUoXHJcbi8vICAgICAgICAgbmV3UG9zLFxyXG4vLyAgICAgICAgIHRoaXMudmVybGV0VmVsKGJvZHkucG9zaXRpb24sIG5ld1BvcywgZGVsdGFUKSxcclxuLy8gICAgICAgICBjdXJyQWNjZWxcclxuLy8gICAgICAgKTtcclxuLy8gICAgIH0pO1xyXG5cclxuLy8gICAgIHRoaXMucHJldkRlbHRhVCA9IGRlbHRhVDtcclxuLy8gICAgIHJldHVybiBuZXcgU3RhdGUodXBkYXRlZEJvZGllcyk7XHJcbi8vICAgfVxyXG5cclxuLy8gICBzaW11bGF0ZShkZWx0YVQ6IG51bWJlciwgY3VyclN0YXRlOiBTdGF0ZSwgcHJldlN0YXRlPzogU3RhdGUpOiBTdGF0ZSB7XHJcbi8vICAgICBpZiAoZGVsdGFUIDw9IDApIHtcclxuLy8gICAgICAgcmV0dXJuIGN1cnJTdGF0ZS5jbG9uZSgpO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIGxldCBmb3JjZXMgPSB0aGlzLmZvcmNlQ2FsY3VsYXRvci5nZXRGb3JjZXMoY3VyclN0YXRlLmJvZGllcyk7XHJcbi8vICAgICBpZiAoZm9yY2VzLmxlbmd0aCAhPT0gY3VyclN0YXRlLmJvZGllcy5sZW5ndGgpIHtcclxuLy8gICAgICAgY29uc29sZS5lcnJvcihgZm9yY2VzIGxlbmd0aCAhPT0gbnVtYmVyIG9mIGJvZGllc2ApO1xyXG4vLyAgICAgICByZXR1cm4gY3VyclN0YXRlLmNsb25lKCk7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgaWYgKHByZXZTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbi8vICAgICAgIHJldHVybiB0aGlzLmZyb21PbmVTdGF0ZShjdXJyU3RhdGUsIGRlbHRhVCwgZm9yY2VzKTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBsZXQgdXBkYXRlZEJvZGllczogQ2VsZXN0aWFsQm9keVtdID0gY3VyclN0YXRlLmJvZGllcy5tYXAoKGJvZHksIGluZGV4KSA9PiB7XHJcbi8vICAgICAgIGNvbnN0IGN1cnJBY2NlbCA9IGZvcmNlc1tpbmRleF0uZGl2aWRlU2NhbGFyKGJvZHkubWFzcyk7XHJcbi8vICAgICAgIGNvbnN0IG5ld1BvcyA9IHRoaXMudmVybGV0UG9zKFxyXG4vLyAgICAgICAgIHByZXZTdGF0ZS5ib2RpZXNbaW5kZXhdLnBvc2l0aW9uLFxyXG4vLyAgICAgICAgIGJvZHkucG9zaXRpb24sXHJcbi8vICAgICAgICAgY3VyckFjY2VsLFxyXG4vLyAgICAgICAgIGRlbHRhVFxyXG4vLyAgICAgICApO1xyXG4vLyAgICAgICByZXR1cm4gYm9keS5jbG9uZShcclxuLy8gICAgICAgICBuZXdQb3MsXHJcbi8vICAgICAgICAgdGhpcy52ZXJsZXRWZWwoYm9keS5wb3NpdGlvbiwgbmV3UG9zLCBkZWx0YVQpLFxyXG4vLyAgICAgICAgIGN1cnJBY2NlbFxyXG4vLyAgICAgICApO1xyXG4vLyAgICAgfSk7XHJcblxyXG4vLyAgICAgdGhpcy5wcmV2RGVsdGFUID0gZGVsdGFUO1xyXG4vLyAgICAgcmV0dXJuIG5ldyBTdGF0ZSh1cGRhdGVkQm9kaWVzKTtcclxuLy8gICB9XHJcblxyXG4vLyAgIHZlcmxldFBvcyhcclxuLy8gICAgIG9sZFBvczogVmVjdG9yMyxcclxuLy8gICAgIGN1cnJQb3M6IFZlY3RvcjMsXHJcbi8vICAgICBjdXJyQWNjZWw6IFZlY3RvcjMsXHJcbi8vICAgICBkZWx0YVQ6IG51bWJlclxyXG4vLyAgICk6IFZlY3RvcjMge1xyXG4vLyAgICAgY29uc3QgcHJldkRUID0gdGhpcy5wcmV2RGVsdGFUID09PSB1bmRlZmluZWQgPyBkZWx0YVQgOiB0aGlzLnByZXZEZWx0YVQ7XHJcblxyXG4vLyAgICAgcmV0dXJuIGN1cnJBY2NlbFxyXG4vLyAgICAgICAuY2xvbmUoKVxyXG4vLyAgICAgICAubXVsdGlwbHlTY2FsYXIoKHByZXZEVCArIGRlbHRhVCkgLyAyKVxyXG4vLyAgICAgICAuYWRkKGN1cnJQb3MuY2xvbmUoKS5zdWIob2xkUG9zKS5kaXZpZGVTY2FsYXIocHJldkRUKSlcclxuLy8gICAgICAgLm11bHRpcGx5U2NhbGFyKGRlbHRhVClcclxuLy8gICAgICAgLmFkZChjdXJyUG9zKTtcclxuLy8gICB9XHJcblxyXG4vLyAgIHZlcmxldFZlbChjdXJyUG9zOiBWZWN0b3IzLCBuZXdQb3M6IFZlY3RvcjMsIGRlbHRhVDogbnVtYmVyKTogVmVjdG9yMyB7XHJcbi8vICAgICByZXR1cm4gbmV3UG9zLmNsb25lKCkuc3ViKGN1cnJQb3MpLmRpdmlkZVNjYWxhcihkZWx0YVQpO1xyXG4vLyAgIH1cclxuLy8gfVxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBzaW11bGF0aW9uIGZ1bmN0aW9uIG9iamVjdCB0aGF0IHVzZXMgdGhlIFtWZWxvY2l0eSBWZXJsZXQgaW50ZWdyYXRpb24gbWV0aG9kXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9WZXJsZXRfaW50ZWdyYXRpb24jVmVsb2NpdHlfVmVybGV0KSB0byBzaW11bGF0ZSB0aGUgbW90aW9uIG9mIGJvZGllcy5cclxuICogQGNhdGVnb3J5IFNpbXVsYXRlRnVuY3Rpb25zXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVmVsb2NpdHlWZXJsZXRTaW0gaW1wbGVtZW50cyBTaW11bGF0ZUZ1bmN0aW9uIHtcclxuICAvKipcclxuICAgKiBGb3JjZSBvYmplY3QgdG8gY2FsY3VsYXRlIGZvcmNlcyBvbiBib2RpZXMgaW4gdGhlIFVuaXZlcnNlLlxyXG4gICAqL1xyXG4gIGZvcmNlQ2FsY3VsYXRvcjogRm9yY2U7XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIG5ldyBWZWxvY2l0eVZlcmxldFNpbSB3aXRoIHRoZSBwcm92aWRlZCBmb3JjZSBjYWxjdWxhdG9yLCB3aGljaCBpcyBpbnZva2VkIG9uIGV2ZXJ5IHNpbXVsYXRpb24gc3RlcC5cclxuICAgKiBAcGFyYW0gZm9yY2VDYWxjdWxhdG9yIGZvcmNlIGNhbGN1bGF0b3IuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoZm9yY2VDYWxjdWxhdG9yOiBGb3JjZSkge1xyXG4gICAgdGhpcy5mb3JjZUNhbGN1bGF0b3IgPSBmb3JjZUNhbGN1bGF0b3I7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTaW11bGF0ZSBhIHN0ZXAgaW4gdGhlIFVuaXZlcnNlIGJ5IHVzaW5nIHRoZSBwcmV2aW91cyBhbmQvb3IgY3VycmVudCBzdGF0ZSBhbmQgYSB0aW1lIHN0ZXAsIHVzaW5nIHRoZSBWZWxvY2l0eSBWZXJsZXQgaW50ZWdyYXRpb24gbWV0aG9kLlxyXG4gICAqIEBwYXJhbSBkZWx0YVQgdGltZSBzdGVwLlxyXG4gICAqIEBwYXJhbSBjdXJyU3RhdGUgY3VycmVudCBzdGF0ZS5cclxuICAgKiBAcmV0dXJucyBuZXcgc3RhdGUgYWZ0ZXIgdGhlIHNpbXVsYXRpb24gc3RlcC5cclxuICAgKi9cclxuICBzaW11bGF0ZShkZWx0YVQ6IG51bWJlciwgY3VyclN0YXRlOiBTdGF0ZSk6IFN0YXRlIHtcclxuICAgIGlmIChkZWx0YVQgPD0gMCkge1xyXG4gICAgICByZXR1cm4gY3VyclN0YXRlLmNsb25lKCk7XHJcbiAgICB9XHJcbiAgICAvLyB4KHQgKyBkdCkgPSB4KHQpICsgKHYodCkgKiBkdCkgKyAoMC41ICogYSh0KSAqIGR0ICogZHQpXHJcbiAgICBsZXQgdXBkYXRlZEJvZGllcyA9IGN1cnJTdGF0ZS5ib2RpZXMubWFwKCh2KSA9PiB7XHJcbiAgICAgIGxldCB1cGRhdGVkQm9keSA9IHYuY2xvbmUoKTtcclxuICAgICAgdXBkYXRlZEJvZHkucG9zaXRpb24gPSB0aGlzLmNhbGNOZXdQb3MoXHJcbiAgICAgICAgdXBkYXRlZEJvZHkucG9zaXRpb24sXHJcbiAgICAgICAgdXBkYXRlZEJvZHkudmVsb2NpdHksXHJcbiAgICAgICAgdXBkYXRlZEJvZHkuYWNjZWxlcmF0aW9uLFxyXG4gICAgICAgIGRlbHRhVCxcclxuICAgICAgKTtcclxuICAgICAgcmV0dXJuIHVwZGF0ZWRCb2R5O1xyXG4gICAgfSk7XHJcbiAgICAvLyBhKHQgKyBkdCkgPSBhY2NlbCBhdCB4KHQgKyBkdClcclxuICAgIGxldCBuZXdGb3JjZXMgPSB0aGlzLmZvcmNlQ2FsY3VsYXRvci5nZXRGb3JjZXModXBkYXRlZEJvZGllcyk7XHJcbiAgICByZXR1cm4gbmV3IFN0YXRlKFxyXG4gICAgICB1cGRhdGVkQm9kaWVzLm1hcCgoYjogQ2VsZXN0aWFsQm9keSwgaTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgbGV0IG5ld0FjY2VsID0gbmV3Rm9yY2VzW2ldLmRpdmlkZVNjYWxhcihiLm1hc3MpO1xyXG4gICAgICAgIC8vIHYodCArIGR0KSA9IHYodCkgKyAwLjUgKiAoYSh0KSArIGEodCArIGR0KSkgKiBkdFxyXG4gICAgICAgIGIudmVsb2NpdHkuYWRkKGIuYWNjZWxlcmF0aW9uLmFkZChuZXdBY2NlbClcclxuICAgICAgICAgIC5tdWx0aXBseVNjYWxhcihkZWx0YVQgLyAyKSk7XHJcbiAgICAgICAgYi5hY2NlbGVyYXRpb24gPSBuZXdBY2NlbDtcclxuICAgICAgICByZXR1cm4gYjtcclxuICAgICAgfSksXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsY3VsYXRlIHRoZSBuZXcgcG9zaXRpb24gb2YgYSBib2R5IGluIHRoZSBmb2xsb3dpbmcgd2F5OlxyXG4gICAqXHJcbiAgICogbmV3UG9zID0gY3VyclBvcyArIGN1cnJWZWwgKiBkZWx0YVQgKyAwLjUgKiBjdXJyQWNjZWwgKiBkZWx0YVReMi5cclxuICAgKiBAcGFyYW0gY3VyclBvcyBjdXJyZW50IHBvc2l0aW9uLlxyXG4gICAqIEBwYXJhbSBjdXJyVmVsIGN1cnJlbnQgdmVsb2NpdHkuXHJcbiAgICogQHBhcmFtIGN1cnJBY2NlbCBjdXJyZW50IGFjY2VsZXJhdGlvbi5cclxuICAgKiBAcGFyYW0gZGVsdGFUIHRpbWUgc3RlcC5cclxuICAgKiBAcmV0dXJucyBuZXcgcG9zaXRpb24uXHJcbiAgICogQGhpZGRlblxyXG4gICAqL1xyXG4gIHByaXZhdGUgY2FsY05ld1BvcyhcclxuICAgIGN1cnJQb3M6IFZlY3RvcjMsXHJcbiAgICBjdXJyVmVsOiBWZWN0b3IzLFxyXG4gICAgY3VyckFjY2VsOiBWZWN0b3IzLFxyXG4gICAgZGVsdGFUOiBudW1iZXIsXHJcbiAgKTogVmVjdG9yMyB7XHJcbiAgICByZXR1cm4gY3VyclBvc1xyXG4gICAgICAuY2xvbmUoKVxyXG4gICAgICAuYWRkKGN1cnJWZWwuY2xvbmUoKVxyXG4gICAgICAgIC5tdWx0aXBseVNjYWxhcihkZWx0YVQpKVxyXG4gICAgICAuYWRkKGN1cnJBY2NlbC5jbG9uZSgpXHJcbiAgICAgICAgLm11bHRpcGx5U2NhbGFyKGRlbHRhVCAqIGRlbHRhVCAqIDAuNSkpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBzaW11bGF0aW9uIGZ1bmN0aW9uIG9iamVjdCB0aGF0IHVzZXMgdGhlIFtFdWxlciBpbnRlZ3JhdGlvbiBtZXRob2RdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0V1bGVyX21ldGhvZCkgdG8gc2ltdWxhdGUgbW90aW9ucyBvZiBib2RpZXMuXHJcbiAqIEBjYXRlZ29yeSBTaW11bGF0ZUZ1bmN0aW9uc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEV4cGxpY2l0RXVsZXJTaW0gaW1wbGVtZW50cyBTaW11bGF0ZUZ1bmN0aW9uIHtcclxuICAvKipcclxuICAgKiBGb3JjZSBvYmplY3QgdG8gY2FsY3VsYXRlIGZvcmNlcyBvbiBib2RpZXMgaW4gdGhlIFVuaXZlcnNlLlxyXG4gICAqL1xyXG4gIGZvcmNlOiBGb3JjZTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgbmV3IEV4cGxpY2l0RXVsZXJTaW0gd2l0aCB0aGUgcHJvdmlkZWQgZm9yY2UgY2FsY3VsYXRvciwgd2hpY2ggaXMgaW52b2tlZCBvbiBldmVyeSBzaW11bGF0aW9uIHN0ZXAuXHJcbiAgICogQHBhcmFtIGZvcmNlIGZvcmNlIGNhbGN1bGF0b3IuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoZm9yY2U6IEZvcmNlKSB7XHJcbiAgICB0aGlzLmZvcmNlID0gZm9yY2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTaW11bGF0ZSBhIHN0ZXAgaW4gdGhlIFVuaXZlcnNlIGJ5IHVzaW5nIHRoZSBjdXJyZW50IHN0YXRlIGFuZCBhIHRpbWUgc3RlcCwgdXNpbmcgdGhlIEV1bGVyIGludGVncmF0aW9uIG1ldGhvZC5cclxuICAgKiBAcGFyYW0gZGVsdGFUIHRpbWUgc3RlcC5cclxuICAgKiBAcGFyYW0gY3VyclN0YXRlIGN1cnJlbnQgc3RhdGUuXHJcbiAgICogQHJldHVybnMgbmV3IHN0YXRlIGFmdGVyIHRoZSBzaW11bGF0aW9uIHN0ZXAuXHJcbiAgICovXHJcbiAgc2ltdWxhdGUoXHJcbiAgICBkZWx0YVQ6IG51bWJlcixcclxuICAgIGN1cnJTdGF0ZTogU3RhdGUsXHJcbiAgKTogU3RhdGUge1xyXG4gICAgY29uc3QgdXBkYXRlZEJvZGllcyA9IGN1cnJTdGF0ZS5ib2RpZXMubWFwKChiKSA9PiBiLmNsb25lKFxyXG4gICAgICAvLyB4KHQgKyBkdCkgPSB4KHQpICsgdih0KSAqIGR0XHJcbiAgICAgIHRoaXMucmF0ZVVwZGF0ZShiLnBvc2l0aW9uLCBiLnZlbG9jaXR5LCBkZWx0YVQpLFxyXG4gICAgICAvLyB2KHQgKyBkdCkgPSB2KHQpICsgYSh0KSAqIGR0XHJcbiAgICAgIHRoaXMucmF0ZVVwZGF0ZShiLnZlbG9jaXR5LCBiLmFjY2VsZXJhdGlvbiwgZGVsdGFUKSxcclxuICAgICkpO1xyXG4gICAgY29uc3QgdXBkYXRlZEZvcmNlcyA9IHRoaXMuZm9yY2UuZ2V0Rm9yY2VzKHVwZGF0ZWRCb2RpZXMpO1xyXG4gICAgdXBkYXRlZEJvZGllcy5mb3JFYWNoKChiLCBpKSA9PiB7XHJcbiAgICAgIC8vIGEodCArIGR0KSA9IGFjY2VsIGF0IHgodCArIGR0KVxyXG4gICAgICBiLmFjY2VsZXJhdGlvbiA9IHVwZGF0ZWRGb3JjZXNbaV0uZGl2aWRlU2NhbGFyKGIubWFzcyk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBuZXcgU3RhdGUodXBkYXRlZEJvZGllcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGUgYSB2ZWN0b3IgcXVhbnRpdHkgdXNpbmcgdGhlIHJhdGUgb2YgY2hhbmdlIGFuZCBhIHRpbWUgc3RlcC5cclxuICAgKiBAcGFyYW0gcHJldiBwcmV2aW91cyB2YWx1ZS5cclxuICAgKiBAcGFyYW0gcmF0ZSByYXRlIG9mIGNoYW5nZS5cclxuICAgKiBAcGFyYW0gZGVsdGFUIHRpbWUgc3RlcC5cclxuICAgKiBAcmV0dXJucyB1cGRhdGVkIHZhbHVlLlxyXG4gICAqIEBoaWRkZW5cclxuICAgKi9cclxuICBwcml2YXRlIHJhdGVVcGRhdGUocHJldjogVmVjdG9yMywgcmF0ZTogVmVjdG9yMywgZGVsdGFUOiBudW1iZXIpIHtcclxuICAgIHJldHVybiByYXRlLmNsb25lKClcclxuICAgICAgLm11bHRpcGx5U2NhbGFyKGRlbHRhVClcclxuICAgICAgLmFkZChwcmV2KTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGEgc2ltdWxhdGlvbiBmdW5jdGlvbiBvYmplY3QgdGhhdCB1c2VzIHRoZSBbU2VtaS1JbXBsaWNpdCBFdWxlciBpbnRlZ3JhdGlvbiBtZXRob2RdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NlbWktaW1wbGljaXRfRXVsZXJfbWV0aG9kKSB0byBzaW11bGF0ZSB0aGUgbW90aW9uIG9mIGJvZGllcy5cclxuICogQGNhdGVnb3J5IFNpbXVsYXRlRnVuY3Rpb25zXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2VtaUltcGxpY2l0RXVsZXJTaW0gaW1wbGVtZW50cyBTaW11bGF0ZUZ1bmN0aW9uIHtcclxuICAvKipcclxuICAgKiBGb3JjZSBvYmplY3QgdG8gY2FsY3VsYXRlIGZvcmNlcyBvbiBib2RpZXMgaW4gdGhlIFVuaXZlcnNlLlxyXG4gICAqL1xyXG4gIGZvcmNlOiBGb3JjZTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgbmV3IFNlbWlJbXBsaWNpdEV1bGVyU2ltIHdpdGggdGhlIHByb3ZpZGVkIGZvcmNlIGNhbGN1bGF0b3IsIHdoaWNoIGlzIGludm9rZWQgb24gZXZlcnkgc2ltdWxhdGlvbiBzdGVwLlxyXG4gICAqIEBwYXJhbSBmb3JjZSBmb3JjZSBjYWxjdWxhdG9yLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKGZvcmNlOiBGb3JjZSkge1xyXG4gICAgdGhpcy5mb3JjZSA9IGZvcmNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2ltdWxhdGUgYSBzdGVwIGluIHRoZSBVbml2ZXJzZSBieSB1c2luZyB0aGUgY3VycmVudCBzdGF0ZSBhbmQgYSB0aW1lIHN0ZXAsIHVzaW5nIHRoZSBTZW1pLUltcGxpY2l0IEV1bGVyIGludGVncmF0aW9uIG1ldGhvZC5cclxuICAgKiBAcGFyYW0gZGVsdGFUIHRpbWUgc3RlcC5cclxuICAgKiBAcGFyYW0gY3VyclN0YXRlIGN1cnJlbnQgc3RhdGUuXHJcbiAgICogQHJldHVybnMgbmV3IHN0YXRlIGFmdGVyIHRoZSBzaW11bGF0aW9uIHN0ZXAuXHJcbiAgICovXHJcbiAgc2ltdWxhdGUoXHJcbiAgICBkZWx0YVQ6IG51bWJlcixcclxuICAgIGN1cnJTdGF0ZTogU3RhdGUsXHJcbiAgKTogU3RhdGUge1xyXG4gICAgY29uc3QgdXBkYXRlZEJvZGllcyA9IGN1cnJTdGF0ZS5ib2RpZXMubWFwKChiKSA9PiB7XHJcbiAgICAgIC8vIHYodCArIGR0KSA9IHYodCkgKyBhKHQpICogZHRcclxuICAgICAgY29uc3QgdXBkYXRlZFZlbCA9IHRoaXMucmF0ZVVwZGF0ZShiLnZlbG9jaXR5LCBiLmFjY2VsZXJhdGlvbiwgZGVsdGFUKTtcclxuICAgICAgcmV0dXJuIGIuY2xvbmUoXHJcbiAgICAgICAgLy8geCh0ICsgZHQpID0geCh0KSArIHYodCArIGR0KSAqIGR0XHJcbiAgICAgICAgdGhpcy5yYXRlVXBkYXRlKGIucG9zaXRpb24sIHVwZGF0ZWRWZWwsIGRlbHRhVCksXHJcbiAgICAgICAgdXBkYXRlZFZlbCxcclxuICAgICAgKTtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgdXBkYXRlZEZvcmNlcyA9IHRoaXMuZm9yY2UuZ2V0Rm9yY2VzKHVwZGF0ZWRCb2RpZXMpO1xyXG4gICAgdXBkYXRlZEJvZGllcy5mb3JFYWNoKChiLCBpKSA9PiB7XHJcbiAgICAgIC8vIGEodCArIGR0KSA9IGFjY2VsIGF0IHgodCArIGR0KVxyXG4gICAgICBiLmFjY2VsZXJhdGlvbiA9IHVwZGF0ZWRGb3JjZXNbaV0uZGl2aWRlU2NhbGFyKGIubWFzcyk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBuZXcgU3RhdGUodXBkYXRlZEJvZGllcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGUgYSB2ZWN0b3IgcXVhbnRpdHkgdXNpbmcgdGhlIHJhdGUgb2YgY2hhbmdlIGFuZCBhIHRpbWUgc3RlcC5cclxuICAgKiBAcGFyYW0gcHJldiBwcmV2aW91cyB2YWx1ZS5cclxuICAgKiBAcGFyYW0gcmF0ZSByYXRlIG9mIGNoYW5nZS5cclxuICAgKiBAcGFyYW0gZGVsdGFUIHRpbWUgc3RlcC5cclxuICAgKiBAcmV0dXJucyB1cGRhdGVkIHZhbHVlLlxyXG4gICAqIEBoaWRkZW5cclxuICAgKi9cclxuICBwcml2YXRlIHJhdGVVcGRhdGUocHJldjogVmVjdG9yMywgcmF0ZTogVmVjdG9yMywgZGVsdGFUOiBudW1iZXIpIHtcclxuICAgIHJldHVybiByYXRlLmNsb25lKClcclxuICAgICAgLm11bHRpcGx5U2NhbGFyKGRlbHRhVClcclxuICAgICAgLmFkZChwcmV2KTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb250YWluZXIgZm9yIGludGVybWVkaWF0ZSBraW5lbWF0aWMgcmF0ZSB2YWx1ZXMgaW4gdGhlIFJ1bmdlLUt1dHRhIDQgaW50ZWdyYXRpb24gbWV0aG9kLlxyXG4gKi9cclxudHlwZSBSdW5nZUt1dHRhU3RlcHMgPSB7XHJcbiAgLyoqXHJcbiAgICogSW50ZXJtZWRpYXRlIHZlbG9jaXR5IHJhdGUgdmFsdWVzLlxyXG4gICAqL1xyXG4gIGt2OiBWZWN0b3IzW107XHJcbiAgLyoqXHJcbiAgICogSW50ZXJtZWRpYXRlIHBvc2l0aW9uIHJhdGUgdmFsdWVzLlxyXG4gICAqL1xyXG4gIGt4OiBWZWN0b3IzW107XHJcbn07XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIHNpbXVsYXRpb24gZnVuY3Rpb24gb2JqZWN0IHRoYXQgdXNlcyB0aGUgW1J1bmdlLUt1dHRhIDQgaW50ZWdyYXRpb24gbWV0aG9kXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9SdW5nZSVFMiU4MCU5M0t1dHRhX21ldGhvZHMpIHRvIHNpbXVsYXRlIHRoZSBtb3Rpb24gb2YgYm9kaWVzLlxyXG4gKiBAY2F0ZWdvcnkgU2ltdWxhdGVGdW5jdGlvbnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBSdW5nZUt1dHRhNFNpbSBpbXBsZW1lbnRzIFNpbXVsYXRlRnVuY3Rpb24ge1xyXG4gIC8qKlxyXG4gICAqIEZvcmNlIG9iamVjdCB0byBjYWxjdWxhdGUgZm9yY2VzIG9uIGJvZGllcyBpbiB0aGUgVW5pdmVyc2UuXHJcbiAgICovXHJcbiAgZm9yY2U6IEZvcmNlO1xyXG4gIC8qKlxyXG4gICAqIFdlaWdodHMgZm9yIHdlaWdodGVkIGF2ZXJhZ2UuXHJcbiAgICovXHJcbiAgd2VpZ2h0czogbnVtYmVyW107XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIG5ldyBSdW5nZUt1dHRhNFNpbSB3aXRoIHRoZSBwcm92aWRlZCB3ZWlnaHRzIGZvciBhdmVyYWdlIGZvcmNlIGNhbGN1bGF0b3IsIHdoaWNoIGlzIGludm9rZWQgb24gZXZlcnkgc2ltdWxhdGlvbiBzdGVwLlxyXG4gICAqIEBwYXJhbSBmb3JjZSBmb3JjZSBjYWxjdWxhdG9yLlxyXG4gICAqIEBwYXJhbSB3ZWlnaHRzIHdlaWdodHMgZm9yIHdlaWdodGVkIGF2ZXJhZ2UuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoZm9yY2U6IEZvcmNlLCB3ZWlnaHRzOiBudW1iZXJbXSkge1xyXG4gICAgdGhpcy5mb3JjZSA9IGZvcmNlO1xyXG4gICAgaWYgKHdlaWdodHMubGVuZ3RoICE9PSA0KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignV2VpZ2h0cyBmb3IgUks0IG11c3QgYmUgb2YgbGVuZ3RoIDQnKTtcclxuICAgIH1cclxuICAgIHRoaXMud2VpZ2h0cyA9IHdlaWdodHM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTaW11bGF0ZSBhIHN0ZXAgaW4gdGhlIFVuaXZlcnNlIGJ5IHVzaW5nIHRoZSBjdXJyZW50IHN0YXRlIGFuZCBhIHRpbWUgc3RlcCwgdXNpbmcgdGhlIFJ1bmdlLUt1dHRhIDQgaW50ZWdyYXRpb24gbWV0aG9kLlxyXG4gICAqIEBwYXJhbSBkZWx0YVQgdGltZSBzdGVwLlxyXG4gICAqIEBwYXJhbSBjdXJyU3RhdGUgY3VycmVudCBzdGF0ZS5cclxuICAgKiBAcmV0dXJucyBuZXcgc3RhdGUgYWZ0ZXIgdGhlIHNpbXVsYXRpb24gc3RlcC5cclxuICAgKi9cclxuICBzaW11bGF0ZShcclxuICAgIGRlbHRhVDogbnVtYmVyLFxyXG4gICAgY3VyclN0YXRlOiBTdGF0ZSxcclxuICApOiBTdGF0ZSB7XHJcbiAgICBsZXQgYm9kaWVzSzogUnVuZ2VLdXR0YVN0ZXBzW10gPSBjdXJyU3RhdGUuYm9kaWVzLm1hcCgodikgPT4gKHtcclxuICAgICAgLy8gazF2ID0gYSh4KHQpKVxyXG4gICAgICBrdjogW3YuYWNjZWxlcmF0aW9uLmNsb25lKCldLFxyXG4gICAgICAvLyBrMXIgPSB2KHQpXHJcbiAgICAgIGt4OiBbdi52ZWxvY2l0eS5jbG9uZSgpXSxcclxuICAgIH0pKTtcclxuICAgIC8vIGsydiA9IGEoeCh0KSArIGsxeCAqIGR0IC8gMilcclxuICAgIGNvbnN0IGsydiA9IHRoaXMuZ2V0SW50ZXJLVihjdXJyU3RhdGUuYm9kaWVzLCBib2RpZXNLLCAwLCBkZWx0YVQgLyAyKTtcclxuICAgIC8vIGsyeCA9IHYodCkgKyBrMXYgKiBkdCAvIDJcclxuICAgIGNvbnN0IGsyeCA9IHRoaXMuZ2V0SW50ZXJLWChjdXJyU3RhdGUuYm9kaWVzLCBib2RpZXNLLCAwLCBkZWx0YVQgLyAyKTtcclxuICAgIGJvZGllc0suZm9yRWFjaCgodiwgaSkgPT4ge1xyXG4gICAgICB2Lmt2LnB1c2goazJ2W2ldKTtcclxuICAgICAgdi5reC5wdXNoKGsyeFtpXSk7XHJcbiAgICB9KTtcclxuICAgIC8vIGszdiA9IGEoeCh0KSArIGsyeCAqIGR0IC8gMilcclxuICAgIGNvbnN0IGszdiA9IHRoaXMuZ2V0SW50ZXJLVihjdXJyU3RhdGUuYm9kaWVzLCBib2RpZXNLLCAxLCBkZWx0YVQgLyAyKTtcclxuICAgIC8vIGszeCA9IHYodCkgKyBrMnYgKiBkdCAvIDJcclxuICAgIGNvbnN0IGszeCA9IHRoaXMuZ2V0SW50ZXJLWChjdXJyU3RhdGUuYm9kaWVzLCBib2RpZXNLLCAxLCBkZWx0YVQgLyAyKTtcclxuICAgIGJvZGllc0suZm9yRWFjaCgodiwgaSkgPT4ge1xyXG4gICAgICB2Lmt2LnB1c2goazN2W2ldKTtcclxuICAgICAgdi5reC5wdXNoKGszeFtpXSk7XHJcbiAgICB9KTtcclxuICAgIC8vIGszdiA9IGEoeCh0KSArIGszeCAqIGR0KVxyXG4gICAgY29uc3QgazR2ID0gdGhpcy5nZXRJbnRlcktWKGN1cnJTdGF0ZS5ib2RpZXMsIGJvZGllc0ssIDIsIGRlbHRhVCk7XHJcbiAgICAvLyBrNHggPSB2KHQpICsgazN2ICogZHRcclxuICAgIGNvbnN0IGs0eCA9IHRoaXMuZ2V0SW50ZXJLWChjdXJyU3RhdGUuYm9kaWVzLCBib2RpZXNLLCAyLCBkZWx0YVQpO1xyXG4gICAgYm9kaWVzSy5mb3JFYWNoKCh2LCBpKSA9PiB7XHJcbiAgICAgIHYua3YucHVzaChrNHZbaV0pO1xyXG4gICAgICB2Lmt4LnB1c2goazR4W2ldKTtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgdXBkYXRlZEJvZGllcyA9IGN1cnJTdGF0ZS5ib2RpZXMubWFwKChiLCBpKSA9PiB7XHJcbiAgICAgIGNvbnN0IHdlaWdodGVkWFJhdGUgPSBuZXcgVmVjdG9yMygpO1xyXG4gICAgICBjb25zdCB3ZWlnaHRlZFZSYXRlID0gbmV3IFZlY3RvcjMoKTtcclxuICAgICAgYm9kaWVzS1tpXS5reC5mb3JFYWNoKCh2LCBqKSA9PiB7XHJcbiAgICAgICAgd2VpZ2h0ZWRYUmF0ZS5hZGQodi5tdWx0aXBseVNjYWxhcih0aGlzLndlaWdodHNbal0pKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGJvZGllc0tbaV0ua3YuZm9yRWFjaCgodiwgaikgPT4ge1xyXG4gICAgICAgIHdlaWdodGVkVlJhdGUuYWRkKHYubXVsdGlwbHlTY2FsYXIodGhpcy53ZWlnaHRzW2pdKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gYi5jbG9uZShcclxuICAgICAgICB3ZWlnaHRlZFhSYXRlLm11bHRpcGx5U2NhbGFyKGRlbHRhVCAvIDYpXHJcbiAgICAgICAgICAuYWRkKGIucG9zaXRpb24pLFxyXG4gICAgICAgIHdlaWdodGVkVlJhdGUubXVsdGlwbHlTY2FsYXIoZGVsdGFUIC8gNilcclxuICAgICAgICAgIC5hZGQoYi52ZWxvY2l0eSksXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHVwZGF0ZWRGb3JjZXMgPSB0aGlzLmZvcmNlLmdldEZvcmNlcyh1cGRhdGVkQm9kaWVzKTtcclxuICAgIHVwZGF0ZWRCb2RpZXMuZm9yRWFjaCgodiwgaSkgPT4ge1xyXG4gICAgICB2LmFjY2VsZXJhdGlvbiA9IHVwZGF0ZWRGb3JjZXNbaV0uZGl2aWRlU2NhbGFyKHYubWFzcyk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBuZXcgU3RhdGUodXBkYXRlZEJvZGllcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgaW50ZXJtZWRpYXRlIHZlbG9jaXR5IHJhdGUgdmFsdWVzLlxyXG4gICAqIEBwYXJhbSBib2RpZXMgY3VycmVudCBib2RpZXMuXHJcbiAgICogQHBhcmFtIGJvZGllc0sgaW50ZXJtZWRpYXRlIGtpbmVtYXRpYyByYXRlIHZhbHVlcyBmb3IgYWxsIGJvZGllcy5cclxuICAgKiBAcGFyYW0ga3JJbmQgaW5kZXggb2YgaW50ZXJtZWRpYXRlIGtpbmVtYXRpYyByYXRlIHZhbHVlIHRvIGJhc2UgdGhlIG5ldyBpbnRlcm1lZGlhdGUgdmFsdWUgb24uXHJcbiAgICogQHBhcmFtIGRlbHRhVCB0aW1lIHN0ZXAuXHJcbiAgICogQHJldHVybnMgbmV4dCBpbnRlcm1lZGlhdGUgdmVsb2NpdHkgcmF0ZSB2YWx1ZXMgZm9yIGFsbCBib2RpZXMuXHJcbiAgICogQGhpZGRlblxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0SW50ZXJLVihcclxuICAgIGJvZGllczogQ2VsZXN0aWFsQm9keVtdLFxyXG4gICAgYm9kaWVzSzogUnVuZ2VLdXR0YVN0ZXBzW10sXHJcbiAgICBrckluZDogbnVtYmVyLFxyXG4gICAgZGVsdGFUOiBudW1iZXIsXHJcbiAgKTogVmVjdG9yM1tdIHtcclxuICAgIC8vIG5ld1ggPSB4KHQpICsgayhrSW5kKXggKiBkZWx0YVxyXG4gICAgbGV0IG5ld0JvZGllcyA9IGJvZGllcy5tYXAoKHYsIGkpID0+IHtcclxuICAgICAgbGV0IG5ld0JvZHkgPSB2LmNsb25lKCk7XHJcbiAgICAgIG5ld0JvZHkucG9zaXRpb24uYWRkKGJvZGllc0tbaV0ua3hba3JJbmRdLmNsb25lKClcclxuICAgICAgICAubXVsdGlwbHlTY2FsYXIoZGVsdGFUKSk7XHJcbiAgICAgIHJldHVybiBuZXdCb2R5O1xyXG4gICAgfSk7XHJcbiAgICAvLyBhY2NlbCBhdCBuZXdYXHJcbiAgICByZXR1cm4gdGhpcy5mb3JjZS5nZXRGb3JjZXMobmV3Qm9kaWVzKVxyXG4gICAgICAubWFwKCh2LCBpKSA9PiB2LmRpdmlkZVNjYWxhcihib2RpZXNbaV0ubWFzcykpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGludGVybWVkaWF0ZSBwb3NpdGlvbiByYXRlIHZhbHVlcy5cclxuICAgKiBAcGFyYW0gYm9kaWVzIGN1cnJlbnQgYm9kaWVzLlxyXG4gICAqIEBwYXJhbSBib2RpZXNLIGludGVybWVkaWF0ZSBraW5lbWF0aWMgcmF0ZSB2YWx1ZXMgZm9yIGFsbCBib2RpZXMuXHJcbiAgICogQHBhcmFtIGtJbmQgaW5kZXggb2YgaW50ZXJtZWRpYXRlIGtpbmVtYXRpYyByYXRlIHZhbHVlIHRvIGJhc2UgdGhlIG5ldyBpbnRlcm1lZGlhdGUgdmFsdWUgb24uXHJcbiAgICogQHBhcmFtIGRlbHRhVCB0aW1lIHN0ZXAuXHJcbiAgICogQHJldHVybnMgbmV4dCBpbnRlcm1lZGlhdGUgcG9zaXRpb24gcmF0ZSB2YWx1ZXMgZm9yIGFsbCBib2RpZXMuXHJcbiAgICogQGhpZGRlblxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0SW50ZXJLWChcclxuICAgIGJvZGllczogQ2VsZXN0aWFsQm9keVtdLFxyXG4gICAgYm9kaWVzSzogUnVuZ2VLdXR0YVN0ZXBzW10sXHJcbiAgICBrSW5kOiBudW1iZXIsXHJcbiAgICBkZWx0YVQ6IG51bWJlcixcclxuICApOiBWZWN0b3IzW10ge1xyXG4gICAgLy8gdih0KSArIGsoa0luZCl2ICogZGVsdGFUXHJcbiAgICByZXR1cm4gYm9kaWVzLm1hcCgodiwgaSkgPT4gdi52ZWxvY2l0eS5jbG9uZSgpXHJcbiAgICAgIC5hZGQoYm9kaWVzS1tpXS5rdltrSW5kXS5jbG9uZSgpXHJcbiAgICAgICAgLm11bHRpcGx5U2NhbGFyKGRlbHRhVCkpKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHR5cGUgeyBGb3JjZSB9IGZyb20gJy4vRm9yY2UnO1xyXG5pbXBvcnQgdHlwZSB7IFN0YXRlIH0gZnJvbSAnLi9TdGF0ZSc7XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIGZ1bmN0aW9uIG9iamVjdCB1c2VkIGZvciBzaW11bGF0aW5nIHRoZSBVbml2ZXJzZS4gU2hvdWxkIGVuY2Fwc3VsYXRlIHRoZSBudW1lcmljYWwgaW50ZWdyYXRpb24gbWV0aG9kIGFuZCBvdGhlciBuZWNlc3Nhcnkgc2ltdWxhdGlvbiBsb2dpYy4gQ2FuIHVzZSBhbiBleHRlcm5hbCBmb3JjZSBjYWxjdWxhdGlvbiBmdW5jdGlvbiBvYmplY3QgLSBzZWUge0BsaW5rIEZvcmNlfS5cclxuICogQGNhdGVnb3J5IEludGVyZmFjZXNcclxuICogQGNhdGVnb3J5IFNpbXVsYXRlRnVuY3Rpb25zXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFNpbXVsYXRlRnVuY3Rpb24ge1xyXG4gIC8qKlxyXG4gICAqIFNpbXVsYXRlIGEgc3RlcCBpbiB0aGUgVW5pdmVyc2UgYnkgdXNpbmcgdGhlIHByZXZpb3VzIGFuZC9vciBjdXJyZW50IHN0YXRlIGFuZCBhIHRpbWUgc3RlcC5cclxuICAgKiBAcGFyYW0gZGVsdGFUIHRpbWUgc3RlcC5cclxuICAgKiBAcGFyYW0gY3VyclN0YXRlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIFVuaXZlcnNlLlxyXG4gICAqIEBwYXJhbSBwcmV2U3RhdGUgcHJldmlvdXMgc3RhdGUgb2YgdGhlIFVuaXZlcnNlLlxyXG4gICAqIEByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIG9mIHRoZSBVbml2ZXJzZS5cclxuICAgKi9cclxuICBzaW11bGF0ZShkZWx0YVQ6IG51bWJlciwgY3VyclN0YXRlOiBTdGF0ZSwgcHJldlN0YXRlOiBTdGF0ZSk6IFN0YXRlXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGdW5jdGlvbiBvYmplY3QgdGhhdCB1c2VzIHRoZSB1c2VyLWRlZmluZWQgbGFtYmRhIGZ1bmN0aW9uIHRvIHNpbXVsYXRlIHRoZSBVbml2ZXJzZS5cclxuICogQGNhdGVnb3J5IFNpbXVsYXRlRnVuY3Rpb25zXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTGFtYmRhU2ltIGltcGxlbWVudHMgU2ltdWxhdGVGdW5jdGlvbiB7XHJcbiAgcmVhZG9ubHkgZm46IChkZWx0YVQ6IG51bWJlciwgY3VyclN0YXRlOiBTdGF0ZSwgcHJldlN0YXRlOiBTdGF0ZSkgPT4gU3RhdGU7XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIG5ldyBMYW1iZGFTaW0gd2l0aCB0aGUgcHJvdmlkZWQgbGFtYmRhIGZ1bmN0aW9uLlxyXG4gICAqIC0gVGhlIGxhbWJkYSBmdW5jdGlvbiBzaG91bGQgdGFrZSBpbiB0aGUgdGltZSBzdGVwLCB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgVW5pdmVyc2UsIGFuZCB0aGUgcHJldmlvdXMgc3RhdGUgb2YgdGhlIFVuaXZlcnNlLCBhbmQgcmV0dXJuIHRoZSBuZXh0IHN0YXRlIG9mIHRoZSBVbml2ZXJzZS5cclxuICAgKiAtIFRoZSBsYW1iZGEgZnVuY3Rpb24gc2hvdWxkIGNhbGwgb3IgY2FsY3VsYXRlIHRoZSBmb3JjZXMgYWN0aW9uIG9uIHRoZSBib2RpZXMgYnkgaXRzZWxmLlxyXG4gICAqIEBwYXJhbSBmbiBsYW1iZGEgZnVuY3Rpb24uXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoZm46IChkZWx0YVQ6IG51bWJlciwgY3VyclN0YXRlOiBTdGF0ZSwgcHJldlN0YXRlOiBTdGF0ZSkgPT4gU3RhdGUpIHtcclxuICAgIHRoaXMuZm4gPSBmbjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNpbXVsYXRlIHRoZSBVbml2ZXJzZSB1c2luZyB0aGUgbGFtYmRhIGZ1bmN0aW9uLlxyXG4gICAqIEBwYXJhbSBkZWx0YVQgdGltZSBzdGVwLlxyXG4gICAqIEBwYXJhbSBjdXJyU3RhdGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgVW5pdmVyc2UuXHJcbiAgICogQHBhcmFtIHByZXZTdGF0ZSBwcmV2aW91cyBzdGF0ZSBvZiB0aGUgVW5pdmVyc2UuXHJcbiAgICogQHJldHVybnMgdGhlIG5leHQgc3RhdGUgb2YgdGhlIFVuaXZlcnNlLlxyXG4gICAqL1xyXG4gIHNpbXVsYXRlKGRlbHRhVDogbnVtYmVyLCBjdXJyU3RhdGU6IFN0YXRlLCBwcmV2U3RhdGU6IFN0YXRlKTogU3RhdGUge1xyXG4gICAgcmV0dXJuIHRoaXMuZm4oZGVsdGFULCBjdXJyU3RhdGUsIHByZXZTdGF0ZSk7XHJcbiAgfVxyXG59XHJcbiIsIi8qKlxuICogbGlsLWd1aVxuICogaHR0cHM6Ly9saWwtZ3VpLmdlb3JnZWFsd2F5cy5jb21cbiAqIEB2ZXJzaW9uIDAuMTkuMlxuICogQGF1dGhvciBHZW9yZ2UgTWljaGFlbCBCcm93ZXJcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgYWxsIGNvbnRyb2xsZXJzLlxuICovXG5jbGFzcyBDb250cm9sbGVyIHtcblxuXHRjb25zdHJ1Y3RvciggcGFyZW50LCBvYmplY3QsIHByb3BlcnR5LCBjbGFzc05hbWUsIGVsZW1lbnRUeXBlID0gJ2RpdicgKSB7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgR1VJIHRoYXQgY29udGFpbnMgdGhpcyBjb250cm9sbGVyLlxuXHRcdCAqIEB0eXBlIHtHVUl9XG5cdFx0ICovXG5cdFx0dGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgb2JqZWN0IHRoaXMgY29udHJvbGxlciB3aWxsIG1vZGlmeS5cblx0XHQgKiBAdHlwZSB7b2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIGNvbnRyb2wuXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLnByb3BlcnR5ID0gcHJvcGVydHk7XG5cblx0XHQvKipcblx0XHQgKiBVc2VkIHRvIGRldGVybWluZSBpZiB0aGUgY29udHJvbGxlciBpcyBkaXNhYmxlZC5cblx0XHQgKiBVc2UgYGNvbnRyb2xsZXIuZGlzYWJsZSggdHJ1ZXxmYWxzZSApYCB0byBtb2RpZnkgdGhpcyB2YWx1ZS5cblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKi9cblx0XHR0aGlzLl9kaXNhYmxlZCA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogVXNlZCB0byBkZXRlcm1pbmUgaWYgdGhlIENvbnRyb2xsZXIgaXMgaGlkZGVuLlxuXHRcdCAqIFVzZSBgY29udHJvbGxlci5zaG93KClgIG9yIGBjb250cm9sbGVyLmhpZGUoKWAgdG8gY2hhbmdlIHRoaXMuXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICovXG5cdFx0dGhpcy5faGlkZGVuID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdmFsdWUgb2YgYG9iamVjdFsgcHJvcGVydHkgXWAgd2hlbiB0aGUgY29udHJvbGxlciB3YXMgY3JlYXRlZC5cblx0XHQgKiBAdHlwZSB7YW55fVxuXHRcdCAqL1xuXHRcdHRoaXMuaW5pdGlhbFZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG91dGVybW9zdCBjb250YWluZXIgRE9NIGVsZW1lbnQgZm9yIHRoaXMgY29udHJvbGxlci5cblx0XHQgKiBAdHlwZSB7SFRNTEVsZW1lbnR9XG5cdFx0ICovXG5cdFx0dGhpcy5kb21FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggZWxlbWVudFR5cGUgKTtcblx0XHR0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LmFkZCggJ2NvbnRyb2xsZXInICk7XG5cdFx0dGhpcy5kb21FbGVtZW50LmNsYXNzTGlzdC5hZGQoIGNsYXNzTmFtZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIERPTSBlbGVtZW50IHRoYXQgY29udGFpbnMgdGhlIGNvbnRyb2xsZXIncyBuYW1lLlxuXHRcdCAqIEB0eXBlIHtIVE1MRWxlbWVudH1cblx0XHQgKi9cblx0XHR0aGlzLiRuYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicgKTtcblx0XHR0aGlzLiRuYW1lLmNsYXNzTGlzdC5hZGQoICduYW1lJyApO1xuXG5cdFx0Q29udHJvbGxlci5uZXh0TmFtZUlEID0gQ29udHJvbGxlci5uZXh0TmFtZUlEIHx8IDA7XG5cdFx0dGhpcy4kbmFtZS5pZCA9IGBsaWwtZ3VpLW5hbWUtJHsrK0NvbnRyb2xsZXIubmV4dE5hbWVJRH1gO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIERPTSBlbGVtZW50IHRoYXQgY29udGFpbnMgdGhlIGNvbnRyb2xsZXIncyBcIndpZGdldFwiICh3aGljaCBkaWZmZXJzIGJ5IGNvbnRyb2xsZXIgdHlwZSkuXG5cdFx0ICogQHR5cGUge0hUTUxFbGVtZW50fVxuXHRcdCAqL1xuXHRcdHRoaXMuJHdpZGdldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnICk7XG5cdFx0dGhpcy4kd2lkZ2V0LmNsYXNzTGlzdC5hZGQoICd3aWRnZXQnICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgRE9NIGVsZW1lbnQgdGhhdCByZWNlaXZlcyB0aGUgZGlzYWJsZWQgYXR0cmlidXRlIHdoZW4gdXNpbmcgZGlzYWJsZSgpLlxuXHRcdCAqIEB0eXBlIHtIVE1MRWxlbWVudH1cblx0XHQgKi9cblx0XHR0aGlzLiRkaXNhYmxlID0gdGhpcy4kd2lkZ2V0O1xuXG5cdFx0dGhpcy5kb21FbGVtZW50LmFwcGVuZENoaWxkKCB0aGlzLiRuYW1lICk7XG5cdFx0dGhpcy5kb21FbGVtZW50LmFwcGVuZENoaWxkKCB0aGlzLiR3aWRnZXQgKTtcblxuXHRcdC8vIERvbid0IGZpcmUgZ2xvYmFsIGtleSBldmVudHMgd2hpbGUgdHlwaW5nIGluIGEgY29udHJvbGxlclxuXHRcdHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIGUgPT4gZS5zdG9wUHJvcGFnYXRpb24oKSApO1xuXHRcdHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAna2V5dXAnLCBlID0+IGUuc3RvcFByb3BhZ2F0aW9uKCkgKTtcblxuXHRcdHRoaXMucGFyZW50LmNoaWxkcmVuLnB1c2goIHRoaXMgKTtcblx0XHR0aGlzLnBhcmVudC5jb250cm9sbGVycy5wdXNoKCB0aGlzICk7XG5cblx0XHR0aGlzLnBhcmVudC4kY2hpbGRyZW4uYXBwZW5kQ2hpbGQoIHRoaXMuZG9tRWxlbWVudCApO1xuXG5cdFx0dGhpcy5fbGlzdGVuQ2FsbGJhY2sgPSB0aGlzLl9saXN0ZW5DYWxsYmFjay5iaW5kKCB0aGlzICk7XG5cblx0XHR0aGlzLm5hbWUoIHByb3BlcnR5ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBuYW1lIG9mIHRoZSBjb250cm9sbGVyIGFuZCBpdHMgbGFiZWwgaW4gdGhlIEdVSS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcblx0ICogQHJldHVybnMge3RoaXN9XG5cdCAqL1xuXHRuYW1lKCBuYW1lICkge1xuXHRcdC8qKlxuXHRcdCAqIFRoZSBjb250cm9sbGVyJ3MgbmFtZS4gVXNlIGBjb250cm9sbGVyLm5hbWUoICdOYW1lJyApYCB0byBtb2RpZnkgdGhpcyB2YWx1ZS5cblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMuX25hbWUgPSBuYW1lO1xuXHRcdHRoaXMuJG5hbWUudGV4dENvbnRlbnQgPSBuYW1lO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFBhc3MgYSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbmV2ZXIgdGhlIHZhbHVlIGlzIG1vZGlmaWVkIGJ5IHRoaXMgY29udHJvbGxlci5cblx0ICogVGhlIGZ1bmN0aW9uIHJlY2VpdmVzIHRoZSBuZXcgdmFsdWUgYXMgaXRzIGZpcnN0IHBhcmFtZXRlci4gVGhlIHZhbHVlIG9mIGB0aGlzYCB3aWxsIGJlIHRoZVxuXHQgKiBjb250cm9sbGVyLlxuXHQgKlxuXHQgKiBGb3IgZnVuY3Rpb24gY29udHJvbGxlcnMsIHRoZSBgb25DaGFuZ2VgIGNhbGxiYWNrIHdpbGwgYmUgZmlyZWQgb24gY2xpY2ssIGFmdGVyIHRoZSBmdW5jdGlvblxuXHQgKiBleGVjdXRlcy5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcblx0ICogQHJldHVybnMge3RoaXN9XG5cdCAqIEBleGFtcGxlXG5cdCAqIGNvbnN0IGNvbnRyb2xsZXIgPSBndWkuYWRkKCBvYmplY3QsICdwcm9wZXJ0eScgKTtcblx0ICpcblx0ICogY29udHJvbGxlci5vbkNoYW5nZSggZnVuY3Rpb24oIHYgKSB7XG5cdCAqIFx0Y29uc29sZS5sb2coICdUaGUgdmFsdWUgaXMgbm93ICcgKyB2ICk7XG5cdCAqIFx0Y29uc29sZS5hc3NlcnQoIHRoaXMgPT09IGNvbnRyb2xsZXIgKTtcblx0ICogfSApO1xuXHQgKi9cblx0b25DaGFuZ2UoIGNhbGxiYWNrICkge1xuXHRcdC8qKlxuXHRcdCAqIFVzZWQgdG8gYWNjZXNzIHRoZSBmdW5jdGlvbiBib3VuZCB0byBgb25DaGFuZ2VgIGV2ZW50cy4gRG9uJ3QgbW9kaWZ5IHRoaXMgdmFsdWUgZGlyZWN0bHkuXG5cdFx0ICogVXNlIHRoZSBgY29udHJvbGxlci5vbkNoYW5nZSggY2FsbGJhY2sgKWAgbWV0aG9kIGluc3RlYWQuXG5cdFx0ICogQHR5cGUge0Z1bmN0aW9ufVxuXHRcdCAqL1xuXHRcdHRoaXMuX29uQ2hhbmdlID0gY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogQ2FsbHMgdGhlIG9uQ2hhbmdlIG1ldGhvZHMgb2YgdGhpcyBjb250cm9sbGVyIGFuZCBpdHMgcGFyZW50IEdVSS5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0X2NhbGxPbkNoYW5nZSgpIHtcblxuXHRcdHRoaXMucGFyZW50Ll9jYWxsT25DaGFuZ2UoIHRoaXMgKTtcblxuXHRcdGlmICggdGhpcy5fb25DaGFuZ2UgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHRoaXMuX29uQ2hhbmdlLmNhbGwoIHRoaXMsIHRoaXMuZ2V0VmFsdWUoKSApO1xuXHRcdH1cblxuXHRcdHRoaXMuX2NoYW5nZWQgPSB0cnVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUGFzcyBhIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBhZnRlciB0aGlzIGNvbnRyb2xsZXIgaGFzIGJlZW4gbW9kaWZpZWQgYW5kIGxvc2VzIGZvY3VzLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICogQGV4YW1wbGVcblx0ICogY29uc3QgY29udHJvbGxlciA9IGd1aS5hZGQoIG9iamVjdCwgJ3Byb3BlcnR5JyApO1xuXHQgKlxuXHQgKiBjb250cm9sbGVyLm9uRmluaXNoQ2hhbmdlKCBmdW5jdGlvbiggdiApIHtcblx0ICogXHRjb25zb2xlLmxvZyggJ0NoYW5nZXMgY29tcGxldGU6ICcgKyB2ICk7XG5cdCAqIFx0Y29uc29sZS5hc3NlcnQoIHRoaXMgPT09IGNvbnRyb2xsZXIgKTtcblx0ICogfSApO1xuXHQgKi9cblx0b25GaW5pc2hDaGFuZ2UoIGNhbGxiYWNrICkge1xuXHRcdC8qKlxuXHRcdCAqIFVzZWQgdG8gYWNjZXNzIHRoZSBmdW5jdGlvbiBib3VuZCB0byBgb25GaW5pc2hDaGFuZ2VgIGV2ZW50cy4gRG9uJ3QgbW9kaWZ5IHRoaXMgdmFsdWVcblx0XHQgKiBkaXJlY3RseS4gVXNlIHRoZSBgY29udHJvbGxlci5vbkZpbmlzaENoYW5nZSggY2FsbGJhY2sgKWAgbWV0aG9kIGluc3RlYWQuXG5cdFx0ICogQHR5cGUge0Z1bmN0aW9ufVxuXHRcdCAqL1xuXHRcdHRoaXMuX29uRmluaXNoQ2hhbmdlID0gY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogU2hvdWxkIGJlIGNhbGxlZCBieSBDb250cm9sbGVyIHdoZW4gaXRzIHdpZGdldHMgbG9zZSBmb2N1cy5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0X2NhbGxPbkZpbmlzaENoYW5nZSgpIHtcblxuXHRcdGlmICggdGhpcy5fY2hhbmdlZCApIHtcblxuXHRcdFx0dGhpcy5wYXJlbnQuX2NhbGxPbkZpbmlzaENoYW5nZSggdGhpcyApO1xuXG5cdFx0XHRpZiAoIHRoaXMuX29uRmluaXNoQ2hhbmdlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMuX29uRmluaXNoQ2hhbmdlLmNhbGwoIHRoaXMsIHRoaXMuZ2V0VmFsdWUoKSApO1xuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dGhpcy5fY2hhbmdlZCA9IGZhbHNlO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgY29udHJvbGxlciBiYWNrIHRvIGl0cyBpbml0aWFsIHZhbHVlLlxuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICovXG5cdHJlc2V0KCkge1xuXHRcdHRoaXMuc2V0VmFsdWUoIHRoaXMuaW5pdGlhbFZhbHVlICk7XG5cdFx0dGhpcy5fY2FsbE9uRmluaXNoQ2hhbmdlKCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogRW5hYmxlcyB0aGlzIGNvbnRyb2xsZXIuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZFxuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICogQGV4YW1wbGVcblx0ICogY29udHJvbGxlci5lbmFibGUoKTtcblx0ICogY29udHJvbGxlci5lbmFibGUoIGZhbHNlICk7IC8vIGRpc2FibGVcblx0ICogY29udHJvbGxlci5lbmFibGUoIGNvbnRyb2xsZXIuX2Rpc2FibGVkICk7IC8vIHRvZ2dsZVxuXHQgKi9cblx0ZW5hYmxlKCBlbmFibGVkID0gdHJ1ZSApIHtcblx0XHRyZXR1cm4gdGhpcy5kaXNhYmxlKCAhZW5hYmxlZCApO1xuXHR9XG5cblx0LyoqXG5cdCAqIERpc2FibGVzIHRoaXMgY29udHJvbGxlci5cblx0ICogQHBhcmFtIHtib29sZWFufSBkaXNhYmxlZFxuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICogQGV4YW1wbGVcblx0ICogY29udHJvbGxlci5kaXNhYmxlKCk7XG5cdCAqIGNvbnRyb2xsZXIuZGlzYWJsZSggZmFsc2UgKTsgLy8gZW5hYmxlXG5cdCAqIGNvbnRyb2xsZXIuZGlzYWJsZSggIWNvbnRyb2xsZXIuX2Rpc2FibGVkICk7IC8vIHRvZ2dsZVxuXHQgKi9cblx0ZGlzYWJsZSggZGlzYWJsZWQgPSB0cnVlICkge1xuXG5cdFx0aWYgKCBkaXNhYmxlZCA9PT0gdGhpcy5fZGlzYWJsZWQgKSByZXR1cm4gdGhpcztcblxuXHRcdHRoaXMuX2Rpc2FibGVkID0gZGlzYWJsZWQ7XG5cblx0XHR0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSggJ2Rpc2FibGVkJywgZGlzYWJsZWQgKTtcblx0XHR0aGlzLiRkaXNhYmxlLnRvZ2dsZUF0dHJpYnV0ZSggJ2Rpc2FibGVkJywgZGlzYWJsZWQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2hvd3MgdGhlIENvbnRyb2xsZXIgYWZ0ZXIgaXQncyBiZWVuIGhpZGRlbi5cblx0ICogQHBhcmFtIHtib29sZWFufSBzaG93XG5cdCAqIEByZXR1cm5zIHt0aGlzfVxuXHQgKiBAZXhhbXBsZVxuXHQgKiBjb250cm9sbGVyLnNob3coKTtcblx0ICogY29udHJvbGxlci5zaG93KCBmYWxzZSApOyAvLyBoaWRlXG5cdCAqIGNvbnRyb2xsZXIuc2hvdyggY29udHJvbGxlci5faGlkZGVuICk7IC8vIHRvZ2dsZVxuXHQgKi9cblx0c2hvdyggc2hvdyA9IHRydWUgKSB7XG5cblx0XHR0aGlzLl9oaWRkZW4gPSAhc2hvdztcblxuXHRcdHRoaXMuZG9tRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gdGhpcy5faGlkZGVuID8gJ25vbmUnIDogJyc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEhpZGVzIHRoZSBDb250cm9sbGVyLlxuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICovXG5cdGhpZGUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2hvdyggZmFsc2UgKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGFuZ2VzIHRoaXMgY29udHJvbGxlciBpbnRvIGEgZHJvcGRvd24gb2Ygb3B0aW9ucy5cblx0ICpcblx0ICogQ2FsbGluZyB0aGlzIG1ldGhvZCBvbiBhbiBvcHRpb24gY29udHJvbGxlciB3aWxsIHNpbXBseSB1cGRhdGUgdGhlIG9wdGlvbnMuIEhvd2V2ZXIsIGlmIHRoaXNcblx0ICogY29udHJvbGxlciB3YXMgbm90IGFscmVhZHkgYW4gb3B0aW9uIGNvbnRyb2xsZXIsIG9sZCByZWZlcmVuY2VzIHRvIHRoaXMgY29udHJvbGxlciBhcmVcblx0ICogZGVzdHJveWVkLCBhbmQgYSBuZXcgY29udHJvbGxlciBpcyBhZGRlZCB0byB0aGUgZW5kIG9mIHRoZSBHVUkuXG5cdCAqIEBleGFtcGxlXG5cdCAqIC8vIHNhZmUgdXNhZ2Vcblx0ICpcblx0ICogZ3VpLmFkZCggb2JqLCAncHJvcDEnICkub3B0aW9ucyggWyAnYScsICdiJywgJ2MnIF0gKTtcblx0ICogZ3VpLmFkZCggb2JqLCAncHJvcDInICkub3B0aW9ucyggeyBCaWc6IDEwLCBTbWFsbDogMSB9ICk7XG5cdCAqIGd1aS5hZGQoIG9iaiwgJ3Byb3AzJyApO1xuXHQgKlxuXHQgKiAvLyBkYW5nZXJcblx0ICpcblx0ICogY29uc3QgY3RybDEgPSBndWkuYWRkKCBvYmosICdwcm9wMScgKTtcblx0ICogZ3VpLmFkZCggb2JqLCAncHJvcDInICk7XG5cdCAqXG5cdCAqIC8vIGNhbGxpbmcgb3B0aW9ucyBvdXQgb2Ygb3JkZXIgYWRkcyBhIG5ldyBjb250cm9sbGVyIHRvIHRoZSBlbmQuLi5cblx0ICogY29uc3QgY3RybDIgPSBjdHJsMS5vcHRpb25zKCBbICdhJywgJ2InLCAnYycgXSApO1xuXHQgKlxuXHQgKiAvLyAuLi5hbmQgY3RybDEgbm93IHJlZmVyZW5jZXMgYSBjb250cm9sbGVyIHRoYXQgZG9lc24ndCBleGlzdFxuXHQgKiBhc3NlcnQoIGN0cmwyICE9PSBjdHJsMSApXG5cdCAqIEBwYXJhbSB7b2JqZWN0fEFycmF5fSBvcHRpb25zXG5cdCAqIEByZXR1cm5zIHtDb250cm9sbGVyfVxuXHQgKi9cblx0b3B0aW9ucyggb3B0aW9ucyApIHtcblx0XHRjb25zdCBjb250cm9sbGVyID0gdGhpcy5wYXJlbnQuYWRkKCB0aGlzLm9iamVjdCwgdGhpcy5wcm9wZXJ0eSwgb3B0aW9ucyApO1xuXHRcdGNvbnRyb2xsZXIubmFtZSggdGhpcy5fbmFtZSApO1xuXHRcdHRoaXMuZGVzdHJveSgpO1xuXHRcdHJldHVybiBjb250cm9sbGVyO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIG1pbmltdW0gdmFsdWUuIE9ubHkgd29ya3Mgb24gbnVtYmVyIGNvbnRyb2xsZXJzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbWluXG5cdCAqIEByZXR1cm5zIHt0aGlzfVxuXHQgKi9cblx0bWluKCBtaW4gKSB7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgbWF4aW11bSB2YWx1ZS4gT25seSB3b3JrcyBvbiBudW1iZXIgY29udHJvbGxlcnMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBtYXhcblx0ICogQHJldHVybnMge3RoaXN9XG5cdCAqL1xuXHRtYXgoIG1heCApIHtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBWYWx1ZXMgc2V0IGJ5IHRoaXMgY29udHJvbGxlciB3aWxsIGJlIHJvdW5kZWQgdG8gbXVsdGlwbGVzIG9mIGBzdGVwYC4gT25seSB3b3JrcyBvbiBudW1iZXJcblx0ICogY29udHJvbGxlcnMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwXG5cdCAqIEByZXR1cm5zIHt0aGlzfVxuXHQgKi9cblx0c3RlcCggc3RlcCApIHtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBSb3VuZHMgdGhlIGRpc3BsYXllZCB2YWx1ZSB0byBhIGZpeGVkIG51bWJlciBvZiBkZWNpbWFscywgd2l0aG91dCBhZmZlY3RpbmcgdGhlIGFjdHVhbCB2YWx1ZVxuXHQgKiBsaWtlIGBzdGVwKClgLiBPbmx5IHdvcmtzIG9uIG51bWJlciBjb250cm9sbGVycy5cblx0ICogQGV4YW1wbGVcblx0ICogZ3VpLmFkZCggb2JqZWN0LCAncHJvcGVydHknICkubGlzdGVuKCkuZGVjaW1hbHMoIDQgKTtcblx0ICogQHBhcmFtIHtudW1iZXJ9IGRlY2ltYWxzXG5cdCAqIEByZXR1cm5zIHt0aGlzfVxuXHQgKi9cblx0ZGVjaW1hbHMoIGRlY2ltYWxzICkge1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIENhbGxzIGB1cGRhdGVEaXNwbGF5KClgIGV2ZXJ5IGFuaW1hdGlvbiBmcmFtZS4gUGFzcyBgZmFsc2VgIHRvIHN0b3AgbGlzdGVuaW5nLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IGxpc3RlblxuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICovXG5cdGxpc3RlbiggbGlzdGVuID0gdHJ1ZSApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFVzZWQgdG8gZGV0ZXJtaW5lIGlmIHRoZSBjb250cm9sbGVyIGlzIGN1cnJlbnRseSBsaXN0ZW5pbmcuIERvbid0IG1vZGlmeSB0aGlzIHZhbHVlXG5cdFx0ICogZGlyZWN0bHkuIFVzZSB0aGUgYGNvbnRyb2xsZXIubGlzdGVuKCB0cnVlfGZhbHNlIClgIG1ldGhvZCBpbnN0ZWFkLlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdHRoaXMuX2xpc3RlbmluZyA9IGxpc3RlbjtcblxuXHRcdGlmICggdGhpcy5fbGlzdGVuQ2FsbGJhY2tJRCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y2FuY2VsQW5pbWF0aW9uRnJhbWUoIHRoaXMuX2xpc3RlbkNhbGxiYWNrSUQgKTtcblx0XHRcdHRoaXMuX2xpc3RlbkNhbGxiYWNrSUQgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLl9saXN0ZW5pbmcgKSB7XG5cdFx0XHR0aGlzLl9saXN0ZW5DYWxsYmFjaygpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRfbGlzdGVuQ2FsbGJhY2soKSB7XG5cblx0XHR0aGlzLl9saXN0ZW5DYWxsYmFja0lEID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCB0aGlzLl9saXN0ZW5DYWxsYmFjayApO1xuXG5cdFx0Ly8gVG8gcHJldmVudCBmcmFtZXJhdGUgbG9zcywgbWFrZSBzdXJlIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZCBiZWZvcmUgdXBkYXRpbmcgdGhlIGRpc3BsYXkuXG5cdFx0Ly8gTm90ZTogc2F2ZSgpIGlzIHVzZWQgaGVyZSBpbnN0ZWFkIG9mIGdldFZhbHVlKCkgb25seSBiZWNhdXNlIG9mIENvbG9yQ29udHJvbGxlci4gVGhlICE9PSBvcGVyYXRvclxuXHRcdC8vIHdvbid0IHdvcmsgZm9yIGNvbG9yIG9iamVjdHMgb3IgYXJyYXlzLCBidXQgQ29sb3JDb250cm9sbGVyLnNhdmUoKSBhbHdheXMgcmV0dXJucyBhIHN0cmluZy5cblxuXHRcdGNvbnN0IGN1clZhbHVlID0gdGhpcy5zYXZlKCk7XG5cblx0XHRpZiAoIGN1clZhbHVlICE9PSB0aGlzLl9saXN0ZW5QcmV2VmFsdWUgKSB7XG5cdFx0XHR0aGlzLnVwZGF0ZURpc3BsYXkoKTtcblx0XHR9XG5cblx0XHR0aGlzLl9saXN0ZW5QcmV2VmFsdWUgPSBjdXJWYWx1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYG9iamVjdFsgcHJvcGVydHkgXWAuXG5cdCAqIEByZXR1cm5zIHthbnl9XG5cdCAqL1xuXHRnZXRWYWx1ZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5vYmplY3RbIHRoaXMucHJvcGVydHkgXTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB2YWx1ZSBvZiBgb2JqZWN0WyBwcm9wZXJ0eSBdYCwgaW52b2tlcyBhbnkgYG9uQ2hhbmdlYCBoYW5kbGVycyBhbmQgdXBkYXRlcyB0aGUgZGlzcGxheS5cblx0ICogQHBhcmFtIHthbnl9IHZhbHVlXG5cdCAqIEByZXR1cm5zIHt0aGlzfVxuXHQgKi9cblx0c2V0VmFsdWUoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLmdldFZhbHVlKCkgIT09IHZhbHVlICkge1xuXG5cdFx0XHR0aGlzLm9iamVjdFsgdGhpcy5wcm9wZXJ0eSBdID0gdmFsdWU7XG5cdFx0XHR0aGlzLl9jYWxsT25DaGFuZ2UoKTtcblx0XHRcdHRoaXMudXBkYXRlRGlzcGxheSgpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSBkaXNwbGF5IHRvIGtlZXAgaXQgaW4gc3luYyB3aXRoIHRoZSBjdXJyZW50IHZhbHVlLiBVc2VmdWwgZm9yIHVwZGF0aW5nIHlvdXJcblx0ICogY29udHJvbGxlcnMgd2hlbiB0aGVpciB2YWx1ZXMgaGF2ZSBiZWVuIG1vZGlmaWVkIG91dHNpZGUgb2YgdGhlIEdVSS5cblx0ICogQHJldHVybnMge3RoaXN9XG5cdCAqL1xuXHR1cGRhdGVEaXNwbGF5KCkge1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0bG9hZCggdmFsdWUgKSB7XG5cdFx0dGhpcy5zZXRWYWx1ZSggdmFsdWUgKTtcblx0XHR0aGlzLl9jYWxsT25GaW5pc2hDaGFuZ2UoKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdHNhdmUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0VmFsdWUoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGlzIGNvbnRyb2xsZXIgYW5kIHJlbW92ZXMgaXQgZnJvbSB0aGUgcGFyZW50IEdVSS5cblx0ICovXG5cdGRlc3Ryb3koKSB7XG5cdFx0dGhpcy5saXN0ZW4oIGZhbHNlICk7XG5cdFx0dGhpcy5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKCB0aGlzLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKCB0aGlzICksIDEgKTtcblx0XHR0aGlzLnBhcmVudC5jb250cm9sbGVycy5zcGxpY2UoIHRoaXMucGFyZW50LmNvbnRyb2xsZXJzLmluZGV4T2YoIHRoaXMgKSwgMSApO1xuXHRcdHRoaXMucGFyZW50LiRjaGlsZHJlbi5yZW1vdmVDaGlsZCggdGhpcy5kb21FbGVtZW50ICk7XG5cdH1cblxufVxuXG5jbGFzcyBCb29sZWFuQ29udHJvbGxlciBleHRlbmRzIENvbnRyb2xsZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJlbnQsIG9iamVjdCwgcHJvcGVydHkgKSB7XG5cblx0XHRzdXBlciggcGFyZW50LCBvYmplY3QsIHByb3BlcnR5LCAnYm9vbGVhbicsICdsYWJlbCcgKTtcblxuXHRcdHRoaXMuJGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2lucHV0JyApO1xuXHRcdHRoaXMuJGlucHV0LnNldEF0dHJpYnV0ZSggJ3R5cGUnLCAnY2hlY2tib3gnICk7XG5cdFx0dGhpcy4kaW5wdXQuc2V0QXR0cmlidXRlKCAnYXJpYS1sYWJlbGxlZGJ5JywgdGhpcy4kbmFtZS5pZCApO1xuXG5cdFx0dGhpcy4kd2lkZ2V0LmFwcGVuZENoaWxkKCB0aGlzLiRpbnB1dCApO1xuXG5cdFx0dGhpcy4kaW5wdXQuYWRkRXZlbnRMaXN0ZW5lciggJ2NoYW5nZScsICgpID0+IHtcblx0XHRcdHRoaXMuc2V0VmFsdWUoIHRoaXMuJGlucHV0LmNoZWNrZWQgKTtcblx0XHRcdHRoaXMuX2NhbGxPbkZpbmlzaENoYW5nZSgpO1xuXHRcdH0gKTtcblxuXHRcdHRoaXMuJGRpc2FibGUgPSB0aGlzLiRpbnB1dDtcblxuXHRcdHRoaXMudXBkYXRlRGlzcGxheSgpO1xuXG5cdH1cblxuXHR1cGRhdGVEaXNwbGF5KCkge1xuXHRcdHRoaXMuJGlucHV0LmNoZWNrZWQgPSB0aGlzLmdldFZhbHVlKCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVDb2xvclN0cmluZyggc3RyaW5nICkge1xuXG5cdGxldCBtYXRjaCwgcmVzdWx0O1xuXG5cdGlmICggbWF0Y2ggPSBzdHJpbmcubWF0Y2goIC8oI3wweCk/KFthLWYwLTldezZ9KS9pICkgKSB7XG5cblx0XHRyZXN1bHQgPSBtYXRjaFsgMiBdO1xuXG5cdH0gZWxzZSBpZiAoIG1hdGNoID0gc3RyaW5nLm1hdGNoKCAvcmdiXFwoXFxzKihcXGQqKVxccyosXFxzKihcXGQqKVxccyosXFxzKihcXGQqKVxccypcXCkvICkgKSB7XG5cblx0XHRyZXN1bHQgPSBwYXJzZUludCggbWF0Y2hbIDEgXSApLnRvU3RyaW5nKCAxNiApLnBhZFN0YXJ0KCAyLCAwIClcblx0XHRcdCsgcGFyc2VJbnQoIG1hdGNoWyAyIF0gKS50b1N0cmluZyggMTYgKS5wYWRTdGFydCggMiwgMCApXG5cdFx0XHQrIHBhcnNlSW50KCBtYXRjaFsgMyBdICkudG9TdHJpbmcoIDE2ICkucGFkU3RhcnQoIDIsIDAgKTtcblxuXHR9IGVsc2UgaWYgKCBtYXRjaCA9IHN0cmluZy5tYXRjaCggL14jPyhbYS1mMC05XSkoW2EtZjAtOV0pKFthLWYwLTldKSQvaSApICkge1xuXG5cdFx0cmVzdWx0ID0gbWF0Y2hbIDEgXSArIG1hdGNoWyAxIF0gKyBtYXRjaFsgMiBdICsgbWF0Y2hbIDIgXSArIG1hdGNoWyAzIF0gKyBtYXRjaFsgMyBdO1xuXG5cdH1cblxuXHRpZiAoIHJlc3VsdCApIHtcblx0XHRyZXR1cm4gJyMnICsgcmVzdWx0O1xuXHR9XG5cblx0cmV0dXJuIGZhbHNlO1xuXG59XG5cbmNvbnN0IFNUUklORyA9IHtcblx0aXNQcmltaXRpdmU6IHRydWUsXG5cdG1hdGNoOiB2ID0+IHR5cGVvZiB2ID09PSAnc3RyaW5nJyxcblx0ZnJvbUhleFN0cmluZzogbm9ybWFsaXplQ29sb3JTdHJpbmcsXG5cdHRvSGV4U3RyaW5nOiBub3JtYWxpemVDb2xvclN0cmluZ1xufTtcblxuY29uc3QgSU5UID0ge1xuXHRpc1ByaW1pdGl2ZTogdHJ1ZSxcblx0bWF0Y2g6IHYgPT4gdHlwZW9mIHYgPT09ICdudW1iZXInLFxuXHRmcm9tSGV4U3RyaW5nOiBzdHJpbmcgPT4gcGFyc2VJbnQoIHN0cmluZy5zdWJzdHJpbmcoIDEgKSwgMTYgKSxcblx0dG9IZXhTdHJpbmc6IHZhbHVlID0+ICcjJyArIHZhbHVlLnRvU3RyaW5nKCAxNiApLnBhZFN0YXJ0KCA2LCAwIClcbn07XG5cbmNvbnN0IEFSUkFZID0ge1xuXHRpc1ByaW1pdGl2ZTogZmFsc2UsXG5cblx0Ly8gVGhlIGFycm93IGZ1bmN0aW9uIGlzIGhlcmUgdG8gYXBwZWFzZSB0cmVlIHNoYWtlcnMgbGlrZSBlc2J1aWxkIG9yIHdlYnBhY2suXG5cdC8vIFNlZSBodHRwczovL2VzYnVpbGQuZ2l0aHViLmlvL2FwaS8jdHJlZS1zaGFraW5nXG5cdG1hdGNoOiB2ID0+IEFycmF5LmlzQXJyYXkoIHYgKSxcblxuXHRmcm9tSGV4U3RyaW5nKCBzdHJpbmcsIHRhcmdldCwgcmdiU2NhbGUgPSAxICkge1xuXG5cdFx0Y29uc3QgaW50ID0gSU5ULmZyb21IZXhTdHJpbmcoIHN0cmluZyApO1xuXG5cdFx0dGFyZ2V0WyAwIF0gPSAoIGludCA+PiAxNiAmIDI1NSApIC8gMjU1ICogcmdiU2NhbGU7XG5cdFx0dGFyZ2V0WyAxIF0gPSAoIGludCA+PiA4ICYgMjU1ICkgLyAyNTUgKiByZ2JTY2FsZTtcblx0XHR0YXJnZXRbIDIgXSA9ICggaW50ICYgMjU1ICkgLyAyNTUgKiByZ2JTY2FsZTtcblxuXHR9LFxuXHR0b0hleFN0cmluZyggWyByLCBnLCBiIF0sIHJnYlNjYWxlID0gMSApIHtcblxuXHRcdHJnYlNjYWxlID0gMjU1IC8gcmdiU2NhbGU7XG5cblx0XHRjb25zdCBpbnQgPSAoIHIgKiByZ2JTY2FsZSApIDw8IDE2IF5cblx0XHRcdCggZyAqIHJnYlNjYWxlICkgPDwgOCBeXG5cdFx0XHQoIGIgKiByZ2JTY2FsZSApIDw8IDA7XG5cblx0XHRyZXR1cm4gSU5ULnRvSGV4U3RyaW5nKCBpbnQgKTtcblxuXHR9XG59O1xuXG5jb25zdCBPQkpFQ1QgPSB7XG5cdGlzUHJpbWl0aXZlOiBmYWxzZSxcblx0bWF0Y2g6IHYgPT4gT2JqZWN0KCB2ICkgPT09IHYsXG5cdGZyb21IZXhTdHJpbmcoIHN0cmluZywgdGFyZ2V0LCByZ2JTY2FsZSA9IDEgKSB7XG5cblx0XHRjb25zdCBpbnQgPSBJTlQuZnJvbUhleFN0cmluZyggc3RyaW5nICk7XG5cblx0XHR0YXJnZXQuciA9ICggaW50ID4+IDE2ICYgMjU1ICkgLyAyNTUgKiByZ2JTY2FsZTtcblx0XHR0YXJnZXQuZyA9ICggaW50ID4+IDggJiAyNTUgKSAvIDI1NSAqIHJnYlNjYWxlO1xuXHRcdHRhcmdldC5iID0gKCBpbnQgJiAyNTUgKSAvIDI1NSAqIHJnYlNjYWxlO1xuXG5cdH0sXG5cdHRvSGV4U3RyaW5nKCB7IHIsIGcsIGIgfSwgcmdiU2NhbGUgPSAxICkge1xuXG5cdFx0cmdiU2NhbGUgPSAyNTUgLyByZ2JTY2FsZTtcblxuXHRcdGNvbnN0IGludCA9ICggciAqIHJnYlNjYWxlICkgPDwgMTYgXlxuXHRcdFx0KCBnICogcmdiU2NhbGUgKSA8PCA4IF5cblx0XHRcdCggYiAqIHJnYlNjYWxlICkgPDwgMDtcblxuXHRcdHJldHVybiBJTlQudG9IZXhTdHJpbmcoIGludCApO1xuXG5cdH1cbn07XG5cbmNvbnN0IEZPUk1BVFMgPSBbIFNUUklORywgSU5ULCBBUlJBWSwgT0JKRUNUIF07XG5cbmZ1bmN0aW9uIGdldENvbG9yRm9ybWF0KCB2YWx1ZSApIHtcblx0cmV0dXJuIEZPUk1BVFMuZmluZCggZm9ybWF0ID0+IGZvcm1hdC5tYXRjaCggdmFsdWUgKSApO1xufVxuXG5jbGFzcyBDb2xvckNvbnRyb2xsZXIgZXh0ZW5kcyBDb250cm9sbGVyIHtcblxuXHRjb25zdHJ1Y3RvciggcGFyZW50LCBvYmplY3QsIHByb3BlcnR5LCByZ2JTY2FsZSApIHtcblxuXHRcdHN1cGVyKCBwYXJlbnQsIG9iamVjdCwgcHJvcGVydHksICdjb2xvcicgKTtcblxuXHRcdHRoaXMuJGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2lucHV0JyApO1xuXHRcdHRoaXMuJGlucHV0LnNldEF0dHJpYnV0ZSggJ3R5cGUnLCAnY29sb3InICk7XG5cdFx0dGhpcy4kaW5wdXQuc2V0QXR0cmlidXRlKCAndGFiaW5kZXgnLCAtMSApO1xuXHRcdHRoaXMuJGlucHV0LnNldEF0dHJpYnV0ZSggJ2FyaWEtbGFiZWxsZWRieScsIHRoaXMuJG5hbWUuaWQgKTtcblxuXHRcdHRoaXMuJHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnaW5wdXQnICk7XG5cdFx0dGhpcy4kdGV4dC5zZXRBdHRyaWJ1dGUoICd0eXBlJywgJ3RleHQnICk7XG5cdFx0dGhpcy4kdGV4dC5zZXRBdHRyaWJ1dGUoICdzcGVsbGNoZWNrJywgJ2ZhbHNlJyApO1xuXHRcdHRoaXMuJHRleHQuc2V0QXR0cmlidXRlKCAnYXJpYS1sYWJlbGxlZGJ5JywgdGhpcy4kbmFtZS5pZCApO1xuXG5cdFx0dGhpcy4kZGlzcGxheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnICk7XG5cdFx0dGhpcy4kZGlzcGxheS5jbGFzc0xpc3QuYWRkKCAnZGlzcGxheScgKTtcblxuXHRcdHRoaXMuJGRpc3BsYXkuYXBwZW5kQ2hpbGQoIHRoaXMuJGlucHV0ICk7XG5cdFx0dGhpcy4kd2lkZ2V0LmFwcGVuZENoaWxkKCB0aGlzLiRkaXNwbGF5ICk7XG5cdFx0dGhpcy4kd2lkZ2V0LmFwcGVuZENoaWxkKCB0aGlzLiR0ZXh0ICk7XG5cblx0XHR0aGlzLl9mb3JtYXQgPSBnZXRDb2xvckZvcm1hdCggdGhpcy5pbml0aWFsVmFsdWUgKTtcblx0XHR0aGlzLl9yZ2JTY2FsZSA9IHJnYlNjYWxlO1xuXG5cdFx0dGhpcy5faW5pdGlhbFZhbHVlSGV4U3RyaW5nID0gdGhpcy5zYXZlKCk7XG5cdFx0dGhpcy5fdGV4dEZvY3VzZWQgPSBmYWxzZTtcblxuXHRcdHRoaXMuJGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoICdpbnB1dCcsICgpID0+IHtcblx0XHRcdHRoaXMuX3NldFZhbHVlRnJvbUhleFN0cmluZyggdGhpcy4kaW5wdXQudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0XHR0aGlzLiRpbnB1dC5hZGRFdmVudExpc3RlbmVyKCAnYmx1cicsICgpID0+IHtcblx0XHRcdHRoaXMuX2NhbGxPbkZpbmlzaENoYW5nZSgpO1xuXHRcdH0gKTtcblxuXHRcdHRoaXMuJHRleHQuYWRkRXZlbnRMaXN0ZW5lciggJ2lucHV0JywgKCkgPT4ge1xuXHRcdFx0Y29uc3QgdHJ5UGFyc2UgPSBub3JtYWxpemVDb2xvclN0cmluZyggdGhpcy4kdGV4dC52YWx1ZSApO1xuXHRcdFx0aWYgKCB0cnlQYXJzZSApIHtcblx0XHRcdFx0dGhpcy5fc2V0VmFsdWVGcm9tSGV4U3RyaW5nKCB0cnlQYXJzZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdHRoaXMuJHRleHQuYWRkRXZlbnRMaXN0ZW5lciggJ2ZvY3VzJywgKCkgPT4ge1xuXHRcdFx0dGhpcy5fdGV4dEZvY3VzZWQgPSB0cnVlO1xuXHRcdFx0dGhpcy4kdGV4dC5zZWxlY3QoKTtcblx0XHR9ICk7XG5cblx0XHR0aGlzLiR0ZXh0LmFkZEV2ZW50TGlzdGVuZXIoICdibHVyJywgKCkgPT4ge1xuXHRcdFx0dGhpcy5fdGV4dEZvY3VzZWQgPSBmYWxzZTtcblx0XHRcdHRoaXMudXBkYXRlRGlzcGxheSgpO1xuXHRcdFx0dGhpcy5fY2FsbE9uRmluaXNoQ2hhbmdlKCk7XG5cdFx0fSApO1xuXG5cdFx0dGhpcy4kZGlzYWJsZSA9IHRoaXMuJHRleHQ7XG5cblx0XHR0aGlzLnVwZGF0ZURpc3BsYXkoKTtcblxuXHR9XG5cblx0cmVzZXQoKSB7XG5cdFx0dGhpcy5fc2V0VmFsdWVGcm9tSGV4U3RyaW5nKCB0aGlzLl9pbml0aWFsVmFsdWVIZXhTdHJpbmcgKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdF9zZXRWYWx1ZUZyb21IZXhTdHJpbmcoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLl9mb3JtYXQuaXNQcmltaXRpdmUgKSB7XG5cblx0XHRcdGNvbnN0IG5ld1ZhbHVlID0gdGhpcy5fZm9ybWF0LmZyb21IZXhTdHJpbmcoIHZhbHVlICk7XG5cdFx0XHR0aGlzLnNldFZhbHVlKCBuZXdWYWx1ZSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5fZm9ybWF0LmZyb21IZXhTdHJpbmcoIHZhbHVlLCB0aGlzLmdldFZhbHVlKCksIHRoaXMuX3JnYlNjYWxlICk7XG5cdFx0XHR0aGlzLl9jYWxsT25DaGFuZ2UoKTtcblx0XHRcdHRoaXMudXBkYXRlRGlzcGxheSgpO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRzYXZlKCkge1xuXHRcdHJldHVybiB0aGlzLl9mb3JtYXQudG9IZXhTdHJpbmcoIHRoaXMuZ2V0VmFsdWUoKSwgdGhpcy5fcmdiU2NhbGUgKTtcblx0fVxuXG5cdGxvYWQoIHZhbHVlICkge1xuXHRcdHRoaXMuX3NldFZhbHVlRnJvbUhleFN0cmluZyggdmFsdWUgKTtcblx0XHR0aGlzLl9jYWxsT25GaW5pc2hDaGFuZ2UoKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdHVwZGF0ZURpc3BsYXkoKSB7XG5cdFx0dGhpcy4kaW5wdXQudmFsdWUgPSB0aGlzLl9mb3JtYXQudG9IZXhTdHJpbmcoIHRoaXMuZ2V0VmFsdWUoKSwgdGhpcy5fcmdiU2NhbGUgKTtcblx0XHRpZiAoICF0aGlzLl90ZXh0Rm9jdXNlZCApIHtcblx0XHRcdHRoaXMuJHRleHQudmFsdWUgPSB0aGlzLiRpbnB1dC52YWx1ZS5zdWJzdHJpbmcoIDEgKTtcblx0XHR9XG5cdFx0dGhpcy4kZGlzcGxheS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLiRpbnB1dC52YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG59XG5cbmNsYXNzIEZ1bmN0aW9uQ29udHJvbGxlciBleHRlbmRzIENvbnRyb2xsZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJlbnQsIG9iamVjdCwgcHJvcGVydHkgKSB7XG5cblx0XHRzdXBlciggcGFyZW50LCBvYmplY3QsIHByb3BlcnR5LCAnZnVuY3Rpb24nICk7XG5cblx0XHQvLyBCdXR0b25zIGFyZSB0aGUgb25seSBjYXNlIHdoZXJlIHdpZGdldCBjb250YWlucyBuYW1lXG5cdFx0dGhpcy4kYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2J1dHRvbicgKTtcblx0XHR0aGlzLiRidXR0b24uYXBwZW5kQ2hpbGQoIHRoaXMuJG5hbWUgKTtcblx0XHR0aGlzLiR3aWRnZXQuYXBwZW5kQ2hpbGQoIHRoaXMuJGJ1dHRvbiApO1xuXG5cdFx0dGhpcy4kYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsIGUgPT4ge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0dGhpcy5nZXRWYWx1ZSgpLmNhbGwoIHRoaXMub2JqZWN0ICk7XG5cdFx0XHR0aGlzLl9jYWxsT25DaGFuZ2UoKTtcblx0XHR9ICk7XG5cblx0XHQvLyBlbmFibGVzIDphY3RpdmUgcHNldWRvIGNsYXNzIG9uIG1vYmlsZVxuXHRcdHRoaXMuJGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCAndG91Y2hzdGFydCcsICgpID0+IHt9LCB7IHBhc3NpdmU6IHRydWUgfSApO1xuXG5cdFx0dGhpcy4kZGlzYWJsZSA9IHRoaXMuJGJ1dHRvbjtcblxuXHR9XG5cbn1cblxuY2xhc3MgTnVtYmVyQ29udHJvbGxlciBleHRlbmRzIENvbnRyb2xsZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJlbnQsIG9iamVjdCwgcHJvcGVydHksIG1pbiwgbWF4LCBzdGVwICkge1xuXG5cdFx0c3VwZXIoIHBhcmVudCwgb2JqZWN0LCBwcm9wZXJ0eSwgJ251bWJlcicgKTtcblxuXHRcdHRoaXMuX2luaXRJbnB1dCgpO1xuXG5cdFx0dGhpcy5taW4oIG1pbiApO1xuXHRcdHRoaXMubWF4KCBtYXggKTtcblxuXHRcdGNvbnN0IHN0ZXBFeHBsaWNpdCA9IHN0ZXAgIT09IHVuZGVmaW5lZDtcblx0XHR0aGlzLnN0ZXAoIHN0ZXBFeHBsaWNpdCA/IHN0ZXAgOiB0aGlzLl9nZXRJbXBsaWNpdFN0ZXAoKSwgc3RlcEV4cGxpY2l0ICk7XG5cblx0XHR0aGlzLnVwZGF0ZURpc3BsYXkoKTtcblxuXHR9XG5cblx0ZGVjaW1hbHMoIGRlY2ltYWxzICkge1xuXHRcdHRoaXMuX2RlY2ltYWxzID0gZGVjaW1hbHM7XG5cdFx0dGhpcy51cGRhdGVEaXNwbGF5KCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRtaW4oIG1pbiApIHtcblx0XHR0aGlzLl9taW4gPSBtaW47XG5cdFx0dGhpcy5fb25VcGRhdGVNaW5NYXgoKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdG1heCggbWF4ICkge1xuXHRcdHRoaXMuX21heCA9IG1heDtcblx0XHR0aGlzLl9vblVwZGF0ZU1pbk1heCgpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0c3RlcCggc3RlcCwgZXhwbGljaXQgPSB0cnVlICkge1xuXHRcdHRoaXMuX3N0ZXAgPSBzdGVwO1xuXHRcdHRoaXMuX3N0ZXBFeHBsaWNpdCA9IGV4cGxpY2l0O1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0dXBkYXRlRGlzcGxheSgpIHtcblxuXHRcdGNvbnN0IHZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xuXG5cdFx0aWYgKCB0aGlzLl9oYXNTbGlkZXIgKSB7XG5cblx0XHRcdGxldCBwZXJjZW50ID0gKCB2YWx1ZSAtIHRoaXMuX21pbiApIC8gKCB0aGlzLl9tYXggLSB0aGlzLl9taW4gKTtcblx0XHRcdHBlcmNlbnQgPSBNYXRoLm1heCggMCwgTWF0aC5taW4oIHBlcmNlbnQsIDEgKSApO1xuXG5cdFx0XHR0aGlzLiRmaWxsLnN0eWxlLndpZHRoID0gcGVyY2VudCAqIDEwMCArICclJztcblxuXHRcdH1cblxuXHRcdGlmICggIXRoaXMuX2lucHV0Rm9jdXNlZCApIHtcblx0XHRcdHRoaXMuJGlucHV0LnZhbHVlID0gdGhpcy5fZGVjaW1hbHMgPT09IHVuZGVmaW5lZCA/IHZhbHVlIDogdmFsdWUudG9GaXhlZCggdGhpcy5fZGVjaW1hbHMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0X2luaXRJbnB1dCgpIHtcblxuXHRcdHRoaXMuJGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2lucHV0JyApO1xuXHRcdHRoaXMuJGlucHV0LnNldEF0dHJpYnV0ZSggJ3R5cGUnLCAndGV4dCcgKTtcblx0XHR0aGlzLiRpbnB1dC5zZXRBdHRyaWJ1dGUoICdhcmlhLWxhYmVsbGVkYnknLCB0aGlzLiRuYW1lLmlkICk7XG5cblx0XHQvLyBPbiB0b3VjaCBkZXZpY2VzIG9ubHksIHVzZSBpbnB1dFt0eXBlPW51bWJlcl0gdG8gZm9yY2UgYSBudW1lcmljIGtleWJvYXJkLlxuXHRcdC8vIElkZWFsbHkgd2UgY291bGQgdXNlIG9uZSBpbnB1dCB0eXBlIGV2ZXJ5d2hlcmUsIGJ1dCBbdHlwZT1udW1iZXJdIGhhcyBxdWlya3Ncblx0XHQvLyBvbiBkZXNrdG9wLCBhbmQgW2lucHV0bW9kZT1kZWNpbWFsXSBoYXMgcXVpcmtzIG9uIGlPUy5cblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2dlb3JnZWFsd2F5cy9saWwtZ3VpL3B1bGwvMTZcblxuXHRcdGNvbnN0IGlzVG91Y2ggPSB3aW5kb3cubWF0Y2hNZWRpYSggJyhwb2ludGVyOiBjb2Fyc2UpJyApLm1hdGNoZXM7XG5cblx0XHRpZiAoIGlzVG91Y2ggKSB7XG5cdFx0XHR0aGlzLiRpbnB1dC5zZXRBdHRyaWJ1dGUoICd0eXBlJywgJ251bWJlcicgKTtcblx0XHRcdHRoaXMuJGlucHV0LnNldEF0dHJpYnV0ZSggJ3N0ZXAnLCAnYW55JyApO1xuXHRcdH1cblxuXHRcdHRoaXMuJHdpZGdldC5hcHBlbmRDaGlsZCggdGhpcy4kaW5wdXQgKTtcblxuXHRcdHRoaXMuJGRpc2FibGUgPSB0aGlzLiRpbnB1dDtcblxuXHRcdGNvbnN0IG9uSW5wdXQgPSAoKSA9PiB7XG5cblx0XHRcdGxldCB2YWx1ZSA9IHBhcnNlRmxvYXQoIHRoaXMuJGlucHV0LnZhbHVlICk7XG5cblx0XHRcdGlmICggaXNOYU4oIHZhbHVlICkgKSByZXR1cm47XG5cblx0XHRcdGlmICggdGhpcy5fc3RlcEV4cGxpY2l0ICkge1xuXHRcdFx0XHR2YWx1ZSA9IHRoaXMuX3NuYXAoIHZhbHVlICk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuc2V0VmFsdWUoIHRoaXMuX2NsYW1wKCB2YWx1ZSApICk7XG5cblx0XHR9O1xuXG5cdFx0Ly8gS2V5cyAmIG1vdXNlIHdoZWVsXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0XHRjb25zdCBpbmNyZW1lbnQgPSBkZWx0YSA9PiB7XG5cblx0XHRcdGNvbnN0IHZhbHVlID0gcGFyc2VGbG9hdCggdGhpcy4kaW5wdXQudmFsdWUgKTtcblxuXHRcdFx0aWYgKCBpc05hTiggdmFsdWUgKSApIHJldHVybjtcblxuXHRcdFx0dGhpcy5fc25hcENsYW1wU2V0VmFsdWUoIHZhbHVlICsgZGVsdGEgKTtcblxuXHRcdFx0Ly8gRm9yY2UgdGhlIGlucHV0IHRvIHVwZGF0ZURpc3BsYXkgd2hlbiBpdCdzIGZvY3VzZWRcblx0XHRcdHRoaXMuJGlucHV0LnZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xuXG5cdFx0fTtcblxuXHRcdGNvbnN0IG9uS2V5RG93biA9IGUgPT4ge1xuXHRcdFx0Ly8gVXNpbmcgYGUua2V5YCBpbnN0ZWFkIG9mIGBlLmNvZGVgIGFsc28gY2F0Y2hlcyBOdW1wYWRFbnRlclxuXHRcdFx0aWYgKCBlLmtleSA9PT0gJ0VudGVyJyApIHtcblx0XHRcdFx0dGhpcy4kaW5wdXQuYmx1cigpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBlLmNvZGUgPT09ICdBcnJvd1VwJyApIHtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRpbmNyZW1lbnQoIHRoaXMuX3N0ZXAgKiB0aGlzLl9hcnJvd0tleU11bHRpcGxpZXIoIGUgKSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBlLmNvZGUgPT09ICdBcnJvd0Rvd24nICkge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdGluY3JlbWVudCggdGhpcy5fc3RlcCAqIHRoaXMuX2Fycm93S2V5TXVsdGlwbGllciggZSApICogLTEgKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Y29uc3Qgb25XaGVlbCA9IGUgPT4ge1xuXHRcdFx0aWYgKCB0aGlzLl9pbnB1dEZvY3VzZWQgKSB7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0aW5jcmVtZW50KCB0aGlzLl9zdGVwICogdGhpcy5fbm9ybWFsaXplTW91c2VXaGVlbCggZSApICk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vIFZlcnRpY2FsIGRyYWdcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRcdGxldCB0ZXN0aW5nRm9yVmVydGljYWxEcmFnID0gZmFsc2UsXG5cdFx0XHRpbml0Q2xpZW50WCxcblx0XHRcdGluaXRDbGllbnRZLFxuXHRcdFx0cHJldkNsaWVudFksXG5cdFx0XHRpbml0VmFsdWUsXG5cdFx0XHRkcmFnRGVsdGE7XG5cblx0XHQvLyBPbmNlIHRoZSBtb3VzZSBpcyBkcmFnZ2VkIG1vcmUgdGhhbiBEUkFHX1RIUkVTSCBweCBvbiBhbnkgYXhpcywgd2UgZGVjaWRlXG5cdFx0Ly8gb24gdGhlIHVzZXIncyBpbnRlbnQ6IGhvcml6b250YWwgbWVhbnMgaGlnaGxpZ2h0LCB2ZXJ0aWNhbCBtZWFucyBkcmFnLlxuXHRcdGNvbnN0IERSQUdfVEhSRVNIID0gNTtcblxuXHRcdGNvbnN0IG9uTW91c2VEb3duID0gZSA9PiB7XG5cblx0XHRcdGluaXRDbGllbnRYID0gZS5jbGllbnRYO1xuXHRcdFx0aW5pdENsaWVudFkgPSBwcmV2Q2xpZW50WSA9IGUuY2xpZW50WTtcblx0XHRcdHRlc3RpbmdGb3JWZXJ0aWNhbERyYWcgPSB0cnVlO1xuXG5cdFx0XHRpbml0VmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7XG5cdFx0XHRkcmFnRGVsdGEgPSAwO1xuXG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlICk7XG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNldXAnLCBvbk1vdXNlVXAgKTtcblxuXHRcdH07XG5cblx0XHRjb25zdCBvbk1vdXNlTW92ZSA9IGUgPT4ge1xuXG5cdFx0XHRpZiAoIHRlc3RpbmdGb3JWZXJ0aWNhbERyYWcgKSB7XG5cblx0XHRcdFx0Y29uc3QgZHggPSBlLmNsaWVudFggLSBpbml0Q2xpZW50WDtcblx0XHRcdFx0Y29uc3QgZHkgPSBlLmNsaWVudFkgLSBpbml0Q2xpZW50WTtcblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBkeSApID4gRFJBR19USFJFU0ggKSB7XG5cblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0dGhpcy4kaW5wdXQuYmx1cigpO1xuXHRcdFx0XHRcdHRlc3RpbmdGb3JWZXJ0aWNhbERyYWcgPSBmYWxzZTtcblx0XHRcdFx0XHR0aGlzLl9zZXREcmFnZ2luZ1N0eWxlKCB0cnVlLCAndmVydGljYWwnICk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggTWF0aC5hYnMoIGR4ICkgPiBEUkFHX1RIUkVTSCApIHtcblxuXHRcdFx0XHRcdG9uTW91c2VVcCgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGlzIGlzbid0IGFuIGVsc2Ugc28gdGhhdCB0aGUgZmlyc3QgbW92ZSBjb3VudHMgdG93YXJkcyBkcmFnRGVsdGFcblx0XHRcdGlmICggIXRlc3RpbmdGb3JWZXJ0aWNhbERyYWcgKSB7XG5cblx0XHRcdFx0Y29uc3QgZHkgPSBlLmNsaWVudFkgLSBwcmV2Q2xpZW50WTtcblxuXHRcdFx0XHRkcmFnRGVsdGEgLT0gZHkgKiB0aGlzLl9zdGVwICogdGhpcy5fYXJyb3dLZXlNdWx0aXBsaWVyKCBlICk7XG5cblx0XHRcdFx0Ly8gQ2xhbXAgZHJhZ0RlbHRhIHNvIHdlIGRvbid0IGhhdmUgJ2RlYWQgc3BhY2UnIGFmdGVyIGRyYWdnaW5nIHBhc3QgYm91bmRzLlxuXHRcdFx0XHQvLyBXZSdyZSBva2F5IHdpdGggdGhlIGZhY3QgdGhhdCBib3VuZHMgY2FuIGJlIHVuZGVmaW5lZCBoZXJlLlxuXHRcdFx0XHRpZiAoIGluaXRWYWx1ZSArIGRyYWdEZWx0YSA+IHRoaXMuX21heCApIHtcblx0XHRcdFx0XHRkcmFnRGVsdGEgPSB0aGlzLl9tYXggLSBpbml0VmFsdWU7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIGluaXRWYWx1ZSArIGRyYWdEZWx0YSA8IHRoaXMuX21pbiApIHtcblx0XHRcdFx0XHRkcmFnRGVsdGEgPSB0aGlzLl9taW4gLSBpbml0VmFsdWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLl9zbmFwQ2xhbXBTZXRWYWx1ZSggaW5pdFZhbHVlICsgZHJhZ0RlbHRhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cHJldkNsaWVudFkgPSBlLmNsaWVudFk7XG5cblx0XHR9O1xuXG5cdFx0Y29uc3Qgb25Nb3VzZVVwID0gKCkgPT4ge1xuXHRcdFx0dGhpcy5fc2V0RHJhZ2dpbmdTdHlsZSggZmFsc2UsICd2ZXJ0aWNhbCcgKTtcblx0XHRcdHRoaXMuX2NhbGxPbkZpbmlzaENoYW5nZSgpO1xuXHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZW1vdmUnLCBvbk1vdXNlTW92ZSApO1xuXHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZXVwJywgb25Nb3VzZVVwICk7XG5cdFx0fTtcblxuXHRcdC8vIEZvY3VzIHN0YXRlICYgb25GaW5pc2hDaGFuZ2Vcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRcdGNvbnN0IG9uRm9jdXMgPSAoKSA9PiB7XG5cdFx0XHR0aGlzLl9pbnB1dEZvY3VzZWQgPSB0cnVlO1xuXHRcdH07XG5cblx0XHRjb25zdCBvbkJsdXIgPSAoKSA9PiB7XG5cdFx0XHR0aGlzLl9pbnB1dEZvY3VzZWQgPSBmYWxzZTtcblx0XHRcdHRoaXMudXBkYXRlRGlzcGxheSgpO1xuXHRcdFx0dGhpcy5fY2FsbE9uRmluaXNoQ2hhbmdlKCk7XG5cdFx0fTtcblxuXHRcdHRoaXMuJGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoICdpbnB1dCcsIG9uSW5wdXQgKTtcblx0XHR0aGlzLiRpbnB1dC5hZGRFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIG9uS2V5RG93biApO1xuXHRcdHRoaXMuJGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoICd3aGVlbCcsIG9uV2hlZWwsIHsgcGFzc2l2ZTogZmFsc2UgfSApO1xuXHRcdHRoaXMuJGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZWRvd24nLCBvbk1vdXNlRG93biApO1xuXHRcdHRoaXMuJGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoICdmb2N1cycsIG9uRm9jdXMgKTtcblx0XHR0aGlzLiRpbnB1dC5hZGRFdmVudExpc3RlbmVyKCAnYmx1cicsIG9uQmx1ciApO1xuXG5cdH1cblxuXHRfaW5pdFNsaWRlcigpIHtcblxuXHRcdHRoaXMuX2hhc1NsaWRlciA9IHRydWU7XG5cblx0XHQvLyBCdWlsZCBET01cblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRcdHRoaXMuJHNsaWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnICk7XG5cdFx0dGhpcy4kc2xpZGVyLmNsYXNzTGlzdC5hZGQoICdzbGlkZXInICk7XG5cblx0XHR0aGlzLiRmaWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicgKTtcblx0XHR0aGlzLiRmaWxsLmNsYXNzTGlzdC5hZGQoICdmaWxsJyApO1xuXG5cdFx0dGhpcy4kc2xpZGVyLmFwcGVuZENoaWxkKCB0aGlzLiRmaWxsICk7XG5cdFx0dGhpcy4kd2lkZ2V0Lmluc2VydEJlZm9yZSggdGhpcy4kc2xpZGVyLCB0aGlzLiRpbnB1dCApO1xuXG5cdFx0dGhpcy5kb21FbGVtZW50LmNsYXNzTGlzdC5hZGQoICdoYXNTbGlkZXInICk7XG5cblx0XHQvLyBNYXAgY2xpZW50WCB0byB2YWx1ZVxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cdFx0Y29uc3QgbWFwID0gKCB2LCBhLCBiLCBjLCBkICkgPT4ge1xuXHRcdFx0cmV0dXJuICggdiAtIGEgKSAvICggYiAtIGEgKSAqICggZCAtIGMgKSArIGM7XG5cdFx0fTtcblxuXHRcdGNvbnN0IHNldFZhbHVlRnJvbVggPSBjbGllbnRYID0+IHtcblx0XHRcdGNvbnN0IHJlY3QgPSB0aGlzLiRzbGlkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0XHRsZXQgdmFsdWUgPSBtYXAoIGNsaWVudFgsIHJlY3QubGVmdCwgcmVjdC5yaWdodCwgdGhpcy5fbWluLCB0aGlzLl9tYXggKTtcblx0XHRcdHRoaXMuX3NuYXBDbGFtcFNldFZhbHVlKCB2YWx1ZSApO1xuXHRcdH07XG5cblx0XHQvLyBNb3VzZSBkcmFnXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0XHRjb25zdCBtb3VzZURvd24gPSBlID0+IHtcblx0XHRcdHRoaXMuX3NldERyYWdnaW5nU3R5bGUoIHRydWUgKTtcblx0XHRcdHNldFZhbHVlRnJvbVgoIGUuY2xpZW50WCApO1xuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZW1vdmUnLCBtb3VzZU1vdmUgKTtcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAnbW91c2V1cCcsIG1vdXNlVXAgKTtcblx0XHR9O1xuXG5cdFx0Y29uc3QgbW91c2VNb3ZlID0gZSA9PiB7XG5cdFx0XHRzZXRWYWx1ZUZyb21YKCBlLmNsaWVudFggKTtcblx0XHR9O1xuXG5cdFx0Y29uc3QgbW91c2VVcCA9ICgpID0+IHtcblx0XHRcdHRoaXMuX2NhbGxPbkZpbmlzaENoYW5nZSgpO1xuXHRcdFx0dGhpcy5fc2V0RHJhZ2dpbmdTdHlsZSggZmFsc2UgKTtcblx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAnbW91c2Vtb3ZlJywgbW91c2VNb3ZlICk7XG5cdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNldXAnLCBtb3VzZVVwICk7XG5cdFx0fTtcblxuXHRcdC8vIFRvdWNoIGRyYWdcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRcdGxldCB0ZXN0aW5nRm9yU2Nyb2xsID0gZmFsc2UsIHByZXZDbGllbnRYLCBwcmV2Q2xpZW50WTtcblxuXHRcdGNvbnN0IGJlZ2luVG91Y2hEcmFnID0gZSA9PiB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR0aGlzLl9zZXREcmFnZ2luZ1N0eWxlKCB0cnVlICk7XG5cdFx0XHRzZXRWYWx1ZUZyb21YKCBlLnRvdWNoZXNbIDAgXS5jbGllbnRYICk7XG5cdFx0XHR0ZXN0aW5nRm9yU2Nyb2xsID0gZmFsc2U7XG5cdFx0fTtcblxuXHRcdGNvbnN0IG9uVG91Y2hTdGFydCA9IGUgPT4ge1xuXG5cdFx0XHRpZiAoIGUudG91Y2hlcy5sZW5ndGggPiAxICkgcmV0dXJuO1xuXG5cdFx0XHQvLyBJZiB3ZSdyZSBpbiBhIHNjcm9sbGFibGUgY29udGFpbmVyLCB3ZSBzaG91bGQgd2FpdCBmb3IgdGhlIGZpcnN0XG5cdFx0XHQvLyB0b3VjaG1vdmUgdG8gc2VlIGlmIHRoZSB1c2VyIGlzIHRyeWluZyB0byBzbGlkZSBvciBzY3JvbGwuXG5cdFx0XHRpZiAoIHRoaXMuX2hhc1Njcm9sbEJhciApIHtcblxuXHRcdFx0XHRwcmV2Q2xpZW50WCA9IGUudG91Y2hlc1sgMCBdLmNsaWVudFg7XG5cdFx0XHRcdHByZXZDbGllbnRZID0gZS50b3VjaGVzWyAwIF0uY2xpZW50WTtcblx0XHRcdFx0dGVzdGluZ0ZvclNjcm9sbCA9IHRydWU7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB3ZSBjYW4gc2V0IHRoZSB2YWx1ZSBzdHJhaWdodCBhd2F5IG9uIHRvdWNoc3RhcnQuXG5cdFx0XHRcdGJlZ2luVG91Y2hEcmFnKCBlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICd0b3VjaG1vdmUnLCBvblRvdWNoTW92ZSwgeyBwYXNzaXZlOiBmYWxzZSB9ICk7XG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ3RvdWNoZW5kJywgb25Ub3VjaEVuZCApO1xuXG5cdFx0fTtcblxuXHRcdGNvbnN0IG9uVG91Y2hNb3ZlID0gZSA9PiB7XG5cblx0XHRcdGlmICggdGVzdGluZ0ZvclNjcm9sbCApIHtcblxuXHRcdFx0XHRjb25zdCBkeCA9IGUudG91Y2hlc1sgMCBdLmNsaWVudFggLSBwcmV2Q2xpZW50WDtcblx0XHRcdFx0Y29uc3QgZHkgPSBlLnRvdWNoZXNbIDAgXS5jbGllbnRZIC0gcHJldkNsaWVudFk7XG5cblx0XHRcdFx0aWYgKCBNYXRoLmFicyggZHggKSA+IE1hdGguYWJzKCBkeSApICkge1xuXG5cdFx0XHRcdFx0Ly8gV2UgbW92ZWQgaG9yaXpvbnRhbGx5LCBzZXQgdGhlIHZhbHVlIGFuZCBzdG9wIGNoZWNraW5nLlxuXHRcdFx0XHRcdGJlZ2luVG91Y2hEcmFnKCBlICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIFRoaXMgd2FzLCBpbiBmYWN0LCBhbiBhdHRlbXB0IHRvIHNjcm9sbC4gQWJvcnQuXG5cdFx0XHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICd0b3VjaG1vdmUnLCBvblRvdWNoTW92ZSApO1xuXHRcdFx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAndG91Y2hlbmQnLCBvblRvdWNoRW5kICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0c2V0VmFsdWVGcm9tWCggZS50b3VjaGVzWyAwIF0uY2xpZW50WCApO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0Y29uc3Qgb25Ub3VjaEVuZCA9ICgpID0+IHtcblx0XHRcdHRoaXMuX2NhbGxPbkZpbmlzaENoYW5nZSgpO1xuXHRcdFx0dGhpcy5fc2V0RHJhZ2dpbmdTdHlsZSggZmFsc2UgKTtcblx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAndG91Y2htb3ZlJywgb25Ub3VjaE1vdmUgKTtcblx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAndG91Y2hlbmQnLCBvblRvdWNoRW5kICk7XG5cdFx0fTtcblxuXHRcdC8vIE1vdXNlIHdoZWVsXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0XHQvLyBXZSBoYXZlIHRvIHVzZSBhIGRlYm91bmNlZCBmdW5jdGlvbiB0byBjYWxsIG9uRmluaXNoQ2hhbmdlIGJlY2F1c2Vcblx0XHQvLyB0aGVyZSdzIG5vIHdheSB0byB0ZWxsIHdoZW4gdGhlIHVzZXIgaXMgXCJkb25lXCIgbW91c2Utd2hlZWxpbmcuXG5cdFx0Y29uc3QgY2FsbE9uRmluaXNoQ2hhbmdlID0gdGhpcy5fY2FsbE9uRmluaXNoQ2hhbmdlLmJpbmQoIHRoaXMgKTtcblx0XHRjb25zdCBXSEVFTF9ERUJPVU5DRV9USU1FID0gNDAwO1xuXHRcdGxldCB3aGVlbEZpbmlzaENoYW5nZVRpbWVvdXQ7XG5cblx0XHRjb25zdCBvbldoZWVsID0gZSA9PiB7XG5cblx0XHRcdC8vIGlnbm9yZSB2ZXJ0aWNhbCB3aGVlbHMgaWYgdGhlcmUncyBhIHNjcm9sbGJhclxuXHRcdFx0Y29uc3QgaXNWZXJ0aWNhbCA9IE1hdGguYWJzKCBlLmRlbHRhWCApIDwgTWF0aC5hYnMoIGUuZGVsdGFZICk7XG5cdFx0XHRpZiAoIGlzVmVydGljYWwgJiYgdGhpcy5faGFzU2Nyb2xsQmFyICkgcmV0dXJuO1xuXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdC8vIHNldCB2YWx1ZVxuXHRcdFx0Y29uc3QgZGVsdGEgPSB0aGlzLl9ub3JtYWxpemVNb3VzZVdoZWVsKCBlICkgKiB0aGlzLl9zdGVwO1xuXHRcdFx0dGhpcy5fc25hcENsYW1wU2V0VmFsdWUoIHRoaXMuZ2V0VmFsdWUoKSArIGRlbHRhICk7XG5cblx0XHRcdC8vIGZvcmNlIHRoZSBpbnB1dCB0byB1cGRhdGVEaXNwbGF5IHdoZW4gaXQncyBmb2N1c2VkXG5cdFx0XHR0aGlzLiRpbnB1dC52YWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTtcblxuXHRcdFx0Ly8gZGVib3VuY2Ugb25GaW5pc2hDaGFuZ2Vcblx0XHRcdGNsZWFyVGltZW91dCggd2hlZWxGaW5pc2hDaGFuZ2VUaW1lb3V0ICk7XG5cdFx0XHR3aGVlbEZpbmlzaENoYW5nZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCBjYWxsT25GaW5pc2hDaGFuZ2UsIFdIRUVMX0RFQk9VTkNFX1RJTUUgKTtcblxuXHRcdH07XG5cblx0XHR0aGlzLiRzbGlkZXIuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlZG93bicsIG1vdXNlRG93biApO1xuXHRcdHRoaXMuJHNsaWRlci5hZGRFdmVudExpc3RlbmVyKCAndG91Y2hzdGFydCcsIG9uVG91Y2hTdGFydCwgeyBwYXNzaXZlOiBmYWxzZSB9ICk7XG5cdFx0dGhpcy4kc2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoICd3aGVlbCcsIG9uV2hlZWwsIHsgcGFzc2l2ZTogZmFsc2UgfSApO1xuXG5cdH1cblxuXHRfc2V0RHJhZ2dpbmdTdHlsZSggYWN0aXZlLCBheGlzID0gJ2hvcml6b250YWwnICkge1xuXHRcdGlmICggdGhpcy4kc2xpZGVyICkge1xuXHRcdFx0dGhpcy4kc2xpZGVyLmNsYXNzTGlzdC50b2dnbGUoICdhY3RpdmUnLCBhY3RpdmUgKTtcblx0XHR9XG5cdFx0ZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QudG9nZ2xlKCAnbGlsLWd1aS1kcmFnZ2luZycsIGFjdGl2ZSApO1xuXHRcdGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnRvZ2dsZSggYGxpbC1ndWktJHtheGlzfWAsIGFjdGl2ZSApO1xuXHR9XG5cblx0X2dldEltcGxpY2l0U3RlcCgpIHtcblxuXHRcdGlmICggdGhpcy5faGFzTWluICYmIHRoaXMuX2hhc01heCApIHtcblx0XHRcdHJldHVybiAoIHRoaXMuX21heCAtIHRoaXMuX21pbiApIC8gMTAwMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gMC4xO1xuXG5cdH1cblxuXHRfb25VcGRhdGVNaW5NYXgoKSB7XG5cblx0XHRpZiAoICF0aGlzLl9oYXNTbGlkZXIgJiYgdGhpcy5faGFzTWluICYmIHRoaXMuX2hhc01heCApIHtcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSB3ZSdyZSBoZWFyaW5nIGFib3V0IG1pbiBhbmQgbWF4XG5cdFx0XHQvLyBhbmQgd2UgaGF2ZW4ndCBleHBsaWNpdGx5IHN0YXRlZCB3aGF0IG91ciBzdGVwIGlzLCBsZXQnc1xuXHRcdFx0Ly8gdXBkYXRlIHRoYXQgdG9vLlxuXHRcdFx0aWYgKCAhdGhpcy5fc3RlcEV4cGxpY2l0ICkge1xuXHRcdFx0XHR0aGlzLnN0ZXAoIHRoaXMuX2dldEltcGxpY2l0U3RlcCgpLCBmYWxzZSApO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9pbml0U2xpZGVyKCk7XG5cdFx0XHR0aGlzLnVwZGF0ZURpc3BsYXkoKTtcblxuXHRcdH1cblxuXHR9XG5cblx0X25vcm1hbGl6ZU1vdXNlV2hlZWwoIGUgKSB7XG5cblx0XHRsZXQgeyBkZWx0YVgsIGRlbHRhWSB9ID0gZTtcblxuXHRcdC8vIFNhZmFyaSBhbmQgQ2hyb21lIHJlcG9ydCB3ZWlyZCBub24taW50ZWdyYWwgdmFsdWVzIGZvciBhIG5vdGNoZWQgd2hlZWwsXG5cdFx0Ly8gYnV0IHN0aWxsIGV4cG9zZSBhY3R1YWwgbGluZXMgc2Nyb2xsZWQgdmlhIHdoZWVsRGVsdGEuIE5vdGNoZWQgd2hlZWxzXG5cdFx0Ly8gc2hvdWxkIGJlaGF2ZSB0aGUgc2FtZSB3YXkgYXMgYXJyb3cga2V5cy5cblx0XHRpZiAoIE1hdGguZmxvb3IoIGUuZGVsdGFZICkgIT09IGUuZGVsdGFZICYmIGUud2hlZWxEZWx0YSApIHtcblx0XHRcdGRlbHRhWCA9IDA7XG5cdFx0XHRkZWx0YVkgPSAtZS53aGVlbERlbHRhIC8gMTIwO1xuXHRcdFx0ZGVsdGFZICo9IHRoaXMuX3N0ZXBFeHBsaWNpdCA/IDEgOiAxMDtcblx0XHR9XG5cblx0XHRjb25zdCB3aGVlbCA9IGRlbHRhWCArIC1kZWx0YVk7XG5cblx0XHRyZXR1cm4gd2hlZWw7XG5cblx0fVxuXG5cdF9hcnJvd0tleU11bHRpcGxpZXIoIGUgKSB7XG5cblx0XHRsZXQgbXVsdCA9IHRoaXMuX3N0ZXBFeHBsaWNpdCA/IDEgOiAxMDtcblxuXHRcdGlmICggZS5zaGlmdEtleSApIHtcblx0XHRcdG11bHQgKj0gMTA7XG5cdFx0fSBlbHNlIGlmICggZS5hbHRLZXkgKSB7XG5cdFx0XHRtdWx0IC89IDEwO1xuXHRcdH1cblxuXHRcdHJldHVybiBtdWx0O1xuXG5cdH1cblxuXHRfc25hcCggdmFsdWUgKSB7XG5cblx0XHQvLyBUaGlzIHdvdWxkIGJlIHRoZSBsb2dpY2FsIHdheSB0byBkbyB0aGluZ3MsIGJ1dCBmbG9hdGluZyBwb2ludCBlcnJvcnMuXG5cdFx0Ly8gcmV0dXJuIE1hdGgucm91bmQoIHZhbHVlIC8gdGhpcy5fc3RlcCApICogdGhpcy5fc3RlcDtcblxuXHRcdC8vIFVzaW5nIGludmVyc2Ugc3RlcCBzb2x2ZXMgYSBsb3Qgb2YgdGhlbSwgYnV0IG5vdCBhbGxcblx0XHQvLyBjb25zdCBpbnZlcnNlU3RlcCA9IDEgLyB0aGlzLl9zdGVwO1xuXHRcdC8vIHJldHVybiBNYXRoLnJvdW5kKCB2YWx1ZSAqIGludmVyc2VTdGVwICkgLyBpbnZlcnNlU3RlcDtcblxuXHRcdC8vIE5vdCBoYXBweSBhYm91dCB0aGlzLCBidXQgaGF2ZW4ndCBzZWVuIGl0IGJyZWFrLlxuXHRcdGNvbnN0IHIgPSBNYXRoLnJvdW5kKCB2YWx1ZSAvIHRoaXMuX3N0ZXAgKSAqIHRoaXMuX3N0ZXA7XG5cdFx0cmV0dXJuIHBhcnNlRmxvYXQoIHIudG9QcmVjaXNpb24oIDE1ICkgKTtcblxuXHR9XG5cblx0X2NsYW1wKCB2YWx1ZSApIHtcblx0XHQvLyBlaXRoZXIgY29uZGl0aW9uIGlzIGZhbHNlIGlmIG1pbiBvciBtYXggaXMgdW5kZWZpbmVkXG5cdFx0aWYgKCB2YWx1ZSA8IHRoaXMuX21pbiApIHZhbHVlID0gdGhpcy5fbWluO1xuXHRcdGlmICggdmFsdWUgPiB0aGlzLl9tYXggKSB2YWx1ZSA9IHRoaXMuX21heDtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblxuXHRfc25hcENsYW1wU2V0VmFsdWUoIHZhbHVlICkge1xuXHRcdHRoaXMuc2V0VmFsdWUoIHRoaXMuX2NsYW1wKCB0aGlzLl9zbmFwKCB2YWx1ZSApICkgKTtcblx0fVxuXG5cdGdldCBfaGFzU2Nyb2xsQmFyKCkge1xuXHRcdGNvbnN0IHJvb3QgPSB0aGlzLnBhcmVudC5yb290LiRjaGlsZHJlbjtcblx0XHRyZXR1cm4gcm9vdC5zY3JvbGxIZWlnaHQgPiByb290LmNsaWVudEhlaWdodDtcblx0fVxuXG5cdGdldCBfaGFzTWluKCkge1xuXHRcdHJldHVybiB0aGlzLl9taW4gIT09IHVuZGVmaW5lZDtcblx0fVxuXG5cdGdldCBfaGFzTWF4KCkge1xuXHRcdHJldHVybiB0aGlzLl9tYXggIT09IHVuZGVmaW5lZDtcblx0fVxuXG59XG5cbmNsYXNzIE9wdGlvbkNvbnRyb2xsZXIgZXh0ZW5kcyBDb250cm9sbGVyIHtcblxuXHRjb25zdHJ1Y3RvciggcGFyZW50LCBvYmplY3QsIHByb3BlcnR5LCBvcHRpb25zICkge1xuXG5cdFx0c3VwZXIoIHBhcmVudCwgb2JqZWN0LCBwcm9wZXJ0eSwgJ29wdGlvbicgKTtcblxuXHRcdHRoaXMuJHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdzZWxlY3QnICk7XG5cdFx0dGhpcy4kc2VsZWN0LnNldEF0dHJpYnV0ZSggJ2FyaWEtbGFiZWxsZWRieScsIHRoaXMuJG5hbWUuaWQgKTtcblxuXHRcdHRoaXMuJGRpc3BsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApO1xuXHRcdHRoaXMuJGRpc3BsYXkuY2xhc3NMaXN0LmFkZCggJ2Rpc3BsYXknICk7XG5cblx0XHR0aGlzLiRzZWxlY3QuYWRkRXZlbnRMaXN0ZW5lciggJ2NoYW5nZScsICgpID0+IHtcblx0XHRcdHRoaXMuc2V0VmFsdWUoIHRoaXMuX3ZhbHVlc1sgdGhpcy4kc2VsZWN0LnNlbGVjdGVkSW5kZXggXSApO1xuXHRcdFx0dGhpcy5fY2FsbE9uRmluaXNoQ2hhbmdlKCk7XG5cdFx0fSApO1xuXG5cdFx0dGhpcy4kc2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoICdmb2N1cycsICgpID0+IHtcblx0XHRcdHRoaXMuJGRpc3BsYXkuY2xhc3NMaXN0LmFkZCggJ2ZvY3VzJyApO1xuXHRcdH0gKTtcblxuXHRcdHRoaXMuJHNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCAnYmx1cicsICgpID0+IHtcblx0XHRcdHRoaXMuJGRpc3BsYXkuY2xhc3NMaXN0LnJlbW92ZSggJ2ZvY3VzJyApO1xuXHRcdH0gKTtcblxuXHRcdHRoaXMuJHdpZGdldC5hcHBlbmRDaGlsZCggdGhpcy4kc2VsZWN0ICk7XG5cdFx0dGhpcy4kd2lkZ2V0LmFwcGVuZENoaWxkKCB0aGlzLiRkaXNwbGF5ICk7XG5cblx0XHR0aGlzLiRkaXNhYmxlID0gdGhpcy4kc2VsZWN0O1xuXG5cdFx0dGhpcy5vcHRpb25zKCBvcHRpb25zICk7XG5cblx0fVxuXG5cdG9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cblx0XHR0aGlzLl92YWx1ZXMgPSBBcnJheS5pc0FycmF5KCBvcHRpb25zICkgPyBvcHRpb25zIDogT2JqZWN0LnZhbHVlcyggb3B0aW9ucyApO1xuXHRcdHRoaXMuX25hbWVzID0gQXJyYXkuaXNBcnJheSggb3B0aW9ucyApID8gb3B0aW9ucyA6IE9iamVjdC5rZXlzKCBvcHRpb25zICk7XG5cblx0XHR0aGlzLiRzZWxlY3QucmVwbGFjZUNoaWxkcmVuKCk7XG5cblx0XHR0aGlzLl9uYW1lcy5mb3JFYWNoKCBuYW1lID0+IHtcblx0XHRcdGNvbnN0ICRvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnb3B0aW9uJyApO1xuXHRcdFx0JG9wdGlvbi50ZXh0Q29udGVudCA9IG5hbWU7XG5cdFx0XHR0aGlzLiRzZWxlY3QuYXBwZW5kQ2hpbGQoICRvcHRpb24gKTtcblx0XHR9ICk7XG5cblx0XHR0aGlzLnVwZGF0ZURpc3BsYXkoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR1cGRhdGVEaXNwbGF5KCkge1xuXHRcdGNvbnN0IHZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xuXHRcdGNvbnN0IGluZGV4ID0gdGhpcy5fdmFsdWVzLmluZGV4T2YoIHZhbHVlICk7XG5cdFx0dGhpcy4kc2VsZWN0LnNlbGVjdGVkSW5kZXggPSBpbmRleDtcblx0XHR0aGlzLiRkaXNwbGF5LnRleHRDb250ZW50ID0gaW5kZXggPT09IC0xID8gdmFsdWUgOiB0aGlzLl9uYW1lc1sgaW5kZXggXTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG59XG5cbmNsYXNzIFN0cmluZ0NvbnRyb2xsZXIgZXh0ZW5kcyBDb250cm9sbGVyIHtcblxuXHRjb25zdHJ1Y3RvciggcGFyZW50LCBvYmplY3QsIHByb3BlcnR5ICkge1xuXG5cdFx0c3VwZXIoIHBhcmVudCwgb2JqZWN0LCBwcm9wZXJ0eSwgJ3N0cmluZycgKTtcblxuXHRcdHRoaXMuJGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2lucHV0JyApO1xuXHRcdHRoaXMuJGlucHV0LnNldEF0dHJpYnV0ZSggJ3R5cGUnLCAndGV4dCcgKTtcblx0XHR0aGlzLiRpbnB1dC5zZXRBdHRyaWJ1dGUoICdzcGVsbGNoZWNrJywgJ2ZhbHNlJyApO1xuXHRcdHRoaXMuJGlucHV0LnNldEF0dHJpYnV0ZSggJ2FyaWEtbGFiZWxsZWRieScsIHRoaXMuJG5hbWUuaWQgKTtcblxuXHRcdHRoaXMuJGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoICdpbnB1dCcsICgpID0+IHtcblx0XHRcdHRoaXMuc2V0VmFsdWUoIHRoaXMuJGlucHV0LnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdFx0dGhpcy4kaW5wdXQuYWRkRXZlbnRMaXN0ZW5lciggJ2tleWRvd24nLCBlID0+IHtcblx0XHRcdGlmICggZS5jb2RlID09PSAnRW50ZXInICkge1xuXHRcdFx0XHR0aGlzLiRpbnB1dC5ibHVyKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0dGhpcy4kaW5wdXQuYWRkRXZlbnRMaXN0ZW5lciggJ2JsdXInLCAoKSA9PiB7XG5cdFx0XHR0aGlzLl9jYWxsT25GaW5pc2hDaGFuZ2UoKTtcblx0XHR9ICk7XG5cblx0XHR0aGlzLiR3aWRnZXQuYXBwZW5kQ2hpbGQoIHRoaXMuJGlucHV0ICk7XG5cblx0XHR0aGlzLiRkaXNhYmxlID0gdGhpcy4kaW5wdXQ7XG5cblx0XHR0aGlzLnVwZGF0ZURpc3BsYXkoKTtcblxuXHR9XG5cblx0dXBkYXRlRGlzcGxheSgpIHtcblx0XHR0aGlzLiRpbnB1dC52YWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG59XG5cbmNvbnN0IHN0eWxlc2hlZXQgPSBgLmxpbC1ndWkge1xuICBmb250LWZhbWlseTogdmFyKC0tZm9udC1mYW1pbHkpO1xuICBmb250LXNpemU6IHZhcigtLWZvbnQtc2l6ZSk7XG4gIGxpbmUtaGVpZ2h0OiAxO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIHRleHQtYWxpZ246IGxlZnQ7XG4gIGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yKTtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XG4gIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uO1xuICAtLWJhY2tncm91bmQtY29sb3I6ICMxZjFmMWY7XG4gIC0tdGV4dC1jb2xvcjogI2ViZWJlYjtcbiAgLS10aXRsZS1iYWNrZ3JvdW5kLWNvbG9yOiAjMTExMTExO1xuICAtLXRpdGxlLXRleHQtY29sb3I6ICNlYmViZWI7XG4gIC0td2lkZ2V0LWNvbG9yOiAjNDI0MjQyO1xuICAtLWhvdmVyLWNvbG9yOiAjNGY0ZjRmO1xuICAtLWZvY3VzLWNvbG9yOiAjNTk1OTU5O1xuICAtLW51bWJlci1jb2xvcjogIzJjYzlmZjtcbiAgLS1zdHJpbmctY29sb3I6ICNhMmRiM2M7XG4gIC0tZm9udC1zaXplOiAxMXB4O1xuICAtLWlucHV0LWZvbnQtc2l6ZTogMTFweDtcbiAgLS1mb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcIlNlZ29lIFVJXCIsIFJvYm90bywgQXJpYWwsIHNhbnMtc2VyaWY7XG4gIC0tZm9udC1mYW1pbHktbW9ubzogTWVubG8sIE1vbmFjbywgQ29uc29sYXMsIFwiRHJvaWQgU2FucyBNb25vXCIsIG1vbm9zcGFjZTtcbiAgLS1wYWRkaW5nOiA0cHg7XG4gIC0tc3BhY2luZzogNHB4O1xuICAtLXdpZGdldC1oZWlnaHQ6IDIwcHg7XG4gIC0tdGl0bGUtaGVpZ2h0OiBjYWxjKHZhcigtLXdpZGdldC1oZWlnaHQpICsgdmFyKC0tc3BhY2luZykgKiAxLjI1KTtcbiAgLS1uYW1lLXdpZHRoOiA0NSU7XG4gIC0tc2xpZGVyLWtub2Itd2lkdGg6IDJweDtcbiAgLS1zbGlkZXItaW5wdXQtd2lkdGg6IDI3JTtcbiAgLS1jb2xvci1pbnB1dC13aWR0aDogMjclO1xuICAtLXNsaWRlci1pbnB1dC1taW4td2lkdGg6IDQ1cHg7XG4gIC0tY29sb3ItaW5wdXQtbWluLXdpZHRoOiA0NXB4O1xuICAtLWZvbGRlci1pbmRlbnQ6IDdweDtcbiAgLS13aWRnZXQtcGFkZGluZzogMCAwIDAgM3B4O1xuICAtLXdpZGdldC1ib3JkZXItcmFkaXVzOiAycHg7XG4gIC0tY2hlY2tib3gtc2l6ZTogY2FsYygwLjc1ICogdmFyKC0td2lkZ2V0LWhlaWdodCkpO1xuICAtLXNjcm9sbGJhci13aWR0aDogNXB4O1xufVxuLmxpbC1ndWksIC5saWwtZ3VpICoge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG59XG4ubGlsLWd1aS5yb290IHtcbiAgd2lkdGg6IHZhcigtLXdpZHRoLCAyNDVweCk7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtY29sb3IpO1xufVxuLmxpbC1ndWkucm9vdCA+IC50aXRsZSB7XG4gIGJhY2tncm91bmQ6IHZhcigtLXRpdGxlLWJhY2tncm91bmQtY29sb3IpO1xuICBjb2xvcjogdmFyKC0tdGl0bGUtdGV4dC1jb2xvcik7XG59XG4ubGlsLWd1aS5yb290ID4gLmNoaWxkcmVuIHtcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICBvdmVyZmxvdy15OiBhdXRvO1xufVxuLmxpbC1ndWkucm9vdCA+IC5jaGlsZHJlbjo6LXdlYmtpdC1zY3JvbGxiYXIge1xuICB3aWR0aDogdmFyKC0tc2Nyb2xsYmFyLXdpZHRoKTtcbiAgaGVpZ2h0OiB2YXIoLS1zY3JvbGxiYXItd2lkdGgpO1xuICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLWNvbG9yKTtcbn1cbi5saWwtZ3VpLnJvb3QgPiAuY2hpbGRyZW46Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tc2Nyb2xsYmFyLXdpZHRoKTtcbiAgYmFja2dyb3VuZDogdmFyKC0tZm9jdXMtY29sb3IpO1xufVxuQG1lZGlhIChwb2ludGVyOiBjb2Fyc2UpIHtcbiAgLmxpbC1ndWkuYWxsb3ctdG91Y2gtc3R5bGVzLCAubGlsLWd1aS5hbGxvdy10b3VjaC1zdHlsZXMgLmxpbC1ndWkge1xuICAgIC0td2lkZ2V0LWhlaWdodDogMjhweDtcbiAgICAtLXBhZGRpbmc6IDZweDtcbiAgICAtLXNwYWNpbmc6IDZweDtcbiAgICAtLWZvbnQtc2l6ZTogMTNweDtcbiAgICAtLWlucHV0LWZvbnQtc2l6ZTogMTZweDtcbiAgICAtLWZvbGRlci1pbmRlbnQ6IDEwcHg7XG4gICAgLS1zY3JvbGxiYXItd2lkdGg6IDdweDtcbiAgICAtLXNsaWRlci1pbnB1dC1taW4td2lkdGg6IDUwcHg7XG4gICAgLS1jb2xvci1pbnB1dC1taW4td2lkdGg6IDY1cHg7XG4gIH1cbn1cbi5saWwtZ3VpLmZvcmNlLXRvdWNoLXN0eWxlcywgLmxpbC1ndWkuZm9yY2UtdG91Y2gtc3R5bGVzIC5saWwtZ3VpIHtcbiAgLS13aWRnZXQtaGVpZ2h0OiAyOHB4O1xuICAtLXBhZGRpbmc6IDZweDtcbiAgLS1zcGFjaW5nOiA2cHg7XG4gIC0tZm9udC1zaXplOiAxM3B4O1xuICAtLWlucHV0LWZvbnQtc2l6ZTogMTZweDtcbiAgLS1mb2xkZXItaW5kZW50OiAxMHB4O1xuICAtLXNjcm9sbGJhci13aWR0aDogN3B4O1xuICAtLXNsaWRlci1pbnB1dC1taW4td2lkdGg6IDUwcHg7XG4gIC0tY29sb3ItaW5wdXQtbWluLXdpZHRoOiA2NXB4O1xufVxuLmxpbC1ndWkuYXV0b1BsYWNlIHtcbiAgbWF4LWhlaWdodDogMTAwJTtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB0b3A6IDA7XG4gIHJpZ2h0OiAxNXB4O1xuICB6LWluZGV4OiAxMDAxO1xufVxuXG4ubGlsLWd1aSAuY29udHJvbGxlciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHBhZGRpbmc6IDAgdmFyKC0tcGFkZGluZyk7XG4gIG1hcmdpbjogdmFyKC0tc3BhY2luZykgMDtcbn1cbi5saWwtZ3VpIC5jb250cm9sbGVyLmRpc2FibGVkIHtcbiAgb3BhY2l0eTogMC41O1xufVxuLmxpbC1ndWkgLmNvbnRyb2xsZXIuZGlzYWJsZWQsIC5saWwtZ3VpIC5jb250cm9sbGVyLmRpc2FibGVkICoge1xuICBwb2ludGVyLWV2ZW50czogbm9uZSAhaW1wb3J0YW50O1xufVxuLmxpbC1ndWkgLmNvbnRyb2xsZXIgPiAubmFtZSB7XG4gIG1pbi13aWR0aDogdmFyKC0tbmFtZS13aWR0aCk7XG4gIGZsZXgtc2hyaW5rOiAwO1xuICB3aGl0ZS1zcGFjZTogcHJlO1xuICBwYWRkaW5nLXJpZ2h0OiB2YXIoLS1zcGFjaW5nKTtcbiAgbGluZS1oZWlnaHQ6IHZhcigtLXdpZGdldC1oZWlnaHQpO1xufVxuLmxpbC1ndWkgLmNvbnRyb2xsZXIgLndpZGdldCB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgd2lkdGg6IDEwMCU7XG4gIG1pbi1oZWlnaHQ6IHZhcigtLXdpZGdldC1oZWlnaHQpO1xufVxuLmxpbC1ndWkgLmNvbnRyb2xsZXIuc3RyaW5nIGlucHV0IHtcbiAgY29sb3I6IHZhcigtLXN0cmluZy1jb2xvcik7XG59XG4ubGlsLWd1aSAuY29udHJvbGxlci5ib29sZWFuIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuLmxpbC1ndWkgLmNvbnRyb2xsZXIuY29sb3IgLmRpc3BsYXkge1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiB2YXIoLS13aWRnZXQtaGVpZ2h0KTtcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0td2lkZ2V0LWJvcmRlci1yYWRpdXMpO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5AbWVkaWEgKGhvdmVyOiBob3Zlcikge1xuICAubGlsLWd1aSAuY29udHJvbGxlci5jb2xvciAuZGlzcGxheTpob3ZlcjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6IFwiIFwiO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS13aWRnZXQtYm9yZGVyLXJhZGl1cyk7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2ZmZjk7XG4gICAgdG9wOiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIGJvdHRvbTogMDtcbiAgICBsZWZ0OiAwO1xuICB9XG59XG4ubGlsLWd1aSAuY29udHJvbGxlci5jb2xvciBpbnB1dFt0eXBlPWNvbG9yXSB7XG4gIG9wYWNpdHk6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cbi5saWwtZ3VpIC5jb250cm9sbGVyLmNvbG9yIGlucHV0W3R5cGU9dGV4dF0ge1xuICBtYXJnaW4tbGVmdDogdmFyKC0tc3BhY2luZyk7XG4gIGZvbnQtZmFtaWx5OiB2YXIoLS1mb250LWZhbWlseS1tb25vKTtcbiAgbWluLXdpZHRoOiB2YXIoLS1jb2xvci1pbnB1dC1taW4td2lkdGgpO1xuICB3aWR0aDogdmFyKC0tY29sb3ItaW5wdXQtd2lkdGgpO1xuICBmbGV4LXNocmluazogMDtcbn1cbi5saWwtZ3VpIC5jb250cm9sbGVyLm9wdGlvbiBzZWxlY3Qge1xuICBvcGFjaXR5OiAwO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdpZHRoOiAxMDAlO1xuICBtYXgtd2lkdGg6IDEwMCU7XG59XG4ubGlsLWd1aSAuY29udHJvbGxlci5vcHRpb24gLmRpc3BsYXkge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICBib3JkZXItcmFkaXVzOiB2YXIoLS13aWRnZXQtYm9yZGVyLXJhZGl1cyk7XG4gIGhlaWdodDogdmFyKC0td2lkZ2V0LWhlaWdodCk7XG4gIGxpbmUtaGVpZ2h0OiB2YXIoLS13aWRnZXQtaGVpZ2h0KTtcbiAgbWF4LXdpZHRoOiAxMDAlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XG4gIHBhZGRpbmctbGVmdDogMC41NWVtO1xuICBwYWRkaW5nLXJpZ2h0OiAxLjc1ZW07XG4gIGJhY2tncm91bmQ6IHZhcigtLXdpZGdldC1jb2xvcik7XG59XG5AbWVkaWEgKGhvdmVyOiBob3Zlcikge1xuICAubGlsLWd1aSAuY29udHJvbGxlci5vcHRpb24gLmRpc3BsYXkuZm9jdXMge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWZvY3VzLWNvbG9yKTtcbiAgfVxufVxuLmxpbC1ndWkgLmNvbnRyb2xsZXIub3B0aW9uIC5kaXNwbGF5LmFjdGl2ZSB7XG4gIGJhY2tncm91bmQ6IHZhcigtLWZvY3VzLWNvbG9yKTtcbn1cbi5saWwtZ3VpIC5jb250cm9sbGVyLm9wdGlvbiAuZGlzcGxheTphZnRlciB7XG4gIGZvbnQtZmFtaWx5OiBcImxpbC1ndWlcIjtcbiAgY29udGVudDogXCLihpVcIjtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIHJpZ2h0OiAwO1xuICBib3R0b206IDA7XG4gIHBhZGRpbmctcmlnaHQ6IDAuMzc1ZW07XG59XG4ubGlsLWd1aSAuY29udHJvbGxlci5vcHRpb24gLndpZGdldCxcbi5saWwtZ3VpIC5jb250cm9sbGVyLm9wdGlvbiBzZWxlY3Qge1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG5AbWVkaWEgKGhvdmVyOiBob3Zlcikge1xuICAubGlsLWd1aSAuY29udHJvbGxlci5vcHRpb24gLndpZGdldDpob3ZlciAuZGlzcGxheSB7XG4gICAgYmFja2dyb3VuZDogdmFyKC0taG92ZXItY29sb3IpO1xuICB9XG59XG4ubGlsLWd1aSAuY29udHJvbGxlci5udW1iZXIgaW5wdXQge1xuICBjb2xvcjogdmFyKC0tbnVtYmVyLWNvbG9yKTtcbn1cbi5saWwtZ3VpIC5jb250cm9sbGVyLm51bWJlci5oYXNTbGlkZXIgaW5wdXQge1xuICBtYXJnaW4tbGVmdDogdmFyKC0tc3BhY2luZyk7XG4gIHdpZHRoOiB2YXIoLS1zbGlkZXItaW5wdXQtd2lkdGgpO1xuICBtaW4td2lkdGg6IHZhcigtLXNsaWRlci1pbnB1dC1taW4td2lkdGgpO1xuICBmbGV4LXNocmluazogMDtcbn1cbi5saWwtZ3VpIC5jb250cm9sbGVyLm51bWJlciAuc2xpZGVyIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogdmFyKC0td2lkZ2V0LWhlaWdodCk7XG4gIGJhY2tncm91bmQ6IHZhcigtLXdpZGdldC1jb2xvcik7XG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLXdpZGdldC1ib3JkZXItcmFkaXVzKTtcbiAgcGFkZGluZy1yaWdodDogdmFyKC0tc2xpZGVyLWtub2Itd2lkdGgpO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBjdXJzb3I6IGV3LXJlc2l6ZTtcbiAgdG91Y2gtYWN0aW9uOiBwYW4teTtcbn1cbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSB7XG4gIC5saWwtZ3VpIC5jb250cm9sbGVyLm51bWJlciAuc2xpZGVyOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1ob3Zlci1jb2xvcik7XG4gIH1cbn1cbi5saWwtZ3VpIC5jb250cm9sbGVyLm51bWJlciAuc2xpZGVyLmFjdGl2ZSB7XG4gIGJhY2tncm91bmQ6IHZhcigtLWZvY3VzLWNvbG9yKTtcbn1cbi5saWwtZ3VpIC5jb250cm9sbGVyLm51bWJlciAuc2xpZGVyLmFjdGl2ZSAuZmlsbCB7XG4gIG9wYWNpdHk6IDAuOTU7XG59XG4ubGlsLWd1aSAuY29udHJvbGxlci5udW1iZXIgLmZpbGwge1xuICBoZWlnaHQ6IDEwMCU7XG4gIGJvcmRlci1yaWdodDogdmFyKC0tc2xpZGVyLWtub2Itd2lkdGgpIHNvbGlkIHZhcigtLW51bWJlci1jb2xvcik7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xufVxuXG4ubGlsLWd1aS1kcmFnZ2luZyAubGlsLWd1aSB7XG4gIC0taG92ZXItY29sb3I6IHZhcigtLXdpZGdldC1jb2xvcik7XG59XG4ubGlsLWd1aS1kcmFnZ2luZyAqIHtcbiAgY3Vyc29yOiBldy1yZXNpemUgIWltcG9ydGFudDtcbn1cblxuLmxpbC1ndWktZHJhZ2dpbmcubGlsLWd1aS12ZXJ0aWNhbCAqIHtcbiAgY3Vyc29yOiBucy1yZXNpemUgIWltcG9ydGFudDtcbn1cblxuLmxpbC1ndWkgLnRpdGxlIHtcbiAgaGVpZ2h0OiB2YXIoLS10aXRsZS1oZWlnaHQpO1xuICBsaW5lLWhlaWdodDogY2FsYyh2YXIoLS10aXRsZS1oZWlnaHQpIC0gNHB4KTtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgcGFkZGluZzogMCB2YXIoLS1wYWRkaW5nKTtcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBvdXRsaW5lOiBub25lO1xuICB0ZXh0LWRlY29yYXRpb24tc2tpcDogb2JqZWN0cztcbn1cbi5saWwtZ3VpIC50aXRsZTpiZWZvcmUge1xuICBmb250LWZhbWlseTogXCJsaWwtZ3VpXCI7XG4gIGNvbnRlbnQ6IFwi4pa+XCI7XG4gIHBhZGRpbmctcmlnaHQ6IDJweDtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xufVxuLmxpbC1ndWkgLnRpdGxlOmFjdGl2ZSB7XG4gIGJhY2tncm91bmQ6IHZhcigtLXRpdGxlLWJhY2tncm91bmQtY29sb3IpO1xuICBvcGFjaXR5OiAwLjc1O1xufVxuQG1lZGlhIChob3ZlcjogaG92ZXIpIHtcbiAgYm9keTpub3QoLmxpbC1ndWktZHJhZ2dpbmcpIC5saWwtZ3VpIC50aXRsZTpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogdmFyKC0tdGl0bGUtYmFja2dyb3VuZC1jb2xvcik7XG4gICAgb3BhY2l0eTogMC44NTtcbiAgfVxuICAubGlsLWd1aSAudGl0bGU6Zm9jdXMge1xuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIHZhcigtLWZvY3VzLWNvbG9yKTtcbiAgfVxufVxuLmxpbC1ndWkucm9vdCA+IC50aXRsZTpmb2N1cyB7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZSAhaW1wb3J0YW50O1xufVxuLmxpbC1ndWkuY2xvc2VkID4gLnRpdGxlOmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwi4pa4XCI7XG59XG4ubGlsLWd1aS5jbG9zZWQgPiAuY2hpbGRyZW4ge1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTdweCk7XG4gIG9wYWNpdHk6IDA7XG59XG4ubGlsLWd1aS5jbG9zZWQ6bm90KC50cmFuc2l0aW9uKSA+IC5jaGlsZHJlbiB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG4ubGlsLWd1aS50cmFuc2l0aW9uID4gLmNoaWxkcmVuIHtcbiAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMzAwbXM7XG4gIHRyYW5zaXRpb24tcHJvcGVydHk6IGhlaWdodCwgb3BhY2l0eSwgdHJhbnNmb3JtO1xuICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMiwgMC42LCAwLjM1LCAxKTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG59XG4ubGlsLWd1aSAuY2hpbGRyZW46ZW1wdHk6YmVmb3JlIHtcbiAgY29udGVudDogXCJFbXB0eVwiO1xuICBwYWRkaW5nOiAwIHZhcigtLXBhZGRpbmcpO1xuICBtYXJnaW46IHZhcigtLXNwYWNpbmcpIDA7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBoZWlnaHQ6IHZhcigtLXdpZGdldC1oZWlnaHQpO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIGxpbmUtaGVpZ2h0OiB2YXIoLS13aWRnZXQtaGVpZ2h0KTtcbiAgb3BhY2l0eTogMC41O1xufVxuLmxpbC1ndWkucm9vdCA+IC5jaGlsZHJlbiA+IC5saWwtZ3VpID4gLnRpdGxlIHtcbiAgYm9yZGVyOiAwIHNvbGlkIHZhcigtLXdpZGdldC1jb2xvcik7XG4gIGJvcmRlci13aWR0aDogMXB4IDA7XG4gIHRyYW5zaXRpb246IGJvcmRlci1jb2xvciAzMDBtcztcbn1cbi5saWwtZ3VpLnJvb3QgPiAuY2hpbGRyZW4gPiAubGlsLWd1aS5jbG9zZWQgPiAudGl0bGUge1xuICBib3JkZXItYm90dG9tLWNvbG9yOiB0cmFuc3BhcmVudDtcbn1cbi5saWwtZ3VpICsgLmNvbnRyb2xsZXIge1xuICBib3JkZXItdG9wOiAxcHggc29saWQgdmFyKC0td2lkZ2V0LWNvbG9yKTtcbiAgbWFyZ2luLXRvcDogMDtcbiAgcGFkZGluZy10b3A6IHZhcigtLXNwYWNpbmcpO1xufVxuLmxpbC1ndWkgLmxpbC1ndWkgLmxpbC1ndWkgPiAudGl0bGUge1xuICBib3JkZXI6IG5vbmU7XG59XG4ubGlsLWd1aSAubGlsLWd1aSAubGlsLWd1aSA+IC5jaGlsZHJlbiB7XG4gIGJvcmRlcjogbm9uZTtcbiAgbWFyZ2luLWxlZnQ6IHZhcigtLWZvbGRlci1pbmRlbnQpO1xuICBib3JkZXItbGVmdDogMnB4IHNvbGlkIHZhcigtLXdpZGdldC1jb2xvcik7XG59XG4ubGlsLWd1aSAubGlsLWd1aSAuY29udHJvbGxlciB7XG4gIGJvcmRlcjogbm9uZTtcbn1cblxuLmxpbC1ndWkgbGFiZWwsIC5saWwtZ3VpIGlucHV0LCAubGlsLWd1aSBidXR0b24ge1xuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xufVxuLmxpbC1ndWkgaW5wdXQge1xuICBib3JkZXI6IDA7XG4gIG91dGxpbmU6IG5vbmU7XG4gIGZvbnQtZmFtaWx5OiB2YXIoLS1mb250LWZhbWlseSk7XG4gIGZvbnQtc2l6ZTogdmFyKC0taW5wdXQtZm9udC1zaXplKTtcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0td2lkZ2V0LWJvcmRlci1yYWRpdXMpO1xuICBoZWlnaHQ6IHZhcigtLXdpZGdldC1oZWlnaHQpO1xuICBiYWNrZ3JvdW5kOiB2YXIoLS13aWRnZXQtY29sb3IpO1xuICBjb2xvcjogdmFyKC0tdGV4dC1jb2xvcik7XG4gIHdpZHRoOiAxMDAlO1xufVxuQG1lZGlhIChob3ZlcjogaG92ZXIpIHtcbiAgLmxpbC1ndWkgaW5wdXQ6aG92ZXIge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWhvdmVyLWNvbG9yKTtcbiAgfVxuICAubGlsLWd1aSBpbnB1dDphY3RpdmUge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWZvY3VzLWNvbG9yKTtcbiAgfVxufVxuLmxpbC1ndWkgaW5wdXQ6ZGlzYWJsZWQge1xuICBvcGFjaXR5OiAxO1xufVxuLmxpbC1ndWkgaW5wdXRbdHlwZT10ZXh0XSxcbi5saWwtZ3VpIGlucHV0W3R5cGU9bnVtYmVyXSB7XG4gIHBhZGRpbmc6IHZhcigtLXdpZGdldC1wYWRkaW5nKTtcbiAgLW1vei1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7XG59XG4ubGlsLWd1aSBpbnB1dFt0eXBlPXRleHRdOmZvY3VzLFxuLmxpbC1ndWkgaW5wdXRbdHlwZT1udW1iZXJdOmZvY3VzIHtcbiAgYmFja2dyb3VuZDogdmFyKC0tZm9jdXMtY29sb3IpO1xufVxuLmxpbC1ndWkgaW5wdXRbdHlwZT1jaGVja2JveF0ge1xuICBhcHBlYXJhbmNlOiBub25lO1xuICB3aWR0aDogdmFyKC0tY2hlY2tib3gtc2l6ZSk7XG4gIGhlaWdodDogdmFyKC0tY2hlY2tib3gtc2l6ZSk7XG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLXdpZGdldC1ib3JkZXItcmFkaXVzKTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG4ubGlsLWd1aSBpbnB1dFt0eXBlPWNoZWNrYm94XTpjaGVja2VkOmJlZm9yZSB7XG4gIGZvbnQtZmFtaWx5OiBcImxpbC1ndWlcIjtcbiAgY29udGVudDogXCLinJNcIjtcbiAgZm9udC1zaXplOiB2YXIoLS1jaGVja2JveC1zaXplKTtcbiAgbGluZS1oZWlnaHQ6IHZhcigtLWNoZWNrYm94LXNpemUpO1xufVxuQG1lZGlhIChob3ZlcjogaG92ZXIpIHtcbiAgLmxpbC1ndWkgaW5wdXRbdHlwZT1jaGVja2JveF06Zm9jdXMge1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDFweCB2YXIoLS1mb2N1cy1jb2xvcik7XG4gIH1cbn1cbi5saWwtZ3VpIGJ1dHRvbiB7XG4gIG91dGxpbmU6IG5vbmU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgZm9udC1mYW1pbHk6IHZhcigtLWZvbnQtZmFtaWx5KTtcbiAgZm9udC1zaXplOiB2YXIoLS1mb250LXNpemUpO1xuICBjb2xvcjogdmFyKC0tdGV4dC1jb2xvcik7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IHZhcigtLXdpZGdldC1oZWlnaHQpO1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgYmFja2dyb3VuZDogdmFyKC0td2lkZ2V0LWNvbG9yKTtcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0td2lkZ2V0LWJvcmRlci1yYWRpdXMpO1xuICBib3JkZXI6IG5vbmU7XG59XG5AbWVkaWEgKGhvdmVyOiBob3Zlcikge1xuICAubGlsLWd1aSBidXR0b246aG92ZXIge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWhvdmVyLWNvbG9yKTtcbiAgfVxuICAubGlsLWd1aSBidXR0b246Zm9jdXMge1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDFweCB2YXIoLS1mb2N1cy1jb2xvcik7XG4gIH1cbn1cbi5saWwtZ3VpIGJ1dHRvbjphY3RpdmUge1xuICBiYWNrZ3JvdW5kOiB2YXIoLS1mb2N1cy1jb2xvcik7XG59XG5cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJsaWwtZ3VpXCI7XG4gIHNyYzogdXJsKFwiZGF0YTphcHBsaWNhdGlvbi9mb250LXdvZmY7Y2hhcnNldD11dGYtODtiYXNlNjQsZDA5R1JnQUJBQUFBQUFVc0FBc0FBQUFBQ0p3QUFRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUJIVTFWQ0FBQUJDQUFBQUg0QUFBREFJbXdtWUU5VEx6SUFBQUdJQUFBQVB3QUFBR0JLcUg1U1kyMWhjQUFBQWNnQUFBRDBBQUFDcnVreXlKQm5iSGxtQUFBQ3ZBQUFBRjhBQUFDRUlacFdIMmhsWVdRQUFBTWNBQUFBSndBQUFEWmZjajJ6YUdobFlRQUFBMFFBQUFBWUFBQUFKQUM1QUhob2JYUjRBQUFEWEFBQUFCQUFBQUJNQVpBQUFHeHZZMkVBQUFOc0FBQUFGQUFBQUNnQ0VnSXliV0Y0Y0FBQUE0QUFBQUFlQUFBQUlBRWZBQkp1WVcxbEFBQURvQUFBQVNJQUFBSUs5U1VVL1hCdmMzUUFBQVRFQUFBQVpnQUFBSkNUY01jMmVKeFZqYkVPZ2pBVVJVK2hGUkJLMWRHUkwrQUxuQWlUb3lNTEV6RnBuUHovZUFzaHdTYTk3NTE3Yy9Nd3dKbWVCOWt3UGwrMGNmNSt1R1BaWHNxUHU0bnZaYWJjU1psZFo2a2Z5V25vbUZZL2VTY0txWk5XdXBLSk82a1hOM0s5dUNWb0w3aUluUHIxWDViYVhzM3RqdU1xQ3R6RXVhZ20vQUFselFnUEFBQjRuR05nWVJCbG5NREF5c0RBWU0vZ0JpVDVvTFFCQXd1REpBTURFd01yTXdOV0VKRG1tc0p3Z0NGZVhaZ2hCY2psWk1nRkN6T2lLT0lGQUI3MUJiOEFlSnkxa2pGdXdrQVFSWitEd1JBd0J0TlFSVUdLUThPZEtDQVdVaEFnS0xoSXVBc1ZTcFd6NUJia2ozZEVnWWlVSXN6cVdkcFplK1o3L3dCMW9DWW1Jb2JvaXdpTFQyV2pLbC9qc2NySGZHZy9wS2RNa3lrbEM1WnMyTEVmSFlwamNSb1B6bWU5TVdXbWszZFdiSzlPYmtXa2lrT2V0SjU1NGZXeW9Fc21kU2x0K3VSMHBDSlIzNGI2dC9UVmcxU1kzc1l2ZGY4dnVpS3JweWFEWERJU2llZ3AxN3A3NTc5R3AzcCsreTdIUEFpWTlwbVRpYmxqcnI4NXFTaWR0bGc0K2wyNUdMQ2FTOGU2clJ4TkJtc25FUnVuS2JhT09iUno3TjcyanU1dmRBallwQlhIZ0p5bE9BVnNNc2VEQVBFUDhMWW9VSGljWTJCaUFBRWZoaUFHSmdaV0JnWjdSbkZSZG5WSkVMQ1FsQlNSbEFUSk1vTFYyREs0Z2xTWXM2dWJxNXZiS3JKTFNiR3JnRW1vdkR1REpWaGUzVnpjWEZ3TkxDT0lMQi9DNEl1UTF4VG41RlBpbEJUajVGUG1CQUI0V3dvcUFIaWNZMkJrWUdBQTRzazFzUi9qK1cyK01uQXpwREJnQXlFTVFVQ1NnNEVKeEFFQXdVZ0ZIZ0I0bkdOZ1pHQmdTR0ZnZ0pNaERJd01xRUFZQUJ5SEFUSjRuR05nQUlJVU5Fd21BQUJsM0FHUmVKeGpZQUFDSVFZbEJpTUdKM3dRQUVjUUJFVjRuR05nWkdCZ0VHWmdZMkJpQUFFUXlRV0VEQXovd1h3R0FBc1BBVElBQUhpY1hkQk5Tc05BSEFYd2wzNWlBMFVRWFluTVNoZlM5R1BaQTdUN0xnSXUwM1NTcGt3ellUSXQxQk40QWsvZ0tUeUFlQ3hmdzM5alpranltemN2QXdtQVcvd2d3SFVFR0RiMzYralFRM0dYR290NzlMMjRqeENQNGdIekYvRUlyNGpFSWU3d3hoT0MzZzJUTVl5NFE3K0x1L1NIdUVkL2l2dDR3SmQ0d1B4YlBFS01YM0dJNStESkZHYVNuNHFOems4bWNiS1NSNnhkWGRoU3phT1pKR3RkYXBkNHZWUGJpNnJQK2NMN1RHWE9IdFhLbGw0YlkxWGw3RUduUHRwN1h5Mm4wMHp5S0xWSGZrSEJhNEljSjJvRDNjZ2dnV3Z0L1YvRmJEclVsRVVKaFRuLzBhelZXYk5UTnIwRW5zOGRlMXRjZUs5eFptZkIxQ1BqT21QSDRraXRtdk91YmNOcG1WVE4zb0ZKeWp6Q3ZubXJ3aEpUenF6Vmo5amlTWDkxMUZqZUFBQjRuRzNITVJLQ01CQkEwZjBnaWlLaTREVThrMFYyR1diSVpET2g0UG9XV3ZxNko1VjhJZjlOVk5RY2FEaHlvdVhNaFk0clBUY0c3andZbVhoS3E4V3orcDc2MmFOYWVZWG9tMm4zbTJkTFRWZ3NyQ2dGSjdPVG1Ja1lid0liQzZ2SUI3V21GZkFBQUE9PVwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xufWA7XG5cbmZ1bmN0aW9uIF9pbmplY3RTdHlsZXMoIGNzc0NvbnRlbnQgKSB7XG5cdGNvbnN0IGluamVjdGVkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ3N0eWxlJyApO1xuXHRpbmplY3RlZC5pbm5lckhUTUwgPSBjc3NDb250ZW50O1xuXHRjb25zdCBiZWZvcmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCAnaGVhZCBsaW5rW3JlbD1zdHlsZXNoZWV0XSwgaGVhZCBzdHlsZScgKTtcblx0aWYgKCBiZWZvcmUgKSB7XG5cdFx0ZG9jdW1lbnQuaGVhZC5pbnNlcnRCZWZvcmUoIGluamVjdGVkLCBiZWZvcmUgKTtcblx0fSBlbHNlIHtcblx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBpbmplY3RlZCApO1xuXHR9XG59XG5cbmxldCBzdHlsZXNJbmplY3RlZCA9IGZhbHNlO1xuXG5jbGFzcyBHVUkge1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgcGFuZWwgdGhhdCBob2xkcyBjb250cm9sbGVycy5cblx0ICogQGV4YW1wbGVcblx0ICogbmV3IEdVSSgpO1xuXHQgKiBuZXcgR1VJKCB7IGNvbnRhaW5lcjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdjdXN0b20nICkgfSApO1xuXHQgKlxuXHQgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYXV0b1BsYWNlPXRydWVdXG5cdCAqIEFkZHMgdGhlIEdVSSB0byBgZG9jdW1lbnQuYm9keWAgYW5kIGZpeGVzIGl0IHRvIHRoZSB0b3AgcmlnaHQgb2YgdGhlIHBhZ2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IFtvcHRpb25zLmNvbnRhaW5lcl1cblx0ICogQWRkcyB0aGUgR1VJIHRvIHRoaXMgRE9NIGVsZW1lbnQuIE92ZXJyaWRlcyBgYXV0b1BsYWNlYC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLndpZHRoPTI0NV1cblx0ICogV2lkdGggb2YgdGhlIEdVSSBpbiBwaXhlbHMsIHVzdWFsbHkgc2V0IHdoZW4gbmFtZSBsYWJlbHMgYmVjb21lIHRvbyBsb25nLiBOb3RlIHRoYXQgeW91IGNhbiBtYWtlXG5cdCAqIG5hbWUgbGFiZWxzIHdpZGVyIGluIENTUyB3aXRoIGAubGls4oCRZ3VpIHsg4oCR4oCRbmFtZeKAkXdpZHRoOiA1NSUgfWAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy50aXRsZT1Db250cm9sc11cblx0ICogTmFtZSB0byBkaXNwbGF5IGluIHRoZSB0aXRsZSBiYXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2xvc2VGb2xkZXJzPWZhbHNlXVxuXHQgKiBQYXNzIGB0cnVlYCB0byBjbG9zZSBhbGwgZm9sZGVycyBpbiB0aGlzIEdVSSBieSBkZWZhdWx0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmluamVjdFN0eWxlcz10cnVlXVxuXHQgKiBJbmplY3RzIHRoZSBkZWZhdWx0IHN0eWxlc2hlZXQgaW50byB0aGUgcGFnZSBpZiB0aGlzIGlzIHRoZSBmaXJzdCBHVUkuXG5cdCAqIFBhc3MgYGZhbHNlYCB0byB1c2UgeW91ciBvd24gc3R5bGVzaGVldC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnRvdWNoU3R5bGVzPXRydWVdXG5cdCAqIE1ha2VzIGNvbnRyb2xsZXJzIGxhcmdlciBvbiB0b3VjaCBkZXZpY2VzLiBQYXNzIGBmYWxzZWAgdG8gZGlzYWJsZSB0b3VjaCBzdHlsZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7R1VJfSBbb3B0aW9ucy5wYXJlbnRdXG5cdCAqIEFkZHMgdGhpcyBHVUkgYXMgYSBjaGlsZCBpbiBhbm90aGVyIEdVSS4gVXN1YWxseSB0aGlzIGlzIGRvbmUgZm9yIHlvdSBieSBgYWRkRm9sZGVyKClgLlxuXHQgKlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHtcblx0XHRwYXJlbnQsXG5cdFx0YXV0b1BsYWNlID0gcGFyZW50ID09PSB1bmRlZmluZWQsXG5cdFx0Y29udGFpbmVyLFxuXHRcdHdpZHRoLFxuXHRcdHRpdGxlID0gJ0NvbnRyb2xzJyxcblx0XHRjbG9zZUZvbGRlcnMgPSBmYWxzZSxcblx0XHRpbmplY3RTdHlsZXMgPSB0cnVlLFxuXHRcdHRvdWNoU3R5bGVzID0gdHJ1ZVxuXHR9ID0ge30gKSB7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgR1VJIGNvbnRhaW5pbmcgdGhpcyBmb2xkZXIsIG9yIGB1bmRlZmluZWRgIGlmIHRoaXMgaXMgdGhlIHJvb3QgR1VJLlxuXHRcdCAqIEB0eXBlIHtHVUl9XG5cdFx0ICovXG5cdFx0dGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdG9wIGxldmVsIEdVSSBjb250YWluaW5nIHRoaXMgZm9sZGVyLCBvciBgdGhpc2AgaWYgdGhpcyBpcyB0aGUgcm9vdCBHVUkuXG5cdFx0ICogQHR5cGUge0dVSX1cblx0XHQgKi9cblx0XHR0aGlzLnJvb3QgPSBwYXJlbnQgPyBwYXJlbnQucm9vdCA6IHRoaXM7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbGlzdCBvZiBjb250cm9sbGVycyBhbmQgZm9sZGVycyBjb250YWluZWQgYnkgdGhpcyBHVUkuXG5cdFx0ICogQHR5cGUge0FycmF5PEdVSXxDb250cm9sbGVyPn1cblx0XHQgKi9cblx0XHR0aGlzLmNoaWxkcmVuID0gW107XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbGlzdCBvZiBjb250cm9sbGVycyBjb250YWluZWQgYnkgdGhpcyBHVUkuXG5cdFx0ICogQHR5cGUge0FycmF5PENvbnRyb2xsZXI+fVxuXHRcdCAqL1xuXHRcdHRoaXMuY29udHJvbGxlcnMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBsaXN0IG9mIGZvbGRlcnMgY29udGFpbmVkIGJ5IHRoaXMgR1VJLlxuXHRcdCAqIEB0eXBlIHtBcnJheTxHVUk+fVxuXHRcdCAqL1xuXHRcdHRoaXMuZm9sZGVycyA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogVXNlZCB0byBkZXRlcm1pbmUgaWYgdGhlIEdVSSBpcyBjbG9zZWQuIFVzZSBgZ3VpLm9wZW4oKWAgb3IgYGd1aS5jbG9zZSgpYCB0byBjaGFuZ2UgdGhpcy5cblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKi9cblx0XHR0aGlzLl9jbG9zZWQgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFVzZWQgdG8gZGV0ZXJtaW5lIGlmIHRoZSBHVUkgaXMgaGlkZGVuLiBVc2UgYGd1aS5zaG93KClgIG9yIGBndWkuaGlkZSgpYCB0byBjaGFuZ2UgdGhpcy5cblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKi9cblx0XHR0aGlzLl9oaWRkZW4gPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBvdXRlcm1vc3QgY29udGFpbmVyIGVsZW1lbnQuXG5cdFx0ICogQHR5cGUge0hUTUxFbGVtZW50fVxuXHRcdCAqL1xuXHRcdHRoaXMuZG9tRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnICk7XG5cdFx0dGhpcy5kb21FbGVtZW50LmNsYXNzTGlzdC5hZGQoICdsaWwtZ3VpJyApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIERPTSBlbGVtZW50IHRoYXQgY29udGFpbnMgdGhlIHRpdGxlLlxuXHRcdCAqIEB0eXBlIHtIVE1MRWxlbWVudH1cblx0XHQgKi9cblx0XHR0aGlzLiR0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnICk7XG5cdFx0dGhpcy4kdGl0bGUuY2xhc3NMaXN0LmFkZCggJ3RpdGxlJyApO1xuXHRcdHRoaXMuJHRpdGxlLnNldEF0dHJpYnV0ZSggJ3JvbGUnLCAnYnV0dG9uJyApO1xuXHRcdHRoaXMuJHRpdGxlLnNldEF0dHJpYnV0ZSggJ2FyaWEtZXhwYW5kZWQnLCB0cnVlICk7XG5cdFx0dGhpcy4kdGl0bGUuc2V0QXR0cmlidXRlKCAndGFiaW5kZXgnLCAwICk7XG5cblx0XHR0aGlzLiR0aXRsZS5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCAoKSA9PiB0aGlzLm9wZW5BbmltYXRlZCggdGhpcy5fY2xvc2VkICkgKTtcblx0XHR0aGlzLiR0aXRsZS5hZGRFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIGUgPT4ge1xuXHRcdFx0aWYgKCBlLmNvZGUgPT09ICdFbnRlcicgfHwgZS5jb2RlID09PSAnU3BhY2UnICkge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdHRoaXMuJHRpdGxlLmNsaWNrKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0Ly8gZW5hYmxlcyA6YWN0aXZlIHBzZXVkbyBjbGFzcyBvbiBtb2JpbGVcblx0XHR0aGlzLiR0aXRsZS5hZGRFdmVudExpc3RlbmVyKCAndG91Y2hzdGFydCcsICgpID0+IHt9LCB7IHBhc3NpdmU6IHRydWUgfSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIERPTSBlbGVtZW50IHRoYXQgY29udGFpbnMgY2hpbGRyZW4uXG5cdFx0ICogQHR5cGUge0hUTUxFbGVtZW50fVxuXHRcdCAqL1xuXHRcdHRoaXMuJGNoaWxkcmVuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicgKTtcblx0XHR0aGlzLiRjaGlsZHJlbi5jbGFzc0xpc3QuYWRkKCAnY2hpbGRyZW4nICk7XG5cblx0XHR0aGlzLmRvbUVsZW1lbnQuYXBwZW5kQ2hpbGQoIHRoaXMuJHRpdGxlICk7XG5cdFx0dGhpcy5kb21FbGVtZW50LmFwcGVuZENoaWxkKCB0aGlzLiRjaGlsZHJlbiApO1xuXG5cdFx0dGhpcy50aXRsZSggdGl0bGUgKTtcblxuXHRcdGlmICggdGhpcy5wYXJlbnQgKSB7XG5cblx0XHRcdHRoaXMucGFyZW50LmNoaWxkcmVuLnB1c2goIHRoaXMgKTtcblx0XHRcdHRoaXMucGFyZW50LmZvbGRlcnMucHVzaCggdGhpcyApO1xuXG5cdFx0XHR0aGlzLnBhcmVudC4kY2hpbGRyZW4uYXBwZW5kQ2hpbGQoIHRoaXMuZG9tRWxlbWVudCApO1xuXG5cdFx0XHQvLyBTdG9wIHRoZSBjb25zdHJ1Y3RvciBlYXJseSwgZXZlcnl0aGluZyBvbndhcmQgb25seSBhcHBsaWVzIHRvIHJvb3QgR1VJJ3Ncblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHRoaXMuZG9tRWxlbWVudC5jbGFzc0xpc3QuYWRkKCAncm9vdCcgKTtcblxuXHRcdGlmICggdG91Y2hTdHlsZXMgKSB7XG5cdFx0XHR0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LmFkZCggJ2FsbG93LXRvdWNoLXN0eWxlcycgKTtcblx0XHR9XG5cblx0XHQvLyBJbmplY3Qgc3R5bGVzaGVldCBpZiB3ZSBoYXZlbid0IGRvbmUgdGhhdCB5ZXRcblx0XHRpZiAoICFzdHlsZXNJbmplY3RlZCAmJiBpbmplY3RTdHlsZXMgKSB7XG5cdFx0XHRfaW5qZWN0U3R5bGVzKCBzdHlsZXNoZWV0ICk7XG5cdFx0XHRzdHlsZXNJbmplY3RlZCA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBjb250YWluZXIgKSB7XG5cblx0XHRcdGNvbnRhaW5lci5hcHBlbmRDaGlsZCggdGhpcy5kb21FbGVtZW50ICk7XG5cblx0XHR9IGVsc2UgaWYgKCBhdXRvUGxhY2UgKSB7XG5cblx0XHRcdHRoaXMuZG9tRWxlbWVudC5jbGFzc0xpc3QuYWRkKCAnYXV0b1BsYWNlJyApO1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggdGhpcy5kb21FbGVtZW50ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHdpZHRoICkge1xuXHRcdFx0dGhpcy5kb21FbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCAnLS13aWR0aCcsIHdpZHRoICsgJ3B4JyApO1xuXHRcdH1cblxuXHRcdHRoaXMuX2Nsb3NlRm9sZGVycyA9IGNsb3NlRm9sZGVycztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSBjb250cm9sbGVyIHRvIHRoZSBHVUksIGluZmVycmluZyBjb250cm9sbGVyIHR5cGUgdXNpbmcgdGhlIGB0eXBlb2ZgIG9wZXJhdG9yLlxuXHQgKiBAZXhhbXBsZVxuXHQgKiBndWkuYWRkKCBvYmplY3QsICdwcm9wZXJ0eScgKTtcblx0ICogZ3VpLmFkZCggb2JqZWN0LCAnbnVtYmVyJywgMCwgMTAwLCAxICk7XG5cdCAqIGd1aS5hZGQoIG9iamVjdCwgJ29wdGlvbnMnLCBbIDEsIDIsIDMgXSApO1xuXHQgKlxuXHQgKiBAcGFyYW0ge29iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdGhlIGNvbnRyb2xsZXIgd2lsbCBtb2RpZnkuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBjb250cm9sLlxuXHQgKiBAcGFyYW0ge251bWJlcnxvYmplY3R8QXJyYXl9IFskMV0gTWluaW11bSB2YWx1ZSBmb3IgbnVtYmVyIGNvbnRyb2xsZXJzLCBvciB0aGUgc2V0IG9mXG5cdCAqIHNlbGVjdGFibGUgdmFsdWVzIGZvciBhIGRyb3Bkb3duLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW21heF0gTWF4aW11bSB2YWx1ZSBmb3IgbnVtYmVyIGNvbnRyb2xsZXJzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXBdIFN0ZXAgdmFsdWUgZm9yIG51bWJlciBjb250cm9sbGVycy5cblx0ICogQHJldHVybnMge0NvbnRyb2xsZXJ9XG5cdCAqL1xuXHRhZGQoIG9iamVjdCwgcHJvcGVydHksICQxLCBtYXgsIHN0ZXAgKSB7XG5cblx0XHRpZiAoIE9iamVjdCggJDEgKSA9PT0gJDEgKSB7XG5cblx0XHRcdHJldHVybiBuZXcgT3B0aW9uQ29udHJvbGxlciggdGhpcywgb2JqZWN0LCBwcm9wZXJ0eSwgJDEgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGluaXRpYWxWYWx1ZSA9IG9iamVjdFsgcHJvcGVydHkgXTtcblxuXHRcdHN3aXRjaCAoIHR5cGVvZiBpbml0aWFsVmFsdWUgKSB7XG5cblx0XHRcdGNhc2UgJ251bWJlcic6XG5cblx0XHRcdFx0cmV0dXJuIG5ldyBOdW1iZXJDb250cm9sbGVyKCB0aGlzLCBvYmplY3QsIHByb3BlcnR5LCAkMSwgbWF4LCBzdGVwICk7XG5cblx0XHRcdGNhc2UgJ2Jvb2xlYW4nOlxuXG5cdFx0XHRcdHJldHVybiBuZXcgQm9vbGVhbkNvbnRyb2xsZXIoIHRoaXMsIG9iamVjdCwgcHJvcGVydHkgKTtcblxuXHRcdFx0Y2FzZSAnc3RyaW5nJzpcblxuXHRcdFx0XHRyZXR1cm4gbmV3IFN0cmluZ0NvbnRyb2xsZXIoIHRoaXMsIG9iamVjdCwgcHJvcGVydHkgKTtcblxuXHRcdFx0Y2FzZSAnZnVuY3Rpb24nOlxuXG5cdFx0XHRcdHJldHVybiBuZXcgRnVuY3Rpb25Db250cm9sbGVyKCB0aGlzLCBvYmplY3QsIHByb3BlcnR5ICk7XG5cblx0XHR9XG5cblx0XHRjb25zb2xlLmVycm9yKCBgZ3VpLmFkZCBmYWlsZWRcblx0cHJvcGVydHk6YCwgcHJvcGVydHksIGBcblx0b2JqZWN0OmAsIG9iamVjdCwgYFxuXHR2YWx1ZTpgLCBpbml0aWFsVmFsdWUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSBjb2xvciBjb250cm9sbGVyIHRvIHRoZSBHVUkuXG5cdCAqIEBleGFtcGxlXG5cdCAqIHBhcmFtcyA9IHtcblx0ICogXHRjc3NDb2xvcjogJyNmZjAwZmYnLFxuXHQgKiBcdHJnYkNvbG9yOiB7IHI6IDAsIGc6IDAuMiwgYjogMC40IH0sXG5cdCAqIFx0Y3VzdG9tUmFuZ2U6IFsgMCwgMTI3LCAyNTUgXSxcblx0ICogfTtcblx0ICpcblx0ICogZ3VpLmFkZENvbG9yKCBwYXJhbXMsICdjc3NDb2xvcicgKTtcblx0ICogZ3VpLmFkZENvbG9yKCBwYXJhbXMsICdyZ2JDb2xvcicgKTtcblx0ICogZ3VpLmFkZENvbG9yKCBwYXJhbXMsICdjdXN0b21SYW5nZScsIDI1NSApO1xuXHQgKlxuXHQgKiBAcGFyYW0ge29iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdGhlIGNvbnRyb2xsZXIgd2lsbCBtb2RpZnkuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBjb250cm9sLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gcmdiU2NhbGUgTWF4aW11bSB2YWx1ZSBmb3IgYSBjb2xvciBjaGFubmVsIHdoZW4gdXNpbmcgYW4gUkdCIGNvbG9yLiBZb3UgbWF5XG5cdCAqIG5lZWQgdG8gc2V0IHRoaXMgdG8gMjU1IGlmIHlvdXIgY29sb3JzIGFyZSB0b28gYnJpZ2h0LlxuXHQgKiBAcmV0dXJucyB7Q29udHJvbGxlcn1cblx0ICovXG5cdGFkZENvbG9yKCBvYmplY3QsIHByb3BlcnR5LCByZ2JTY2FsZSA9IDEgKSB7XG5cdFx0cmV0dXJuIG5ldyBDb2xvckNvbnRyb2xsZXIoIHRoaXMsIG9iamVjdCwgcHJvcGVydHksIHJnYlNjYWxlICk7XG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhIGZvbGRlciB0byB0aGUgR1VJLCB3aGljaCBpcyBqdXN0IGFub3RoZXIgR1VJLiBUaGlzIG1ldGhvZCByZXR1cm5zXG5cdCAqIHRoZSBuZXN0ZWQgR1VJIHNvIHlvdSBjYW4gYWRkIGNvbnRyb2xsZXJzIHRvIGl0LlxuXHQgKiBAZXhhbXBsZVxuXHQgKiBjb25zdCBmb2xkZXIgPSBndWkuYWRkRm9sZGVyKCAnUG9zaXRpb24nICk7XG5cdCAqIGZvbGRlci5hZGQoIHBvc2l0aW9uLCAneCcgKTtcblx0ICogZm9sZGVyLmFkZCggcG9zaXRpb24sICd5JyApO1xuXHQgKiBmb2xkZXIuYWRkKCBwb3NpdGlvbiwgJ3onICk7XG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZSBOYW1lIHRvIGRpc3BsYXkgaW4gdGhlIGZvbGRlcidzIHRpdGxlIGJhci5cblx0ICogQHJldHVybnMge0dVSX1cblx0ICovXG5cdGFkZEZvbGRlciggdGl0bGUgKSB7XG5cdFx0Y29uc3QgZm9sZGVyID0gbmV3IEdVSSggeyBwYXJlbnQ6IHRoaXMsIHRpdGxlIH0gKTtcblx0XHRpZiAoIHRoaXMucm9vdC5fY2xvc2VGb2xkZXJzICkgZm9sZGVyLmNsb3NlKCk7XG5cdFx0cmV0dXJuIGZvbGRlcjtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZWNhbGxzIHZhbHVlcyB0aGF0IHdlcmUgc2F2ZWQgd2l0aCBgZ3VpLnNhdmUoKWAuXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcblx0ICogQHBhcmFtIHtib29sZWFufSByZWN1cnNpdmUgUGFzcyBmYWxzZSB0byBleGNsdWRlIGZvbGRlcnMgZGVzY2VuZGluZyBmcm9tIHRoaXMgR1VJLlxuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICovXG5cdGxvYWQoIG9iaiwgcmVjdXJzaXZlID0gdHJ1ZSApIHtcblxuXHRcdGlmICggb2JqLmNvbnRyb2xsZXJzICkge1xuXG5cdFx0XHR0aGlzLmNvbnRyb2xsZXJzLmZvckVhY2goIGMgPT4ge1xuXG5cdFx0XHRcdGlmICggYyBpbnN0YW5jZW9mIEZ1bmN0aW9uQ29udHJvbGxlciApIHJldHVybjtcblxuXHRcdFx0XHRpZiAoIGMuX25hbWUgaW4gb2JqLmNvbnRyb2xsZXJzICkge1xuXHRcdFx0XHRcdGMubG9hZCggb2JqLmNvbnRyb2xsZXJzWyBjLl9uYW1lIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlY3Vyc2l2ZSAmJiBvYmouZm9sZGVycyApIHtcblxuXHRcdFx0dGhpcy5mb2xkZXJzLmZvckVhY2goIGYgPT4ge1xuXG5cdFx0XHRcdGlmICggZi5fdGl0bGUgaW4gb2JqLmZvbGRlcnMgKSB7XG5cdFx0XHRcdFx0Zi5sb2FkKCBvYmouZm9sZGVyc1sgZi5fdGl0bGUgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdH0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBvYmplY3QgbWFwcGluZyBjb250cm9sbGVyIG5hbWVzIHRvIHZhbHVlcy4gVGhlIG9iamVjdCBjYW4gYmUgcGFzc2VkIHRvIGBndWkubG9hZCgpYCB0b1xuXHQgKiByZWNhbGwgdGhlc2UgdmFsdWVzLlxuXHQgKiBAZXhhbXBsZVxuXHQgKiB7XG5cdCAqIFx0Y29udHJvbGxlcnM6IHtcblx0ICogXHRcdHByb3AxOiAxLFxuXHQgKiBcdFx0cHJvcDI6ICd2YWx1ZScsXG5cdCAqIFx0XHQuLi5cblx0ICogXHR9LFxuXHQgKiBcdGZvbGRlcnM6IHtcblx0ICogXHRcdGZvbGRlck5hbWUxOiB7IGNvbnRyb2xsZXJzLCBmb2xkZXJzIH0sXG5cdCAqIFx0XHRmb2xkZXJOYW1lMjogeyBjb250cm9sbGVycywgZm9sZGVycyB9XG5cdCAqIFx0XHQuLi5cblx0ICogXHR9XG5cdCAqIH1cblx0ICpcblx0ICogQHBhcmFtIHtib29sZWFufSByZWN1cnNpdmUgUGFzcyBmYWxzZSB0byBleGNsdWRlIGZvbGRlcnMgZGVzY2VuZGluZyBmcm9tIHRoaXMgR1VJLlxuXHQgKiBAcmV0dXJucyB7b2JqZWN0fVxuXHQgKi9cblx0c2F2ZSggcmVjdXJzaXZlID0gdHJ1ZSApIHtcblxuXHRcdGNvbnN0IG9iaiA9IHtcblx0XHRcdGNvbnRyb2xsZXJzOiB7fSxcblx0XHRcdGZvbGRlcnM6IHt9XG5cdFx0fTtcblxuXHRcdHRoaXMuY29udHJvbGxlcnMuZm9yRWFjaCggYyA9PiB7XG5cblx0XHRcdGlmICggYyBpbnN0YW5jZW9mIEZ1bmN0aW9uQ29udHJvbGxlciApIHJldHVybjtcblxuXHRcdFx0aWYgKCBjLl9uYW1lIGluIG9iai5jb250cm9sbGVycyApIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBgQ2Fubm90IHNhdmUgR1VJIHdpdGggZHVwbGljYXRlIHByb3BlcnR5IFwiJHtjLl9uYW1lfVwiYCApO1xuXHRcdFx0fVxuXG5cdFx0XHRvYmouY29udHJvbGxlcnNbIGMuX25hbWUgXSA9IGMuc2F2ZSgpO1xuXG5cdFx0fSApO1xuXG5cdFx0aWYgKCByZWN1cnNpdmUgKSB7XG5cblx0XHRcdHRoaXMuZm9sZGVycy5mb3JFYWNoKCBmID0+IHtcblxuXHRcdFx0XHRpZiAoIGYuX3RpdGxlIGluIG9iai5mb2xkZXJzICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggYENhbm5vdCBzYXZlIEdVSSB3aXRoIGR1cGxpY2F0ZSBmb2xkZXIgXCIke2YuX3RpdGxlfVwiYCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0b2JqLmZvbGRlcnNbIGYuX3RpdGxlIF0gPSBmLnNhdmUoKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE9wZW5zIGEgR1VJIG9yIGZvbGRlci4gR1VJIGFuZCBmb2xkZXJzIGFyZSBvcGVuIGJ5IGRlZmF1bHQuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gb3BlbiBQYXNzIGZhbHNlIHRvIGNsb3NlLlxuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICogQGV4YW1wbGVcblx0ICogZ3VpLm9wZW4oKTsgLy8gb3BlblxuXHQgKiBndWkub3BlbiggZmFsc2UgKTsgLy8gY2xvc2Vcblx0ICogZ3VpLm9wZW4oIGd1aS5fY2xvc2VkICk7IC8vIHRvZ2dsZVxuXHQgKi9cblx0b3Blbiggb3BlbiA9IHRydWUgKSB7XG5cblx0XHR0aGlzLl9zZXRDbG9zZWQoICFvcGVuICk7XG5cblx0XHR0aGlzLiR0aXRsZS5zZXRBdHRyaWJ1dGUoICdhcmlhLWV4cGFuZGVkJywgIXRoaXMuX2Nsb3NlZCApO1xuXHRcdHRoaXMuZG9tRWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCAnY2xvc2VkJywgdGhpcy5fY2xvc2VkICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENsb3NlcyB0aGUgR1VJLlxuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICovXG5cdGNsb3NlKCkge1xuXHRcdHJldHVybiB0aGlzLm9wZW4oIGZhbHNlICk7XG5cdH1cblxuXHRfc2V0Q2xvc2VkKCBjbG9zZWQgKSB7XG5cdFx0aWYgKCB0aGlzLl9jbG9zZWQgPT09IGNsb3NlZCApIHJldHVybjtcblx0XHR0aGlzLl9jbG9zZWQgPSBjbG9zZWQ7XG5cdFx0dGhpcy5fY2FsbE9uT3BlbkNsb3NlKCB0aGlzICk7XG5cdH1cblxuXHQvKipcblx0ICogU2hvd3MgdGhlIEdVSSBhZnRlciBpdCdzIGJlZW4gaGlkZGVuLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IHNob3dcblx0ICogQHJldHVybnMge3RoaXN9XG5cdCAqIEBleGFtcGxlXG5cdCAqIGd1aS5zaG93KCk7XG5cdCAqIGd1aS5zaG93KCBmYWxzZSApOyAvLyBoaWRlXG5cdCAqIGd1aS5zaG93KCBndWkuX2hpZGRlbiApOyAvLyB0b2dnbGVcblx0ICovXG5cdHNob3coIHNob3cgPSB0cnVlICkge1xuXG5cdFx0dGhpcy5faGlkZGVuID0gIXNob3c7XG5cblx0XHR0aGlzLmRvbUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IHRoaXMuX2hpZGRlbiA/ICdub25lJyA6ICcnO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBIaWRlcyB0aGUgR1VJLlxuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICovXG5cdGhpZGUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2hvdyggZmFsc2UgKTtcblx0fVxuXG5cdG9wZW5BbmltYXRlZCggb3BlbiA9IHRydWUgKSB7XG5cblx0XHQvLyBzZXQgc3RhdGUgaW1tZWRpYXRlbHlcblx0XHR0aGlzLl9zZXRDbG9zZWQoICFvcGVuICk7XG5cblx0XHR0aGlzLiR0aXRsZS5zZXRBdHRyaWJ1dGUoICdhcmlhLWV4cGFuZGVkJywgIXRoaXMuX2Nsb3NlZCApO1xuXG5cdFx0Ly8gd2FpdCBmb3IgbmV4dCBmcmFtZSB0byBtZWFzdXJlICRjaGlsZHJlblxuXHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZSggKCkgPT4ge1xuXG5cdFx0XHQvLyBleHBsaWNpdGx5IHNldCBpbml0aWFsIGhlaWdodCBmb3IgdHJhbnNpdGlvblxuXHRcdFx0Y29uc3QgaW5pdGlhbEhlaWdodCA9IHRoaXMuJGNoaWxkcmVuLmNsaWVudEhlaWdodDtcblx0XHRcdHRoaXMuJGNoaWxkcmVuLnN0eWxlLmhlaWdodCA9IGluaXRpYWxIZWlnaHQgKyAncHgnO1xuXG5cdFx0XHR0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LmFkZCggJ3RyYW5zaXRpb24nICk7XG5cblx0XHRcdGNvbnN0IG9uVHJhbnNpdGlvbkVuZCA9IGUgPT4ge1xuXHRcdFx0XHRpZiAoIGUudGFyZ2V0ICE9PSB0aGlzLiRjaGlsZHJlbiApIHJldHVybjtcblx0XHRcdFx0dGhpcy4kY2hpbGRyZW4uc3R5bGUuaGVpZ2h0ID0gJyc7XG5cdFx0XHRcdHRoaXMuZG9tRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCAndHJhbnNpdGlvbicgKTtcblx0XHRcdFx0dGhpcy4kY2hpbGRyZW4ucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3RyYW5zaXRpb25lbmQnLCBvblRyYW5zaXRpb25FbmQgKTtcblx0XHRcdH07XG5cblx0XHRcdHRoaXMuJGNoaWxkcmVuLmFkZEV2ZW50TGlzdGVuZXIoICd0cmFuc2l0aW9uZW5kJywgb25UcmFuc2l0aW9uRW5kICk7XG5cblx0XHRcdC8vIHRvZG86IHRoaXMgaXMgd3JvbmcgaWYgY2hpbGRyZW4ncyBzY3JvbGxIZWlnaHQgbWFrZXMgZm9yIGEgZ3VpIHRhbGxlciB0aGFuIG1heEhlaWdodFxuXHRcdFx0Y29uc3QgdGFyZ2V0SGVpZ2h0ID0gIW9wZW4gPyAwIDogdGhpcy4kY2hpbGRyZW4uc2Nyb2xsSGVpZ2h0O1xuXG5cdFx0XHR0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSggJ2Nsb3NlZCcsICFvcGVuICk7XG5cblx0XHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZSggKCkgPT4ge1xuXHRcdFx0XHR0aGlzLiRjaGlsZHJlbi5zdHlsZS5oZWlnaHQgPSB0YXJnZXRIZWlnaHQgKyAncHgnO1xuXHRcdFx0fSApO1xuXG5cdFx0fSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDaGFuZ2UgdGhlIHRpdGxlIG9mIHRoaXMgR1VJLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVcblx0ICogQHJldHVybnMge3RoaXN9XG5cdCAqL1xuXHR0aXRsZSggdGl0bGUgKSB7XG5cdFx0LyoqXG5cdFx0ICogQ3VycmVudCB0aXRsZSBvZiB0aGUgR1VJLiBVc2UgYGd1aS50aXRsZSggJ1RpdGxlJyApYCB0byBtb2RpZnkgdGhpcyB2YWx1ZS5cblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMuX3RpdGxlID0gdGl0bGU7XG5cdFx0dGhpcy4kdGl0bGUudGV4dENvbnRlbnQgPSB0aXRsZTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXNldHMgYWxsIGNvbnRyb2xsZXJzIHRvIHRoZWlyIGluaXRpYWwgdmFsdWVzLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IHJlY3Vyc2l2ZSBQYXNzIGZhbHNlIHRvIGV4Y2x1ZGUgZm9sZGVycyBkZXNjZW5kaW5nIGZyb20gdGhpcyBHVUkuXG5cdCAqIEByZXR1cm5zIHt0aGlzfVxuXHQgKi9cblx0cmVzZXQoIHJlY3Vyc2l2ZSA9IHRydWUgKSB7XG5cdFx0Y29uc3QgY29udHJvbGxlcnMgPSByZWN1cnNpdmUgPyB0aGlzLmNvbnRyb2xsZXJzUmVjdXJzaXZlKCkgOiB0aGlzLmNvbnRyb2xsZXJzO1xuXHRcdGNvbnRyb2xsZXJzLmZvckVhY2goIGMgPT4gYy5yZXNldCgpICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogUGFzcyBhIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuZXZlciBhIGNvbnRyb2xsZXIgaW4gdGhpcyBHVUkgY2hhbmdlcy5cblx0ICogQHBhcmFtIHtmdW5jdGlvbih7b2JqZWN0Om9iamVjdCwgcHJvcGVydHk6c3RyaW5nLCB2YWx1ZTphbnksIGNvbnRyb2xsZXI6Q29udHJvbGxlcn0pfSBjYWxsYmFja1xuXHQgKiBAcmV0dXJucyB7dGhpc31cblx0ICogQGV4YW1wbGVcblx0ICogZ3VpLm9uQ2hhbmdlKCBldmVudCA9PiB7XG5cdCAqIFx0ZXZlbnQub2JqZWN0ICAgICAvLyBvYmplY3QgdGhhdCB3YXMgbW9kaWZpZWRcblx0ICogXHRldmVudC5wcm9wZXJ0eSAgIC8vIHN0cmluZywgbmFtZSBvZiBwcm9wZXJ0eVxuXHQgKiBcdGV2ZW50LnZhbHVlICAgICAgLy8gbmV3IHZhbHVlIG9mIGNvbnRyb2xsZXJcblx0ICogXHRldmVudC5jb250cm9sbGVyIC8vIGNvbnRyb2xsZXIgdGhhdCB3YXMgbW9kaWZpZWRcblx0ICogfSApO1xuXHQgKi9cblx0b25DaGFuZ2UoIGNhbGxiYWNrICkge1xuXHRcdC8qKlxuXHRcdCAqIFVzZWQgdG8gYWNjZXNzIHRoZSBmdW5jdGlvbiBib3VuZCB0byBgb25DaGFuZ2VgIGV2ZW50cy4gRG9uJ3QgbW9kaWZ5IHRoaXMgdmFsdWVcblx0XHQgKiBkaXJlY3RseS4gVXNlIHRoZSBgZ3VpLm9uQ2hhbmdlKCBjYWxsYmFjayApYCBtZXRob2QgaW5zdGVhZC5cblx0XHQgKiBAdHlwZSB7RnVuY3Rpb259XG5cdFx0ICovXG5cdFx0dGhpcy5fb25DaGFuZ2UgPSBjYWxsYmFjaztcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdF9jYWxsT25DaGFuZ2UoIGNvbnRyb2xsZXIgKSB7XG5cblx0XHRpZiAoIHRoaXMucGFyZW50ICkge1xuXHRcdFx0dGhpcy5wYXJlbnQuX2NhbGxPbkNoYW5nZSggY29udHJvbGxlciApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5fb25DaGFuZ2UgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHRoaXMuX29uQ2hhbmdlLmNhbGwoIHRoaXMsIHtcblx0XHRcdFx0b2JqZWN0OiBjb250cm9sbGVyLm9iamVjdCxcblx0XHRcdFx0cHJvcGVydHk6IGNvbnRyb2xsZXIucHJvcGVydHksXG5cdFx0XHRcdHZhbHVlOiBjb250cm9sbGVyLmdldFZhbHVlKCksXG5cdFx0XHRcdGNvbnRyb2xsZXJcblx0XHRcdH0gKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogUGFzcyBhIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuZXZlciBhIGNvbnRyb2xsZXIgaW4gdGhpcyBHVUkgaGFzIGZpbmlzaGVkIGNoYW5naW5nLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKHtvYmplY3Q6b2JqZWN0LCBwcm9wZXJ0eTpzdHJpbmcsIHZhbHVlOmFueSwgY29udHJvbGxlcjpDb250cm9sbGVyfSl9IGNhbGxiYWNrXG5cdCAqIEByZXR1cm5zIHt0aGlzfVxuXHQgKiBAZXhhbXBsZVxuXHQgKiBndWkub25GaW5pc2hDaGFuZ2UoIGV2ZW50ID0+IHtcblx0ICogXHRldmVudC5vYmplY3QgICAgIC8vIG9iamVjdCB0aGF0IHdhcyBtb2RpZmllZFxuXHQgKiBcdGV2ZW50LnByb3BlcnR5ICAgLy8gc3RyaW5nLCBuYW1lIG9mIHByb3BlcnR5XG5cdCAqIFx0ZXZlbnQudmFsdWUgICAgICAvLyBuZXcgdmFsdWUgb2YgY29udHJvbGxlclxuXHQgKiBcdGV2ZW50LmNvbnRyb2xsZXIgLy8gY29udHJvbGxlciB0aGF0IHdhcyBtb2RpZmllZFxuXHQgKiB9ICk7XG5cdCAqL1xuXHRvbkZpbmlzaENoYW5nZSggY2FsbGJhY2sgKSB7XG5cdFx0LyoqXG5cdFx0ICogVXNlZCB0byBhY2Nlc3MgdGhlIGZ1bmN0aW9uIGJvdW5kIHRvIGBvbkZpbmlzaENoYW5nZWAgZXZlbnRzLiBEb24ndCBtb2RpZnkgdGhpcyB2YWx1ZVxuXHRcdCAqIGRpcmVjdGx5LiBVc2UgdGhlIGBndWkub25GaW5pc2hDaGFuZ2UoIGNhbGxiYWNrIClgIG1ldGhvZCBpbnN0ZWFkLlxuXHRcdCAqIEB0eXBlIHtGdW5jdGlvbn1cblx0XHQgKi9cblx0XHR0aGlzLl9vbkZpbmlzaENoYW5nZSA9IGNhbGxiYWNrO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0X2NhbGxPbkZpbmlzaENoYW5nZSggY29udHJvbGxlciApIHtcblxuXHRcdGlmICggdGhpcy5wYXJlbnQgKSB7XG5cdFx0XHR0aGlzLnBhcmVudC5fY2FsbE9uRmluaXNoQ2hhbmdlKCBjb250cm9sbGVyICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLl9vbkZpbmlzaENoYW5nZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dGhpcy5fb25GaW5pc2hDaGFuZ2UuY2FsbCggdGhpcywge1xuXHRcdFx0XHRvYmplY3Q6IGNvbnRyb2xsZXIub2JqZWN0LFxuXHRcdFx0XHRwcm9wZXJ0eTogY29udHJvbGxlci5wcm9wZXJ0eSxcblx0XHRcdFx0dmFsdWU6IGNvbnRyb2xsZXIuZ2V0VmFsdWUoKSxcblx0XHRcdFx0Y29udHJvbGxlclxuXHRcdFx0fSApO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBQYXNzIGEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhpcyBHVUkgb3IgaXRzIGRlc2NlbmRhbnRzIGFyZSBvcGVuZWQgb3IgY2xvc2VkLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKEdVSSl9IGNhbGxiYWNrXG5cdCAqIEByZXR1cm5zIHt0aGlzfVxuXHQgKiBAZXhhbXBsZVxuXHQgKiBndWkub25PcGVuQ2xvc2UoIGNoYW5nZWRHVUkgPT4ge1xuXHQgKiBcdGNvbnNvbGUubG9nKCBjaGFuZ2VkR1VJLl9jbG9zZWQgKTtcblx0ICogfSApO1xuXHQgKi9cblx0b25PcGVuQ2xvc2UoIGNhbGxiYWNrICkge1xuXHRcdHRoaXMuX29uT3BlbkNsb3NlID0gY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRfY2FsbE9uT3BlbkNsb3NlKCBjaGFuZ2VkR1VJICkge1xuXHRcdGlmICggdGhpcy5wYXJlbnQgKSB7XG5cdFx0XHR0aGlzLnBhcmVudC5fY2FsbE9uT3BlbkNsb3NlKCBjaGFuZ2VkR1VJICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLl9vbk9wZW5DbG9zZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dGhpcy5fb25PcGVuQ2xvc2UuY2FsbCggdGhpcywgY2hhbmdlZEdVSSApO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyBhbGwgRE9NIGVsZW1lbnRzIGFuZCBldmVudCBsaXN0ZW5lcnMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgR1VJLlxuXHQgKi9cblx0ZGVzdHJveSgpIHtcblxuXHRcdGlmICggdGhpcy5wYXJlbnQgKSB7XG5cdFx0XHR0aGlzLnBhcmVudC5jaGlsZHJlbi5zcGxpY2UoIHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YoIHRoaXMgKSwgMSApO1xuXHRcdFx0dGhpcy5wYXJlbnQuZm9sZGVycy5zcGxpY2UoIHRoaXMucGFyZW50LmZvbGRlcnMuaW5kZXhPZiggdGhpcyApLCAxICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmRvbUVsZW1lbnQucGFyZW50RWxlbWVudCApIHtcblx0XHRcdHRoaXMuZG9tRWxlbWVudC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKCB0aGlzLmRvbUVsZW1lbnQgKTtcblx0XHR9XG5cblx0XHRBcnJheS5mcm9tKCB0aGlzLmNoaWxkcmVuICkuZm9yRWFjaCggYyA9PiBjLmRlc3Ryb3koKSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBhcnJheSBvZiBjb250cm9sbGVycyBjb250YWluZWQgYnkgdGhpcyBHVUkgYW5kIGl0cyBkZXNjZW5kZW50cy5cblx0ICogQHJldHVybnMge0NvbnRyb2xsZXJbXX1cblx0ICovXG5cdGNvbnRyb2xsZXJzUmVjdXJzaXZlKCkge1xuXHRcdGxldCBjb250cm9sbGVycyA9IEFycmF5LmZyb20oIHRoaXMuY29udHJvbGxlcnMgKTtcblx0XHR0aGlzLmZvbGRlcnMuZm9yRWFjaCggZiA9PiB7XG5cdFx0XHRjb250cm9sbGVycyA9IGNvbnRyb2xsZXJzLmNvbmNhdCggZi5jb250cm9sbGVyc1JlY3Vyc2l2ZSgpICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiBjb250cm9sbGVycztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGZvbGRlcnMgY29udGFpbmVkIGJ5IHRoaXMgR1VJIGFuZCBpdHMgZGVzY2VuZGVudHMuXG5cdCAqIEByZXR1cm5zIHtHVUlbXX1cblx0ICovXG5cdGZvbGRlcnNSZWN1cnNpdmUoKSB7XG5cdFx0bGV0IGZvbGRlcnMgPSBBcnJheS5mcm9tKCB0aGlzLmZvbGRlcnMgKTtcblx0XHR0aGlzLmZvbGRlcnMuZm9yRWFjaCggZiA9PiB7XG5cdFx0XHRmb2xkZXJzID0gZm9sZGVycy5jb25jYXQoIGYuZm9sZGVyc1JlY3Vyc2l2ZSgpICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiBmb2xkZXJzO1xuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgR1VJO1xuZXhwb3J0IHsgQm9vbGVhbkNvbnRyb2xsZXIsIENvbG9yQ29udHJvbGxlciwgQ29udHJvbGxlciwgRnVuY3Rpb25Db250cm9sbGVyLCBHVUksIE51bWJlckNvbnRyb2xsZXIsIE9wdGlvbkNvbnRyb2xsZXIsIFN0cmluZ0NvbnRyb2xsZXIgfTtcbiIsImltcG9ydCBHVUkgZnJvbSAnbGlsLWd1aSc7XHJcbmltcG9ydCBQbG90bHksIHsgdHlwZSBEYXRhLCB0eXBlIExheW91dCB9IGZyb20gJ3Bsb3RseS5qcy1kaXN0JztcclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5pbXBvcnQgeyBPcmJpdENvbnRyb2xzLCBWaWV3SGVscGVyIH0gZnJvbSAndGhyZWUvZXhhbXBsZXMvanNtL0FkZG9ucyc7XHJcbmltcG9ydCBTdGF0cyBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vbGlicy9zdGF0cy5tb2R1bGUnO1xyXG5pbXBvcnQgeyB0eXBlIFNpbXVsYXRpb24gfSBmcm9tICcuLi9TaW11bGF0aW9uJztcclxuaW1wb3J0IHsgdHlwZSBTdGF0ZSB9IGZyb20gJy4uL1N0YXRlJztcclxuaW1wb3J0IHsgdHlwZSBVbml2ZXJzZSB9IGZyb20gJy4uL1VuaXZlcnNlJztcclxuaW1wb3J0IHsgdHlwZSBWaXN1YWxpemVyIH0gZnJvbSAnLi4vVmlzdWFsaXplcic7XHJcblxyXG5sZXQgYW5pbWF0aW9uSWQ6IG51bWJlciB8IG51bGwgPSBudWxsO1xyXG5cclxuLyoqXHJcbiAqIENsaXBzIGEgbnVtYmVyIHRvIGEgbWluaW11bSBhbmQgbWF4aW11bSB2YWx1ZS5cclxuICogQHBhcmFtIHggbnVtYmVyIHRvIGNsaXAuXHJcbiAqIEBwYXJhbSBtaW4gbWluaW11bSB2YWx1ZS5cclxuICogQHBhcmFtIG1heCBtYXhpbXVtIHZhbHVlLlxyXG4gKiBAcmV0dXJucyBjbGlwcGVkIHZhbHVlLlxyXG4gKi9cclxuZnVuY3Rpb24gY2xpcE1pbk1heCh4OiBudW1iZXIsIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgaWYgKHggPCBtaW4pIHJldHVybiBtaW47XHJcbiAgaWYgKHggPiBtYXgpIHJldHVybiBtYXg7XHJcbiAgcmV0dXJuIHg7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb250YWluZXIgb2JqZWN0IGZvciBib2R5IHRyYWlscyBpbiBhIDJEIHVuaXZlcnNlIGJhc2VkIGluIFBsb3RseS5cclxuICovXHJcbmNsYXNzIFBsb3RseVVuaXZlcnNlVHJhaWwge1xyXG4gIGRhdGE6IHtcclxuICAgIHg6IChudW1iZXIgfCBudWxsKVtdO1xyXG4gICAgeTogKG51bWJlciB8IG51bGwpW107XHJcbiAgICBtb2RlOiAnbWFya2Vycyc7XHJcbiAgICBtYXJrZXI6IHtcclxuICAgICAgc2l6ZTogbnVtYmVyO1xyXG4gICAgICBjb2xvcjogc3RyaW5nO1xyXG4gICAgfTtcclxuICB9ID0ge1xyXG4gICAgICB4OiBbXSxcclxuICAgICAgeTogW10sXHJcbiAgICAgIG1vZGU6ICdtYXJrZXJzJyxcclxuICAgICAgbWFya2VyOiB7XHJcbiAgICAgICAgc2l6ZTogMSxcclxuICAgICAgICBjb2xvcjogJ3doaXRlJyxcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgdHJhaWxMZW5ndGg6IG51bWJlcjtcclxuICBtYXhUcmFpbExlbmd0aDogbnVtYmVyO1xyXG4gIHRyYWlsSW5kOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnN0cnVjdG9yIGZvciBQbG90bHlVbml2ZXJzZVRyYWlsXHJcbiAgICogQHBhcmFtIG1heFRyYWlsTGVuZ3RoIG1heCBudW1iZXIgb2YgdHJhaWwgcG9pbnRzIHRvIGtlZXAuXHJcbiAgICogQHBhcmFtIGNvbG9yIGNvbG9yIG9mIHRoZSB0cmFpbC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihtYXhUcmFpbExlbmd0aDogbnVtYmVyLCBjb2xvcjogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmRhdGEubWFya2VyLmNvbG9yID0gY29sb3I7XHJcbiAgICB0aGlzLnRyYWlsTGVuZ3RoID0gMDtcclxuICAgIHRoaXMubWF4VHJhaWxMZW5ndGggPSBtYXhUcmFpbExlbmd0aDtcclxuICAgIHRoaXMudHJhaWxJbmQgPSAwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkIGEgdHJhaWwgcG9pbnQgdG8gdGhlIHRyYWlsIGRhdGEsIG9yIHJlcGxhY2UgYW4gZXhpc3RpbmcgdHJhaWwgcG9pbnQgaWYgdGhlIG1heCB0cmFpbCBsZW5ndGggaGFzIGJlZW4gcmVhY2hlZC5cclxuICAgKiBAcGFyYW0geCB4IHBvc2l0aW9uLlxyXG4gICAqIEBwYXJhbSB5IHkgcG9zaXRpb24uXHJcbiAgICovXHJcbiAgYWRkVHJhaWwoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLnRyYWlsTGVuZ3RoIDwgdGhpcy5tYXhUcmFpbExlbmd0aCkge1xyXG4gICAgICB0aGlzLmRhdGEueC5wdXNoKHgpO1xyXG4gICAgICB0aGlzLmRhdGEueS5wdXNoKHkpO1xyXG4gICAgICB0aGlzLnRyYWlsTGVuZ3RoKys7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmRhdGEueFt0aGlzLnRyYWlsSW5kXSA9IHg7XHJcbiAgICAgIHRoaXMuZGF0YS55W3RoaXMudHJhaWxJbmRdID0geTtcclxuICAgICAgdGhpcy50cmFpbEluZCA9ICh0aGlzLnRyYWlsSW5kICsgMSkgJSB0aGlzLnRyYWlsTGVuZ3RoO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUG9wIGFsbCB0cmFpbCBwb2ludHMgZnJvbSB0aGUgdHJhaWwgZGF0YS5cclxuICAgKi9cclxuICBwb3BBbGxUcmFpbHMoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRhdGEueCA9IFtdO1xyXG4gICAgdGhpcy5kYXRhLnkgPSBbXTtcclxuICAgIHRoaXMudHJhaWxMZW5ndGggPSAwO1xyXG4gICAgdGhpcy50cmFpbEluZCA9IDA7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogMkQgcmVhbC10aW1lIHZpc3VhbGl6ZXIgdXNpbmcgUGxvdGx5LlxyXG4gKiBAY2F0ZWdvcnkgVmlzdWFsaXplcnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBSZWFsVGltZVZpc3VhbGl6ZXIgaW1wbGVtZW50cyBWaXN1YWxpemVyIHtcclxuICBzaW11bGF0aW9uOiBTaW11bGF0aW9uO1xyXG4gIGRpdklkOiBzdHJpbmcgPSAnJztcclxuICB1bml2ZXJzZVRyYWlsczogUGxvdGx5VW5pdmVyc2VUcmFpbFtdID0gW107XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnN0cnVjdG9yIGZvciBSZWFsVGltZVZpc3VhbGl6ZXJcclxuICAgKiBAcGFyYW0gc2ltdWxhdGlvbiBzaW11bGF0aW9uIG9iamVjdFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNpbXVsYXRpb246IFNpbXVsYXRpb24pIHtcclxuICAgIHRoaXMuc2ltdWxhdGlvbiA9IHNpbXVsYXRpb247XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIGRlZmF1bHQgY29udHJvbHMgdXNpbmcgbGlsLWd1aSB0byB0aGUgdmlzdWFsaXphdGlvbi5cclxuICAgKiBAcGFyYW0gcGFyZW50RWxlbWVudCBwYXJlbnQgZWxlbWVudCB0byBwbGFjZSB0aGUgY29udHJvbGxlciBkaXYgaW4uXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhZGRDb250cm9scyhwYXJlbnRFbGVtZW50OiBIVE1MRWxlbWVudCkge1xyXG4gICAgY29uc3QgZ3VpID0gbmV3IEdVSSh7XHJcbiAgICAgIGNvbnRhaW5lcjogcGFyZW50RWxlbWVudCxcclxuICAgIH0pO1xyXG4gICAgZ3VpLmRvbUVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgZ3VpLmRvbUVsZW1lbnQuc3R5bGUudG9wID0gJzAnO1xyXG4gICAgZ3VpLmRvbUVsZW1lbnQuc3R5bGUubGVmdCA9ICcwJztcclxuICAgIGd1aS5kb21FbGVtZW50LnN0eWxlLnpJbmRleCA9ICcxMDAwJztcclxuXHJcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLnNpbXVsYXRpb24uY29udHJvbHM7XHJcbiAgICBndWkuYWRkKGNvbmZpZywgJ3NwZWVkJyk7XHJcbiAgICBndWkuYWRkKGNvbmZpZywgJ3Nob3dUcmFpbHMnKVxyXG4gICAgICAub25DaGFuZ2UoKHZhbHVlOiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgdGhpcy51bml2ZXJzZVRyYWlscy5mb3JFYWNoKCh1dCkgPT4gdXQucG9wQWxsVHJhaWxzKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25maWcuc2hvd1RyYWlscyA9IHZhbHVlO1xyXG4gICAgICB9KTtcclxuICAgIGNvbnN0IHNob3dVbml2ZXJzZUZvbGRlciA9IGd1aS5hZGRGb2xkZXIoJ1Nob3cgVW5pdmVyc2UnKTtcclxuICAgIHNob3dVbml2ZXJzZUZvbGRlci5vcGVuKGZhbHNlKTtcclxuICAgIHRoaXMuc2ltdWxhdGlvbi51bml2ZXJzZXMuZm9yRWFjaCgodSwgaSkgPT4ge1xyXG4gICAgICBzaG93VW5pdmVyc2VGb2xkZXJcclxuICAgICAgICAuYWRkKGNvbmZpZy5zaG93VW5pdmVyc2UsIHUubGFiZWwpXHJcbiAgICAgICAgLm9uQ2hhbmdlKCh2YWx1ZTogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aGlzLnVuaXZlcnNlVHJhaWxzW2ldLnBvcEFsbFRyYWlscygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY29uZmlnLnNob3dVbml2ZXJzZVt1LmxhYmVsXSA9IHZhbHVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTaW11bGF0ZSBhbmQgcGxheSB0aGUgdmlzdWFsaXphdGlvbi5cclxuICAgKiBAcGFyYW0gZGl2SWQgZGl2IGlkIHRvIHJlbmRlciB0aGUgdmlzdWFsaXphdGlvbiBpbi5cclxuICAgKiBAcGFyYW0gd2lkdGggd2lkdGggb2YgdGhlIHZpc3VhbGl6YXRpb24uXHJcbiAgICogQHBhcmFtIGhlaWdodCBoZWlnaHQgb2YgdGhlIHZpc3VhbGl6YXRpb24uXHJcbiAgICovXHJcbiAgc3RhcnQoZGl2SWQ6IHN0cmluZywgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmRpdklkICE9PSAnJykge1xyXG4gICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgIC8vICAgJ1NpbXVsYXRpb24gYWxyZWFkeSBwbGF5aW5nLiBTdG9wIHRoZSBjdXJyZW50IHBsYXl0aW1lIGJlZm9yZSBpbml0aWF0aW5nIGEgbmV3IG9uZS4nLFxyXG4gICAgICAvLyApO1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdTaW11bGF0aW9uIGFscmVhZHkgcGxheWluZy4gU3RvcCB0aGUgY3VycmVudCBwbGF5dGltZSBiZWZvcmUgaW5pdGlhdGluZyBhIG5ldyBvbmUuJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuZGl2SWQgPSBkaXZJZDtcclxuICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGl2SWQpO1xyXG4gICAgaWYgKGVsZW1lbnQgPT09IG51bGwpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc3Qgd2lkdGggPSBlbGVtZW50LmNsaWVudFdpZHRoO1xyXG4gICAgLy8gY29uc3QgaGVpZ2h0ID0gZWxlbWVudC5jbGllbnRIZWlnaHQ7XHJcbiAgICBsZXQgbWF4V2lkdGggPSAwO1xyXG4gICAgbGV0IG1heEhlaWdodCA9IDA7XHJcbiAgICB0aGlzLnNpbXVsYXRpb24udW5pdmVyc2VzLmZvckVhY2goKHUpID0+IHUuY3VyclN0YXRlLmJvZGllcy5mb3JFYWNoKChiKSA9PiB7XHJcbiAgICAgIG1heFdpZHRoID0gTWF0aC5tYXgobWF4V2lkdGgsIE1hdGguYWJzKGIucG9zaXRpb24ueCkpO1xyXG4gICAgICBtYXhIZWlnaHQgPSBNYXRoLm1heChtYXhIZWlnaHQsIE1hdGguYWJzKGIucG9zaXRpb24ueSkpO1xyXG4gICAgfSkpO1xyXG4gICAgY29uc3Qgc2NhbGUgPSAwLjUgKiBNYXRoLm1pbihoZWlnaHQgLyBtYXhIZWlnaHQsIHdpZHRoIC8gbWF4V2lkdGgpO1xyXG5cclxuICAgIGNvbnN0IGxheW91dDogUGFydGlhbDxMYXlvdXQ+ID0ge1xyXG4gICAgICBwYXBlcl9iZ2NvbG9yOiAnIzAwMDAwMCcsXHJcbiAgICAgIHBsb3RfYmdjb2xvcjogJyMwMDAwMDAnLFxyXG4gICAgICBmb250OiB7XHJcbiAgICAgICAgY29sb3I6ICcjYmZiZmJmJyxcclxuICAgICAgfSxcclxuICAgICAgeGF4aXM6IHtcclxuICAgICAgICBhdXRvcmFuZ2U6IGZhbHNlLFxyXG4gICAgICAgIHJhbmdlOiBbLSh3aWR0aCAvIDIpIC8gc2NhbGUsIHdpZHRoIC8gMiAvIHNjYWxlXSxcclxuICAgICAgfSxcclxuICAgICAgeWF4aXM6IHtcclxuICAgICAgICBhdXRvcmFuZ2U6IGZhbHNlLFxyXG4gICAgICAgIHJhbmdlOiBbLShoZWlnaHQgLyAyKSAvIHNjYWxlLCBoZWlnaHQgLyAyIC8gc2NhbGVdLFxyXG4gICAgICB9LFxyXG4gICAgICAvLyB1aXJldmlzaW9uOiAndHJ1ZScsXHJcbiAgICAgIHNob3dsZWdlbmQ6IGZhbHNlLFxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAodGhpcy5zaW11bGF0aW9uLmNvbnRyb2xsZXIgPT09ICd1aScpIHtcclxuICAgICAgdGhpcy5hZGRDb250cm9scyhlbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgc3RhdHM6IFN0YXRzIHwgdW5kZWZpbmVkO1xyXG4gICAgaWYgKHRoaXMuc2ltdWxhdGlvbi5zaG93RGVidWdJbmZvKSB7XHJcbiAgICAgIHN0YXRzID0gbmV3IFN0YXRzKCk7XHJcbiAgICAgIHN0YXRzLmRvbS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgIHN0YXRzLmRvbS5zdHlsZS5ib3R0b20gPSAnMHB4JztcclxuICAgICAgc3RhdHMuZG9tLnN0eWxlLnJlbW92ZVByb3BlcnR5KCd0b3AnKTtcclxuICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChzdGF0cy5kb20pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGluaXRfZGF0YTogRGF0YVtdID0gdGhpcy5zaW11bGF0aW9uLnVuaXZlcnNlcy5mbGF0TWFwKFxyXG4gICAgICAodW5pOiBVbml2ZXJzZSk6IERhdGFbXSA9PiB7XHJcbiAgICAgICAgY29uc3QgY3VyclRyYWlsID0gbmV3IFBsb3RseVVuaXZlcnNlVHJhaWwoXHJcbiAgICAgICAgICB0aGlzLnNpbXVsYXRpb24uZ2V0TWF4VHJhaWxMZW5ndGgoKSxcclxuICAgICAgICAgIHR5cGVvZiB1bmkuY29sb3IgPT09ICdzdHJpbmcnID8gdW5pLmNvbG9yIDogdW5pLmNvbG9yWzBdLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy51bml2ZXJzZVRyYWlscy5wdXNoKGN1cnJUcmFpbCk7XHJcbiAgICAgICAgY29uc3QgY3VyckRhdGE6IERhdGEgPSB7XHJcbiAgICAgICAgICB4OiB1bmkuY3VyclN0YXRlLmJvZGllcy5tYXAoKGJvZHkpID0+IGJvZHkucG9zaXRpb24ueCksXHJcbiAgICAgICAgICB5OiB1bmkuY3VyclN0YXRlLmJvZGllcy5tYXAoKGJvZHkpID0+IGJvZHkucG9zaXRpb24ueSksXHJcbiAgICAgICAgICB0eXBlOiAnc2NhdHRlcicsXHJcbiAgICAgICAgICBtb2RlOiAnbWFya2VycycsXHJcbiAgICAgICAgICBtYXJrZXI6IHtcclxuICAgICAgICAgICAgY29sb3I6IHVuaS5jb2xvcixcclxuICAgICAgICAgICAgc2l6ZW1pbjogNixcclxuICAgICAgICAgICAgc2l6ZTogdW5pLmN1cnJTdGF0ZS5ib2RpZXMubWFwKChib2R5KSA9PiBNYXRoLm1pbigxMCwgYm9keS5tYXNzKSksXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHRoaXMuc2ltdWxhdGlvbi5nZXRTaG93VHJhaWxzKCkpIHtcclxuICAgICAgICAgIHVuaS5jdXJyU3RhdGUuYm9kaWVzLmZvckVhY2goKGIpID0+IHtcclxuICAgICAgICAgICAgY3VyclRyYWlsLmFkZFRyYWlsKGIucG9zaXRpb24ueCwgYi5wb3NpdGlvbi55KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcmV0dXJuIFtjdXJyRGF0YSwgY3VyclRyYWlsLmRhdGFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgY3VyckRhdGEsXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHg6IFtdLFxyXG4gICAgICAgICAgICB5OiBbXSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgICAgfSxcclxuICAgICk7XHJcblxyXG4gICAgUGxvdGx5Lm5ld1Bsb3QoZGl2SWQsIGluaXRfZGF0YSwgbGF5b3V0LCB7XHJcbiAgICAgIHNjcm9sbFpvb206IHRydWUsXHJcbiAgICAgIG1vZGVCYXJCdXR0b25zVG9SZW1vdmU6IFtcclxuICAgICAgICAnbGFzc28yZCcsXHJcbiAgICAgICAgJ3NlbGVjdDJkJyxcclxuICAgICAgICAndG9JbWFnZScsXHJcbiAgICAgICAgJ3Jlc2V0U2NhbGUyZCcsXHJcbiAgICAgIF0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCB0aW1lUGVyRnJhbWUgPSAxMDAwIC8gdGhpcy5zaW11bGF0aW9uLm1heEZyYW1lUmF0ZTtcclxuICAgIGlmIChhbmltYXRpb25JZCAhPT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgbGV0IGxhc3RQYWludFRpbWVzdGFtcE1zID0gMDtcclxuICAgIGxldCBsYXN0U2ltVGltZXN0YW1wTXMgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2ltdWxhdGUgYSBzdGVwIGluIHRoZSBzaW11bGF0aW9uXHJcbiAgICAgKiBAcGFyYW0gdGltZXN0YW1wTXMgY3VycmVudCB0aW1lc3RhbXAgaW4gbWlsbGlzZWNvbmRzLCBzb3VyY2VkIGZyb20gcmVxdWVzdEFuaW1hdGlvbkZyYW1lXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHN0ZXAgPSAodGltZXN0YW1wTXM6IG51bWJlcik6IHZvaWQgPT4ge1xyXG4gICAgICB0aGlzLnNpbXVsYXRpb24uc2ltdWxhdGVTdGVwKFxyXG4gICAgICAgICh0aGlzLnNpbXVsYXRpb24uY29udHJvbHMuc3BlZWRcclxuICAgICAgICAgICogTWF0aC5taW4odGltZXN0YW1wTXMgLSBsYXN0U2ltVGltZXN0YW1wTXMsIDMzLjMzKSlcclxuICAgICAgICAgIC8gMTAwMCxcclxuICAgICAgKTtcclxuICAgICAgbGFzdFNpbVRpbWVzdGFtcE1zID0gdGltZXN0YW1wTXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFpbnQgdGhlIHZpc3VhbGl6YXRpb25cclxuICAgICAqIEBwYXJhbSB0aW1lc3RhbXBNcyBjdXJyZW50IHRpbWVzdGFtcCBpbiBtaWxsaXNlY29uZHMsIHByb3ZpZGVkIGJ5IHJlcXVlc3RBbmltYXRpb25GcmFtZVxyXG4gICAgICovXHJcbiAgICBjb25zdCBwYWludCA9ICh0aW1lc3RhbXBNczogbnVtYmVyKSA9PiB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICB0aGlzLnNpbXVsYXRpb24uY29udHJvbHMuc3BlZWQgPT09IDBcclxuICAgICAgICB8fCB0aGlzLnNpbXVsYXRpb24uY29udHJvbHMucGF1c2VkXHJcbiAgICAgICkge1xyXG4gICAgICAgIGFuaW1hdGlvbklkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHBhaW50KTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgc3RlcCh0aW1lc3RhbXBNcyk7XHJcblxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgdGltZVBlckZyYW1lID4gMFxyXG4gICAgICAgICYmIHRpbWVzdGFtcE1zIC0gbGFzdFBhaW50VGltZXN0YW1wTXMgPCB0aW1lUGVyRnJhbWVcclxuICAgICAgKSB7XHJcbiAgICAgICAgYW5pbWF0aW9uSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocGFpbnQpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBsYXN0UGFpbnRUaW1lc3RhbXBNcyA9IHRpbWVzdGFtcE1zO1xyXG5cclxuICAgICAgY29uc3QgbmV3X2RhdGEgPSB0aGlzLnNpbXVsYXRpb24udW5pdmVyc2VzLmZsYXRNYXAoXHJcbiAgICAgICAgKHVuaTogVW5pdmVyc2UsIGk6IG51bWJlcik6IERhdGFbXSA9PiB7XHJcbiAgICAgICAgICBpZiAoIXRoaXMuc2ltdWxhdGlvbi5nZXRTaG93VW5pdmVyc2UodW5pLmxhYmVsKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHg6IFtdLFxyXG4gICAgICAgICAgICAgICAgeTogW10sXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNvbnN0IGN1cnJEYXRhOiBEYXRhID0ge1xyXG4gICAgICAgICAgICB4OiB1bmkuY3VyclN0YXRlLmJvZGllcy5tYXAoKGJvZHkpID0+IGJvZHkucG9zaXRpb24ueCksXHJcbiAgICAgICAgICAgIHk6IHVuaS5jdXJyU3RhdGUuYm9kaWVzLm1hcCgoYm9keSkgPT4gYm9keS5wb3NpdGlvbi55KSxcclxuICAgICAgICAgICAgaG92ZXJ0ZXh0OiB1bmkuY3VyclN0YXRlLmJvZGllcy5tYXAoKGJvZHkpID0+IGJvZHkubGFiZWwpLFxyXG4gICAgICAgICAgICBtYXJrZXI6IHtcclxuICAgICAgICAgICAgICBzaXplOiB1bmkuY3VyclN0YXRlLmJvZGllcy5tYXAoKGJvZHkpID0+IE1hdGgubWluKDEwLCBib2R5Lm1hc3MpKSxcclxuICAgICAgICAgICAgICBjb2xvcjogdW5pLmNvbG9yLFxyXG4gICAgICAgICAgICAgIHNpemVtaW46IDYsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1vZGU6ICdtYXJrZXJzJyxcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgbGV0IHRyYWlsRGF0YTogRGF0YSA9IHt9O1xyXG4gICAgICAgICAgaWYgKHRoaXMuc2ltdWxhdGlvbi5nZXRTaG93VHJhaWxzKCkpIHtcclxuICAgICAgICAgICAgY29uc3QgY3VyclRyYWlsID0gdGhpcy51bml2ZXJzZVRyYWlsc1tpXTtcclxuICAgICAgICAgICAgdW5pLmN1cnJTdGF0ZS5ib2RpZXMuZm9yRWFjaCgoYikgPT4ge1xyXG4gICAgICAgICAgICAgIGN1cnJUcmFpbC5hZGRUcmFpbChiLnBvc2l0aW9uLngsIGIucG9zaXRpb24ueSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0cmFpbERhdGEgPSBjdXJyVHJhaWwuZGF0YTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBbY3VyckRhdGEsIHRyYWlsRGF0YV07XHJcbiAgICAgICAgfSxcclxuICAgICAgKTtcclxuXHJcbiAgICAgIFBsb3RseS5yZWFjdChkaXZJZCwgbmV3X2RhdGEsIGxheW91dCk7XHJcbiAgICAgIGlmICh0aGlzLnNpbXVsYXRpb24uc2hvd0RlYnVnSW5mbyAmJiBzdGF0cykge1xyXG4gICAgICAgIHN0YXRzLnVwZGF0ZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGFuaW1hdGlvbklkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHBhaW50KTtcclxuICAgIH07XHJcblxyXG4gICAgYW5pbWF0aW9uSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocGFpbnQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RvcCB0aGUgc2ltdWxhdGlvbiBhbmQgdmlzdWFsaXphdGlvbi5cclxuICAgKi9cclxuICBzdG9wKCk6IHZvaWQge1xyXG4gICAgUGxvdGx5LnB1cmdlKHRoaXMuZGl2SWQpO1xyXG4gICAgdGhpcy5kaXZJZCA9ICcnO1xyXG4gICAgdGhpcy51bml2ZXJzZVRyYWlscy5mb3JFYWNoKCh1dCkgPT4ge1xyXG4gICAgICB1dC5wb3BBbGxUcmFpbHMoKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy51bml2ZXJzZVRyYWlscyA9IFtdO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENvbnRhaW5lciBvYmplY3QgZm9yIGJvZHkgdHJhaWxzIGluIGEgM0QgdW5pdmVyc2UgYmFzZWQgaW4gVGhyZWUuanMuXHJcbiAqL1xyXG5jbGFzcyBUaHJlZVVuaXZlcnNlVHJhaWwge1xyXG4gIC8qKlxyXG4gICAqIFNpbmd1bGFyIFBvaW50cyBvYmplY3QgY29udGFpbmluZyBhbGwgdHJhaWwgcG9pbnRzLlxyXG4gICAqL1xyXG4gIHRyYWlsczogVEhSRUUuUG9pbnRzO1xyXG4gIHRyYWlsSW5kOiBudW1iZXI7XHJcbiAgdHJhaWxMZW5ndGg6IG51bWJlcjtcclxuICBtYXhUcmFpbExlbmd0aDogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBDb25zdHJ1Y3RvciBmb3IgVGhyZWVVbml2ZXJzZVRyYWlsLlxyXG4gICAqIEBwYXJhbSBtYXhUcmFpbExlbmd0aCBtYXggbnVtYmVyIG9mIHRyYWlsIHBvaW50cyB0byBrZWVwLlxyXG4gICAqIEBwYXJhbSBjb2xvciBjb2xvciBvZiB0aGUgdHJhY2UgcG9pbnRzLlxyXG4gICAqIEBwYXJhbSBzY2VuZSBzY2VuZSB0byBhZGQgdHJhaWwgcG9pbnRzIG9iamVjdCB0by5cclxuICAgKiBAcGFyYW0gc2NhbGUgc2NhbGUgb2YgdGhlIHZpc3VhbGl6YXRpb25sLCB1c2VkIHRvIHNldCB0aGUgc2l6ZSBvZiB0aGUgdHJhaWwgcG9pbnQuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBtYXhUcmFpbExlbmd0aDogbnVtYmVyLFxyXG4gICAgY29sb3I6IHN0cmluZyxcclxuICAgIHNjZW5lOiBUSFJFRS5TY2VuZSxcclxuICAgIHNjYWxlOiBudW1iZXIsXHJcbiAgKSB7XHJcbiAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xyXG4gICAgZ2VvbWV0cnkuc2V0QXR0cmlidXRlKFxyXG4gICAgICAncG9zaXRpb24nLFxyXG4gICAgICBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoMCksIDMpLFxyXG4gICAgKTtcclxuICAgIHRoaXMudHJhaWxzID0gbmV3IFRIUkVFLlBvaW50cyhcclxuICAgICAgZ2VvbWV0cnksXHJcbiAgICAgIG5ldyBUSFJFRS5Qb2ludHNNYXRlcmlhbCh7XHJcbiAgICAgICAgY29sb3IsXHJcbiAgICAgICAgc2l6ZTogMC4wMDUgKiBzY2FsZSxcclxuICAgICAgfSksXHJcbiAgICApO1xyXG4gICAgc2NlbmUuYWRkKHRoaXMudHJhaWxzKTtcclxuICAgIHRoaXMudHJhaWxJbmQgPSAwO1xyXG4gICAgdGhpcy50cmFpbExlbmd0aCA9IDA7XHJcbiAgICB0aGlzLm1heFRyYWlsTGVuZ3RoID0gbWF4VHJhaWxMZW5ndGg7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGQgYSB0cmFpbCBwb2ludCBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24gdG8gdGhlIHNjZW5lLiBSZXBsYWNlIGFuIGV4aXN0aW5nIHRyYWlsIHBvaW50IGlmIHRoZSBtYXggdHJhaWwgbGVuZ3RoIGhhcyBiZWVuIHJlYWNoZWQuXHJcbiAgICogQHBhcmFtIHBvcyBwb3NpdGlvbiB0byBhZGQgdHJhY2UgcG9pbnQgYXQuXHJcbiAgICovXHJcbiAgYWRkVHJhaWwocG9zOiBUSFJFRS5WZWN0b3IzKSB7XHJcbiAgICBpZiAodGhpcy50cmFpbExlbmd0aCA8IHRoaXMubWF4VHJhaWxMZW5ndGgpIHtcclxuICAgICAgdGhpcy50cmFpbHMudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgIHRoaXMudHJhaWxMZW5ndGgrKztcclxuICAgICAgY29uc3QgcG9zQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMudHJhaWxMZW5ndGggKiAzKTtcclxuICAgICAgcG9zQXJyYXkuc2V0KHRoaXMudHJhaWxzLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXkpO1xyXG4gICAgICBwb3NBcnJheS5zZXQocG9zLnRvQXJyYXkoKSwgdGhpcy50cmFpbExlbmd0aCAqIDMgLSAzKTtcclxuICAgICAgdGhpcy50cmFpbHMuZ2VvbWV0cnkuc2V0QXR0cmlidXRlKFxyXG4gICAgICAgICdwb3NpdGlvbicsXHJcbiAgICAgICAgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShwb3NBcnJheSwgMyksXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMudHJhaWxzLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24ubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy50cmFpbHMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheS5zZXQoXHJcbiAgICAgICAgcG9zLnRvQXJyYXkoKSxcclxuICAgICAgICB0aGlzLnRyYWlsSW5kICogMyxcclxuICAgICAgKTtcclxuICAgICAgdGhpcy50cmFpbEluZCA9ICh0aGlzLnRyYWlsSW5kICsgMSkgJSB0aGlzLm1heFRyYWlsTGVuZ3RoO1xyXG4gICAgICB0aGlzLnRyYWlscy5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFBvcCBhbGwgdHJhaWwgcG9pbnRzLlxyXG4gICAqL1xyXG4gIHBvcEFsbFRyYWlscygpOiB2b2lkIHtcclxuICAgIHRoaXMudHJhaWxzLnZpc2libGUgPSBmYWxzZTtcclxuICAgIHRoaXMudHJhaWxzLmdlb21ldHJ5LnNldEF0dHJpYnV0ZShcclxuICAgICAgJ3Bvc2l0aW9uJyxcclxuICAgICAgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KDApLCAzKSxcclxuICAgICk7XHJcbiAgICB0aGlzLnRyYWlsSW5kID0gMDtcclxuICAgIHRoaXMudHJhaWxMZW5ndGggPSAwO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIDNEIHJlYWwtdGltZSB2aXN1YWxpemVyIHVzaW5nIFRocmVlLmpzLlxyXG4gKiBAY2F0ZWdvcnkgVmlzdWFsaXplcnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBSZWFsVGltZVZpc3VhbGl6ZXIzRCBpbXBsZW1lbnRzIFZpc3VhbGl6ZXIge1xyXG4gIHNpbXVsYXRpb246IFNpbXVsYXRpb247XHJcbiAgc2NlbmU/OiBUSFJFRS5TY2VuZTtcclxuICB1bml2ZXJzZVRyYWlsczogVGhyZWVVbml2ZXJzZVRyYWlsW10gPSBbXTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ29uc3RydWN0b3IgZm9yIFJlYWxUaW1lVmlzdWFsaXplcjNELlxyXG4gICAqIEBwYXJhbSBzaW11bGF0aW9uIHNpbXVsYXRpb24gb2JqZWN0LlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHNpbXVsYXRpb246IFNpbXVsYXRpb24pIHtcclxuICAgIHRoaXMuc2ltdWxhdGlvbiA9IHNpbXVsYXRpb247XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIGRlZmF1bHQgY29udHJvbHMgdG8gdGhlIHZpc3VhbGl6YXRpb24uXHJcbiAgICogQHBhcmFtIHBhcmVudEVsZW1lbnQgcGFyZW50IGVsZW1lbnQgdG8gcGxhY2UgdGhlIGNvbnRyb2xsZXIgZGl2IGluLlxyXG4gICAqL1xyXG4gIHByaXZhdGUgYWRkQ29udHJvbHMocGFyZW50RWxlbWVudDogSFRNTEVsZW1lbnQpIHtcclxuICAgIGNvbnN0IGd1aSA9IG5ldyBHVUkoe1xyXG4gICAgICBjb250YWluZXI6IHBhcmVudEVsZW1lbnQsXHJcbiAgICB9KTtcclxuICAgIGd1aS5kb21FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgIGd1aS5kb21FbGVtZW50LnN0eWxlLnRvcCA9ICcwJztcclxuICAgIGd1aS5kb21FbGVtZW50LnN0eWxlLmxlZnQgPSAnMCc7XHJcbiAgICBndWkuZG9tRWxlbWVudC5zdHlsZS56SW5kZXggPSAnMTAwMCc7XHJcblxyXG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5zaW11bGF0aW9uLmNvbnRyb2xzO1xyXG4gICAgZ3VpLmFkZChjb25maWcsICdzcGVlZCcpO1xyXG4gICAgZ3VpLmFkZChjb25maWcsICdzaG93VHJhaWxzJylcclxuICAgICAgLm9uQ2hhbmdlKCh2YWx1ZTogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgIHRoaXMudW5pdmVyc2VUcmFpbHMuZm9yRWFjaCgodXQpID0+IHtcclxuICAgICAgICAgICAgdXQucG9wQWxsVHJhaWxzKCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uZmlnLnNob3dUcmFpbHMgPSB2YWx1ZTtcclxuICAgICAgfSk7XHJcbiAgICBjb25zdCBzaG93VW5pdmVyc2VGb2xkZXIgPSBndWkuYWRkRm9sZGVyKCdTaG93IFVuaXZlcnNlJyk7XHJcbiAgICBzaG93VW5pdmVyc2VGb2xkZXIub3BlbihmYWxzZSk7XHJcbiAgICB0aGlzLnNpbXVsYXRpb24udW5pdmVyc2VzLmZvckVhY2goKHUsIGkpID0+IHtcclxuICAgICAgc2hvd1VuaXZlcnNlRm9sZGVyXHJcbiAgICAgICAgLmFkZChjb25maWcuc2hvd1VuaXZlcnNlLCB1LmxhYmVsKVxyXG4gICAgICAgIC5vbkNoYW5nZSgodmFsdWU6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdGhpcy51bml2ZXJzZVRyYWlsc1tpXS5wb3BBbGxUcmFpbHMoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNvbmZpZy5zaG93VW5pdmVyc2VbdS5sYWJlbF0gPSB2YWx1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2ltdWxhdGUgYW5kIHBsYXkgdGhlIHZpc3VhbGl6YXRpb25cclxuICAgKiBAcGFyYW0gZGl2SWQgZGl2IGlkIHRvIHJlbmRlciB0aGUgdmlzdWFsaXphdGlvbiBpblxyXG4gICAqIEBwYXJhbSB3aWR0aCB3aWR0aCBvZiB0aGUgdmlzdWFsaXphdGlvbi5cclxuICAgKiBAcGFyYW0gaGVpZ2h0IGhlaWdodCBvZiB0aGUgdmlzdWFsaXphdGlvbi5cclxuICAgKi9cclxuICBzdGFydChkaXZJZDogc3RyaW5nLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuc2NlbmUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgIC8vICAgJ1NpbXVsYXRpb24gYWxyZWFkeSBwbGF5aW5nLiBTdG9wIHRoZSBjdXJyZW50IHBsYXl0aW1lIGJlZm9yZSBpbml0aWF0aW5nIGEgbmV3IG9uZS4nLFxyXG4gICAgICAvLyApO1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdTaW11bGF0aW9uIGFscmVhZHkgcGxheWluZy4gU3RvcCB0aGUgY3VycmVudCBwbGF5dGltZSBiZWZvcmUgaW5pdGlhdGluZyBhIG5ldyBvbmUuJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGl2SWQpO1xyXG4gICAgaWYgKGVsZW1lbnQgPT09IG51bGwpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XHJcbiAgICAvLyBjb25zdCB3aWR0aCA9IGVsZW1lbnQuY2xpZW50V2lkdGg7XHJcbiAgICAvLyBjb25zdCBoZWlnaHQgPSBlbGVtZW50LmNsaWVudEhlaWdodDtcclxuICAgIGxldCBtYXhXaWR0aCA9IDA7XHJcbiAgICBsZXQgbWF4SGVpZ2h0ID0gMDtcclxuICAgIHRoaXMuc2ltdWxhdGlvbi51bml2ZXJzZXMuZm9yRWFjaCgodSkgPT4gdS5jdXJyU3RhdGUuYm9kaWVzLmZvckVhY2goKGIpID0+IHtcclxuICAgICAgbWF4V2lkdGggPSBNYXRoLm1heChtYXhXaWR0aCwgTWF0aC5hYnMoYi5wb3NpdGlvbi54KSk7XHJcbiAgICAgIG1heEhlaWdodCA9IE1hdGgubWF4KG1heEhlaWdodCwgTWF0aC5hYnMoYi5wb3NpdGlvbi55KSk7XHJcbiAgICB9KSk7XHJcbiAgICBjb25zdCBzY2FsZSA9IDAuNSAqIE1hdGgubWluKGhlaWdodCAvIG1heEhlaWdodCwgd2lkdGggLyBtYXhXaWR0aCk7XHJcblxyXG4gICAgdGhpcy5zY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG5cclxuICAgIGNvbnN0IGNhbWVyYSA9IG5ldyBUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmEoXHJcbiAgICAgIHdpZHRoIC8gLTIsXHJcbiAgICAgIHdpZHRoIC8gMixcclxuICAgICAgaGVpZ2h0IC8gMixcclxuICAgICAgaGVpZ2h0IC8gLTIsXHJcbiAgICAgIDAsXHJcbiAgICAgIDEwMDAwMDAwMDAwLFxyXG4gICAgKTtcclxuICAgIGNhbWVyYS5wb3NpdGlvbi5zZXQoMCwgMCwgTWF0aC5tYXgod2lkdGgsIGhlaWdodCkpO1xyXG5cclxuICAgIGNvbnN0IHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoKTtcclxuICAgIHJlbmRlcmVyLnNldFNpemUod2lkdGgsIGhlaWdodCk7XHJcbiAgICByZW5kZXJlci5hdXRvQ2xlYXIgPSBmYWxzZTtcclxuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudCk7XHJcblxyXG4gICAgbGV0IHN0YXRzOiBTdGF0cyB8IHVuZGVmaW5lZDtcclxuICAgIGlmICh0aGlzLnNpbXVsYXRpb24uc2hvd0RlYnVnSW5mbykge1xyXG4gICAgICBzdGF0cyA9IG5ldyBTdGF0cygpO1xyXG4gICAgICBzdGF0cy5kb20uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgICBzdGF0cy5kb20uc3R5bGUucmlnaHQgPSAnMHB4JztcclxuICAgICAgc3RhdHMuZG9tLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdsZWZ0Jyk7XHJcbiAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoc3RhdHMuZG9tKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5zaW11bGF0aW9uLmNvbnRyb2xsZXIgPT09ICd1aScpIHtcclxuICAgICAgdGhpcy5hZGRDb250cm9scyhlbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25zdCBlYXJ0aERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgLy8gZWFydGhEaXYuY2xhc3NOYW1lID0gJ2xhYmVsJztcclxuICAgIC8vIGVhcnRoRGl2LnRleHRDb250ZW50ID0gJ0VhcnRoaGdramZkZ2hramZnaCc7XHJcbiAgICAvLyBlYXJ0aERpdi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAndHJhbnNwYXJlbnQnO1xyXG4gICAgLy8gZWFydGhEaXYuc3R5bGUuY29sb3IgPSAnd2hpdGUnO1xyXG4gICAgLy8gZWFydGhEaXYuc3R5bGUuZm9udEZhbWlseSA9ICdzYW5zLXNlcmlmJztcclxuICAgIC8vIGVhcnRoRGl2LnN0eWxlLmJhY2tncm91bmQgPSAncmdiYSgwLCAwLCAwLCAwLjYpJztcclxuXHJcbiAgICAvLyBjb25zdCBlYXJ0aExhYmVsID0gbmV3IENTUzJET2JqZWN0KGVhcnRoRGl2KTtcclxuICAgIC8vIGVhcnRoTGFiZWwucG9zaXRpb24uc2V0KDAsIDAsIDApO1xyXG4gICAgLy8gZWFydGhMYWJlbC5jZW50ZXIuc2V0KDAsIDEpO1xyXG4gICAgLy8gLy8gYXJyWzBdLmFkZChlYXJ0aExhYmVsKTtcclxuICAgIC8vIGVhcnRoTGFiZWwubGF5ZXJzLnNldCgwKTtcclxuICAgIC8vIGNvbnN0IGxhYmVsUmVuZGVyZXIgPSBuZXcgQ1NTMkRSZW5kZXJlcigpO1xyXG4gICAgLy8gbGFiZWxSZW5kZXJlci5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgLy8gbGFiZWxSZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgIC8vIGxhYmVsUmVuZGVyZXIuZG9tRWxlbWVudC5zdHlsZS50b3AgPSAnMHB4JztcclxuICAgIC8vIGVsZW1lbnQuYXBwZW5kQ2hpbGQobGFiZWxSZW5kZXJlci5kb21FbGVtZW50KTtcclxuXHJcbiAgICBjb25zdCBvcmJpdENvbnRyb2xzID0gbmV3IE9yYml0Q29udHJvbHMoY2FtZXJhLCByZW5kZXJlci5kb21FbGVtZW50KTtcclxuICAgIG9yYml0Q29udHJvbHMubGlzdGVuVG9LZXlFdmVudHMod2luZG93KTtcclxuICAgIG9yYml0Q29udHJvbHMudXBkYXRlKCk7XHJcblxyXG4gICAgY29uc3QgYXhlc0hlbHBlciA9IG5ldyBUSFJFRS5BeGVzSGVscGVyKHdpZHRoKTtcclxuICAgIHRoaXMuc2NlbmUuYWRkKGF4ZXNIZWxwZXIpO1xyXG4gICAgY29uc3Qgdmlld0hlbHBlciA9IG5ldyBWaWV3SGVscGVyKGNhbWVyYSwgcmVuZGVyZXIuZG9tRWxlbWVudCk7XHJcblxyXG4gICAgLy8gdmFyIG06IE1hcDxzdHJpbmcsIFRIUkVFLkxpbmVTZWdtZW50cz4gPSBuZXcgTWFwKCk7XHJcbiAgICBsZXQgYXJyOiBUSFJFRS5MaW5lU2VnbWVudHNbXSA9IFtdO1xyXG5cclxuICAgIHRoaXMuc2ltdWxhdGlvbi51bml2ZXJzZXMuZm9yRWFjaCgodSkgPT4ge1xyXG4gICAgICB0aGlzLnVuaXZlcnNlVHJhaWxzLnB1c2goXHJcbiAgICAgICAgbmV3IFRocmVlVW5pdmVyc2VUcmFpbChcclxuICAgICAgICAgIHRoaXMuc2ltdWxhdGlvbi5tYXhUcmFpbExlbmd0aCxcclxuICAgICAgICAgIHR5cGVvZiB1LmNvbG9yID09PSAnc3RyaW5nJyA/IHUuY29sb3IgOiB1LmNvbG9yWzBdLFxyXG4gICAgICAgICAgdGhpcy5zY2VuZSEsXHJcbiAgICAgICAgICBzY2FsZSxcclxuICAgICAgICApLFxyXG4gICAgICApO1xyXG4gICAgICB1LmN1cnJTdGF0ZS5ib2RpZXMuZm9yRWFjaCgoYikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNwaCA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeShcclxuICAgICAgICAgIGNsaXBNaW5NYXgoTWF0aC5sb2cyKGIubWFzcykgLSA3MCwgMTAsIDQwKSxcclxuICAgICAgICAgIDgsXHJcbiAgICAgICAgICA4LFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29uc3QgY3VyciA9IG5ldyBUSFJFRS5XaXJlZnJhbWVHZW9tZXRyeShzcGgpO1xyXG4gICAgICAgIGNvbnN0IGxpbmUgPSBuZXcgVEhSRUUuTGluZVNlZ21lbnRzKFxyXG4gICAgICAgICAgY3VycixcclxuICAgICAgICAgIG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgY29sb3I6IG5ldyBUSFJFRS5Db2xvcih1LmNvbG9yKSxcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zY2VuZSEuYWRkKGxpbmUpO1xyXG4gICAgICAgIGxpbmUucG9zaXRpb24uY29weShiLnBvc2l0aW9uLmNsb25lKClcclxuICAgICAgICAgIC5tdWx0aXBseVNjYWxhcihzY2FsZSkpO1xyXG4gICAgICAgIC8vIG0uc2V0KHUubGFiZWwgKyBcIiBcIiArIGIubGFiZWwsIGxpbmUpO1xyXG4gICAgICAgIGFyci5wdXNoKGxpbmUpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgLy8gYXJyWzBdLmFkZChlYXJ0aExhYmVsKVxyXG5cclxuICAgIGNvbnN0IHRpbWVQZXJGcmFtZSA9IDEwMDAgLyB0aGlzLnNpbXVsYXRpb24ubWF4RnJhbWVSYXRlO1xyXG4gICAgbGV0IGxhc3RTaW1UaW1lc3RhbXBNcyA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG4gICAgbGV0IGxhc3RQYWludCA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2ltdWxhdGUgYSBzdGVwIGluIHRoZSBzaW11bGF0aW9uXHJcbiAgICAgKiBAcGFyYW0gdGltZXN0YW1wTXMgY3VycmVudCB0aW1lc3RhbXAgaW4gbWlsbGlzZWNvbmRzLCBzb3VyY2VkIGZyb20gcmVxdWVzdEFuaW1hdGlvbkZyYW1lXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHN0ZXAgPSAodGltZXN0YW1wTXM6IG51bWJlcikgPT4ge1xyXG4gICAgICB0aGlzLnNpbXVsYXRpb24uc2ltdWxhdGVTdGVwKFxyXG4gICAgICAgICh0aGlzLnNpbXVsYXRpb24uY29udHJvbHMuc3BlZWRcclxuICAgICAgICAgICogTWF0aC5taW4odGltZXN0YW1wTXMgLSBsYXN0U2ltVGltZXN0YW1wTXMsIDE2LjY3KSlcclxuICAgICAgICAgIC8gMTAwMCxcclxuICAgICAgKTtcclxuICAgICAgbGFzdFNpbVRpbWVzdGFtcE1zID0gdGltZXN0YW1wTXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFpbnQgdGhlIHZpc3VhbGl6YXRpb25cclxuICAgICAqIEBwYXJhbSB0aW1lc3RhbXBNcyBjdXJyZW50IHRpbWVzdGFtcCBpbiBtaWxsaXNlY29uZHMsIHByb3ZpZGVkIGJ5IHJlcXVlc3RBbmltYXRpb25GcmFtZVxyXG4gICAgICovXHJcbiAgICBjb25zdCBwYWludCA9ICh0aW1lc3RhbXBNczogbnVtYmVyKSA9PiB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICB0aGlzLnNpbXVsYXRpb24uY29udHJvbHMuc3BlZWQgPT09IDBcclxuICAgICAgICB8fCB0aGlzLnNpbXVsYXRpb24uY29udHJvbHMucGF1c2VkXHJcbiAgICAgICkge1xyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShwYWludCk7XHJcbiAgICAgICAgcmVuZGVyZXIuY2xlYXIoKTtcclxuICAgICAgICByZW5kZXJlci5yZW5kZXIodGhpcy5zY2VuZSEsIGNhbWVyYSk7XHJcbiAgICAgICAgdmlld0hlbHBlci5yZW5kZXIocmVuZGVyZXIpO1xyXG4gICAgICAgIC8vIGxhYmVsUmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmEpO1xyXG4gICAgICAgIG9yYml0Q29udHJvbHMudXBkYXRlKCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIHN0ZXAodGltZXN0YW1wTXMpO1xyXG5cclxuICAgICAgaWYgKHRpbWVQZXJGcmFtZSA+IDAgJiYgdGltZXN0YW1wTXMgLSBsYXN0UGFpbnQgPCB0aW1lUGVyRnJhbWUpIHtcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocGFpbnQpO1xyXG4gICAgICAgIHJlbmRlcmVyLmNsZWFyKCk7XHJcbiAgICAgICAgcmVuZGVyZXIucmVuZGVyKHRoaXMuc2NlbmUhLCBjYW1lcmEpO1xyXG4gICAgICAgIHZpZXdIZWxwZXIucmVuZGVyKHJlbmRlcmVyKTtcclxuICAgICAgICAvLyBsYWJlbFJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKTtcclxuICAgICAgICBvcmJpdENvbnRyb2xzLnVwZGF0ZSgpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGFzdFBhaW50ID0gdGltZXN0YW1wTXM7XHJcbiAgICAgIGlmICh0aGlzLnNpbXVsYXRpb24uc2hvd0RlYnVnSW5mbyAmJiBzdGF0cykge1xyXG4gICAgICAgIHN0YXRzLnVwZGF0ZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgaW5kID0gMDtcclxuICAgICAgdGhpcy5zaW11bGF0aW9uLnVuaXZlcnNlcy5mb3JFYWNoKCh1LCBpKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2ltdWxhdGlvbi5jb250cm9scy5zaG93VW5pdmVyc2VbdS5sYWJlbF0pIHtcclxuICAgICAgICAgIHUuY3VyclN0YXRlLmJvZGllcy5mb3JFYWNoKChiKSA9PiB7XHJcbiAgICAgICAgICAgIGFycltpbmRdLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBhcnJbaW5kXS5wb3NpdGlvbi5jb3B5KGIucG9zaXRpb24uY2xvbmUoKVxyXG4gICAgICAgICAgICAgIC5tdWx0aXBseVNjYWxhcihzY2FsZSkpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zaW11bGF0aW9uLmNvbnRyb2xzLnNob3dUcmFpbHMpIHtcclxuICAgICAgICAgICAgICB0aGlzLnVuaXZlcnNlVHJhaWxzW2ldLmFkZFRyYWlsKGFycltpbmRdLnBvc2l0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbmQrKztcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB1LmN1cnJTdGF0ZS5ib2RpZXMuZm9yRWFjaCgoYikgPT4ge1xyXG4gICAgICAgICAgICBhcnJbaW5kXS52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGluZCsrO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHBhaW50KTtcclxuICAgICAgcmVuZGVyZXIuY2xlYXIoKTtcclxuICAgICAgcmVuZGVyZXIucmVuZGVyKHRoaXMuc2NlbmUhLCBjYW1lcmEpO1xyXG4gICAgICB2aWV3SGVscGVyLnJlbmRlcihyZW5kZXJlcik7XHJcbiAgICAgIC8vIGxhYmVsUmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmEpO1xyXG4gICAgICBvcmJpdENvbnRyb2xzLnVwZGF0ZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocGFpbnQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RvcCB0aGUgc2ltdWxhdGlvbiBhbmQgdmlzdWFsaXphdGlvbi5cclxuICAgKi9cclxuICBzdG9wKCk6IHZvaWQge1xyXG4gICAgdGhpcy5zY2VuZT8uY2xlYXIoKTtcclxuICAgIHRoaXMuc2NlbmUgPSB1bmRlZmluZWQ7XHJcbiAgICB0aGlzLnVuaXZlcnNlVHJhaWxzLmZvckVhY2goKHV0KSA9PiB7XHJcbiAgICAgIHV0LnBvcEFsbFRyYWlscygpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLnVuaXZlcnNlVHJhaWxzID0gW107XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogMkQgcmVjb3JkaW5nIHZpc3VhbGl6ZXIgdXNpbmcgUGxvdGx5LlxyXG4gKiBAY2F0ZWdvcnkgVmlzdWFsaXplcnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBSZWNvcmRpbmdWaXN1YWxpemVyIGltcGxlbWVudHMgVmlzdWFsaXplciB7XHJcbiAgc2ltdWxhdGlvbjogU2ltdWxhdGlvbjtcclxuICBkaXZJZDogc3RyaW5nID0gJyc7XHJcbiAgdW5pdmVyc2VUcmFpbHM6IFBsb3RseVVuaXZlcnNlVHJhaWxbXSA9IFtdO1xyXG5cclxuICAvKipcclxuICAgKiBDb25zdHJ1Y3RvciBmb3IgUmVhbFRpbWVWaXN1YWxpemVyXHJcbiAgICogQHBhcmFtIHNpbXVsYXRpb24gc2ltdWxhdGlvbiBvYmplY3RcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihzaW11bGF0aW9uOiBTaW11bGF0aW9uKSB7XHJcbiAgICB0aGlzLnNpbXVsYXRpb24gPSBzaW11bGF0aW9uO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkcyBkZWZhdWx0IGNvbnRyb2xzIHVzaW5nIGxpbC1ndWkgdG8gdGhlIHZpc3VhbGl6YXRpb24uXHJcbiAgICogQHBhcmFtIHBhcmVudEVsZW1lbnQgcGFyZW50IGVsZW1lbnQgdG8gcGxhY2UgdGhlIGNvbnRyb2xsZXIgZGl2IGluLlxyXG4gICAqL1xyXG4gIHByaXZhdGUgYWRkQ29udHJvbHMocGFyZW50RWxlbWVudDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcclxuICAgIGNvbnN0IGd1aSA9IG5ldyBHVUkoe1xyXG4gICAgICBjb250YWluZXI6IHBhcmVudEVsZW1lbnQsXHJcbiAgICB9KTtcclxuICAgIGd1aS5kb21FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgIGd1aS5kb21FbGVtZW50LnN0eWxlLnRvcCA9ICcwJztcclxuICAgIGd1aS5kb21FbGVtZW50LnN0eWxlLmxlZnQgPSAnMCc7XHJcbiAgICBndWkuZG9tRWxlbWVudC5zdHlsZS56SW5kZXggPSAnMTAwMCc7XHJcblxyXG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5zaW11bGF0aW9uLmNvbnRyb2xzO1xyXG4gICAgZ3VpLmFkZChjb25maWcsICdzcGVlZCcpO1xyXG4gICAgZ3VpLmFkZChjb25maWcsICdzaG93VHJhaWxzJylcclxuICAgICAgLm9uQ2hhbmdlKCh2YWx1ZTogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgIHRoaXMudW5pdmVyc2VUcmFpbHMuZm9yRWFjaCgodXQpID0+IHV0LnBvcEFsbFRyYWlscygpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uZmlnLnNob3dUcmFpbHMgPSB2YWx1ZTtcclxuICAgICAgfSk7XHJcbiAgICBjb25zdCBzaG93VW5pdmVyc2VGb2xkZXIgPSBndWkuYWRkRm9sZGVyKCdTaG93IFVuaXZlcnNlJyk7XHJcbiAgICBzaG93VW5pdmVyc2VGb2xkZXIub3BlbihmYWxzZSk7XHJcbiAgICB0aGlzLnNpbXVsYXRpb24udW5pdmVyc2VzLmZvckVhY2goKHUsIGkpID0+IHtcclxuICAgICAgc2hvd1VuaXZlcnNlRm9sZGVyXHJcbiAgICAgICAgLmFkZChjb25maWcuc2hvd1VuaXZlcnNlLCB1LmxhYmVsKVxyXG4gICAgICAgIC5vbkNoYW5nZSgodmFsdWU6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdGhpcy51bml2ZXJzZVRyYWlsc1tpXS5wb3BBbGxUcmFpbHMoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNvbmZpZy5zaG93VW5pdmVyc2VbdS5sYWJlbF0gPSB2YWx1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2ltdWxhdGUgYW5kIHBsYXkgdGhlIHZpc3VhbGl6YXRpb24uXHJcbiAgICogQHBhcmFtIGRpdklkIGRpdiBpZCB0byByZW5kZXIgdGhlIHZpc3VhbGl6YXRpb24gaW4uXHJcbiAgICogQHBhcmFtIHdpZHRoIHdpZHRoIG9mIHRoZSB2aXN1YWxpemF0aW9uLlxyXG4gICAqIEBwYXJhbSBoZWlnaHQgaGVpZ2h0IG9mIHRoZSB2aXN1YWxpemF0aW9uLlxyXG4gICAqIEBwYXJhbSByZWNvcmRGb3IgbnVtYmVyIG9mIHNlY29uZHMgdG8gcmVjb3JkIGZvci4uXHJcbiAgICovXHJcbiAgc3RhcnQoZGl2SWQ6IHN0cmluZywgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIHJlY29yZEZvcjogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5kaXZJZCAhPT0gJycpIHtcclxuICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAvLyAgICdTaW11bGF0aW9uIGFscmVhZHkgcGxheWluZy4gU3RvcCB0aGUgY3VycmVudCBwbGF5dGltZSBiZWZvcmUgaW5pdGlhdGluZyBhIG5ldyBvbmUuJyxcclxuICAgICAgLy8gKTtcclxuICAgICAgY29uc29sZS5lcnJvcignU2ltdWxhdGlvbiBhbHJlYWR5IHBsYXlpbmcuIFN0b3AgdGhlIGN1cnJlbnQgcGxheXRpbWUgYmVmb3JlIGluaXRpYXRpbmcgYSBuZXcgb25lLicpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLmRpdklkID0gZGl2SWQ7XHJcbiAgICBsZXQgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRpdklkKTtcclxuICAgIGlmIChlbGVtZW50ID09PSBudWxsKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIGNvbnN0IHdpZHRoID0gZWxlbWVudC5jbGllbnRXaWR0aDtcclxuICAgIC8vIGNvbnN0IGhlaWdodCA9IGVsZW1lbnQuY2xpZW50SGVpZ2h0O1xyXG4gICAgbGV0IG1heFdpZHRoID0gMDtcclxuICAgIGxldCBtYXhIZWlnaHQgPSAwO1xyXG4gICAgdGhpcy5zaW11bGF0aW9uLnVuaXZlcnNlcy5mb3JFYWNoKCh1KSA9PiB1LmN1cnJTdGF0ZS5ib2RpZXMuZm9yRWFjaCgoYikgPT4ge1xyXG4gICAgICBtYXhXaWR0aCA9IE1hdGgubWF4KG1heFdpZHRoLCBNYXRoLmFicyhiLnBvc2l0aW9uLngpKTtcclxuICAgICAgbWF4SGVpZ2h0ID0gTWF0aC5tYXgobWF4SGVpZ2h0LCBNYXRoLmFicyhiLnBvc2l0aW9uLnkpKTtcclxuICAgIH0pKTtcclxuICAgIGNvbnN0IHNjYWxlID0gMC41ICogTWF0aC5taW4oaGVpZ2h0IC8gbWF4SGVpZ2h0LCB3aWR0aCAvIG1heFdpZHRoKTtcclxuXHJcbiAgICBjb25zdCByZWNvcmRlZEZyYW1lczogU3RhdGVbXVtdID0gW107XHJcbiAgICBjb25zdCB0b3RhbEZyYW1lcyA9IHRoaXMuc2ltdWxhdGlvbi5tYXhGcmFtZVJhdGUgKiByZWNvcmRGb3I7XHJcbiAgICBsZXQgcGxheUluZCA9IDE7XHJcbiAgICB0aGlzLnNpbXVsYXRpb24udW5pdmVyc2VzLmZvckVhY2goKHUpID0+IHtcclxuICAgICAgcmVjb3JkZWRGcmFtZXMucHVzaChbdS5jdXJyU3RhdGUuY2xvbmUoKV0pO1xyXG4gICAgfSk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsRnJhbWVzOyBpKyspIHtcclxuICAgICAgdGhpcy5zaW11bGF0aW9uLnNpbXVsYXRlU3RlcCgxIC8gdGhpcy5zaW11bGF0aW9uLm1heEZyYW1lUmF0ZSk7XHJcbiAgICAgIHRoaXMuc2ltdWxhdGlvbi51bml2ZXJzZXMuZm9yRWFjaCgodSwgaikgPT4ge1xyXG4gICAgICAgIHJlY29yZGVkRnJhbWVzW2pdLnB1c2godS5jdXJyU3RhdGUuY2xvbmUoKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGxheW91dDogUGFydGlhbDxMYXlvdXQ+ID0ge1xyXG4gICAgICBwYXBlcl9iZ2NvbG9yOiAnIzAwMDAwMCcsXHJcbiAgICAgIHBsb3RfYmdjb2xvcjogJyMwMDAwMDAnLFxyXG4gICAgICBmb250OiB7XHJcbiAgICAgICAgY29sb3I6ICcjYmZiZmJmJyxcclxuICAgICAgfSxcclxuICAgICAgeGF4aXM6IHtcclxuICAgICAgICBhdXRvcmFuZ2U6IGZhbHNlLFxyXG4gICAgICAgIHJhbmdlOiBbLSh3aWR0aCAvIDIpIC8gc2NhbGUsIHdpZHRoIC8gMiAvIHNjYWxlXSxcclxuICAgICAgfSxcclxuICAgICAgeWF4aXM6IHtcclxuICAgICAgICBhdXRvcmFuZ2U6IGZhbHNlLFxyXG4gICAgICAgIHJhbmdlOiBbLShoZWlnaHQgLyAyKSAvIHNjYWxlLCBoZWlnaHQgLyAyIC8gc2NhbGVdLFxyXG4gICAgICB9LFxyXG4gICAgICAvLyB1aXJldmlzaW9uOiAndHJ1ZScsXHJcbiAgICAgIHNob3dsZWdlbmQ6IGZhbHNlLFxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAodGhpcy5zaW11bGF0aW9uLmNvbnRyb2xsZXIgPT09ICd1aScpIHtcclxuICAgICAgdGhpcy5hZGRDb250cm9scyhlbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgc3RhdHM6IFN0YXRzIHwgdW5kZWZpbmVkO1xyXG4gICAgaWYgKHRoaXMuc2ltdWxhdGlvbi5zaG93RGVidWdJbmZvKSB7XHJcbiAgICAgIHN0YXRzID0gbmV3IFN0YXRzKCk7XHJcbiAgICAgIHN0YXRzLmRvbS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgIHN0YXRzLmRvbS5zdHlsZS5ib3R0b20gPSAnMHB4JztcclxuICAgICAgc3RhdHMuZG9tLnN0eWxlLnJlbW92ZVByb3BlcnR5KCd0b3AnKTtcclxuICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChzdGF0cy5kb20pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGluaXRfZGF0YTogRGF0YVtdID0gdGhpcy5zaW11bGF0aW9uLnVuaXZlcnNlcy5mbGF0TWFwKFxyXG4gICAgICAodW5pOiBVbml2ZXJzZSk6IERhdGFbXSA9PiB7XHJcbiAgICAgICAgY29uc3QgY3VyclRyYWlsID0gbmV3IFBsb3RseVVuaXZlcnNlVHJhaWwoXHJcbiAgICAgICAgICB0aGlzLnNpbXVsYXRpb24uZ2V0TWF4VHJhaWxMZW5ndGgoKSxcclxuICAgICAgICAgIHR5cGVvZiB1bmkuY29sb3IgPT09ICdzdHJpbmcnID8gdW5pLmNvbG9yIDogdW5pLmNvbG9yWzBdLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy51bml2ZXJzZVRyYWlscy5wdXNoKGN1cnJUcmFpbCk7XHJcbiAgICAgICAgY29uc3QgY3VyckRhdGE6IERhdGEgPSB7XHJcbiAgICAgICAgICB4OiB1bmkuY3VyclN0YXRlLmJvZGllcy5tYXAoKGJvZHkpID0+IGJvZHkucG9zaXRpb24ueCksXHJcbiAgICAgICAgICB5OiB1bmkuY3VyclN0YXRlLmJvZGllcy5tYXAoKGJvZHkpID0+IGJvZHkucG9zaXRpb24ueSksXHJcbiAgICAgICAgICB0eXBlOiAnc2NhdHRlcicsXHJcbiAgICAgICAgICBtb2RlOiAnbWFya2VycycsXHJcbiAgICAgICAgICBtYXJrZXI6IHtcclxuICAgICAgICAgICAgY29sb3I6IHVuaS5jb2xvcixcclxuICAgICAgICAgICAgc2l6ZW1pbjogNixcclxuICAgICAgICAgICAgc2l6ZTogdW5pLmN1cnJTdGF0ZS5ib2RpZXMubWFwKChib2R5KSA9PiBNYXRoLm1pbigxMCwgYm9keS5tYXNzKSksXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHRoaXMuc2ltdWxhdGlvbi5nZXRTaG93VHJhaWxzKCkpIHtcclxuICAgICAgICAgIHVuaS5jdXJyU3RhdGUuYm9kaWVzLmZvckVhY2goKGIpID0+IHtcclxuICAgICAgICAgICAgY3VyclRyYWlsLmFkZFRyYWlsKGIucG9zaXRpb24ueCwgYi5wb3NpdGlvbi55KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcmV0dXJuIFtjdXJyRGF0YSwgY3VyclRyYWlsLmRhdGFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgY3VyckRhdGEsXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHg6IFtdLFxyXG4gICAgICAgICAgICB5OiBbXSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgICAgfSxcclxuICAgICk7XHJcblxyXG4gICAgUGxvdGx5Lm5ld1Bsb3QoZGl2SWQsIGluaXRfZGF0YSwgbGF5b3V0LCB7XHJcbiAgICAgIHNjcm9sbFpvb206IHRydWUsXHJcbiAgICAgIG1vZGVCYXJCdXR0b25zVG9SZW1vdmU6IFtcclxuICAgICAgICAnem9vbTJkJyxcclxuICAgICAgICAnbGFzc28yZCcsXHJcbiAgICAgICAgJ3NlbGVjdDJkJyxcclxuICAgICAgICAndG9JbWFnZScsXHJcbiAgICAgICAgJ3Jlc2V0U2NhbGUyZCcsXHJcbiAgICAgIF0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoYW5pbWF0aW9uSWQgIT09IG51bGwpIHJldHVybjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhaW50IHRoZSB2aXN1YWxpemF0aW9uXHJcbiAgICAgKiBAcGFyYW0gdGltZXN0YW1wTXMgY3VycmVudCB0aW1lc3RhbXAgaW4gbWlsbGlzZWNvbmRzLCBwcm92aWRlZCBieSByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcclxuICAgICAqL1xyXG4gICAgY29uc3QgcGFpbnQgPSAodGltZXN0YW1wTXM6IG51bWJlcikgPT4ge1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgdGhpcy5zaW11bGF0aW9uLmNvbnRyb2xzLnNwZWVkID09PSAwXHJcbiAgICAgICAgfHwgdGhpcy5zaW11bGF0aW9uLmNvbnRyb2xzLnBhdXNlZFxyXG4gICAgICApIHtcclxuICAgICAgICBhbmltYXRpb25JZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShwYWludCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBjdXJyUGxheUluZCA9IE1hdGgucm91bmQocGxheUluZCk7XHJcbiAgICAgIGNvbnN0IG5ld19kYXRhID0gdGhpcy5zaW11bGF0aW9uLnVuaXZlcnNlcy5mbGF0TWFwKFxyXG4gICAgICAgICh1bmk6IFVuaXZlcnNlLCBpOiBudW1iZXIpOiBEYXRhW10gPT4ge1xyXG4gICAgICAgICAgaWYgKCF0aGlzLnNpbXVsYXRpb24uZ2V0U2hvd1VuaXZlcnNlKHVuaS5sYWJlbCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB4OiBbXSxcclxuICAgICAgICAgICAgICAgIHk6IFtdLFxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb25zdCBjdXJyU3RhdGUgPSByZWNvcmRlZEZyYW1lc1tpXVtjdXJyUGxheUluZF07XHJcbiAgICAgICAgICBjb25zdCBjdXJyRGF0YTogRGF0YSA9IHtcclxuICAgICAgICAgICAgeDogY3VyclN0YXRlLmJvZGllcy5tYXAoKGJvZHkpID0+IGJvZHkucG9zaXRpb24ueCksXHJcbiAgICAgICAgICAgIHk6IGN1cnJTdGF0ZS5ib2RpZXMubWFwKChib2R5KSA9PiBib2R5LnBvc2l0aW9uLnkpLFxyXG4gICAgICAgICAgICBob3ZlcnRleHQ6IGN1cnJTdGF0ZS5ib2RpZXMubWFwKChib2R5KSA9PiBib2R5LmxhYmVsKSxcclxuICAgICAgICAgICAgbWFya2VyOiB7XHJcbiAgICAgICAgICAgICAgc2l6ZTogY3VyclN0YXRlLmJvZGllcy5tYXAoKGJvZHkpID0+IE1hdGgubWluKDEwLCBib2R5Lm1hc3MpKSxcclxuICAgICAgICAgICAgICBjb2xvcjogdW5pLmNvbG9yLFxyXG4gICAgICAgICAgICAgIHNpemVtaW46IDYsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1vZGU6ICdtYXJrZXJzJyxcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgbGV0IHRyYWlsRGF0YTogRGF0YSA9IHt9O1xyXG4gICAgICAgICAgaWYgKHRoaXMuc2ltdWxhdGlvbi5nZXRTaG93VHJhaWxzKCkpIHtcclxuICAgICAgICAgICAgY29uc3QgY3VyclRyYWlsID0gdGhpcy51bml2ZXJzZVRyYWlsc1tpXTtcclxuICAgICAgICAgICAgY3VyclN0YXRlLmJvZGllcy5mb3JFYWNoKChiKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgICAgY3VyclRyYWlsLmFkZFRyYWlsKGIucG9zaXRpb24ueCwgYi5wb3NpdGlvbi55KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRyYWlsRGF0YSA9IGN1cnJUcmFpbC5kYXRhO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIFtjdXJyRGF0YSwgdHJhaWxEYXRhXTtcclxuICAgICAgICB9LFxyXG4gICAgICApO1xyXG4gICAgICBQbG90bHkucmVhY3QoZGl2SWQsIG5ld19kYXRhLCBsYXlvdXQpO1xyXG5cclxuICAgICAgaWYgKHRoaXMuc2ltdWxhdGlvbi5zaG93RGVidWdJbmZvICYmIHN0YXRzKSB7XHJcbiAgICAgICAgc3RhdHMudXBkYXRlKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHBsYXlJbmQgPSBNYXRoLnJvdW5kKHBsYXlJbmQgKyB0aGlzLnNpbXVsYXRpb24uY29udHJvbHMuc3BlZWQpO1xyXG4gICAgICBpZiAocGxheUluZCA8IDApIHtcclxuICAgICAgICBpZiAodGhpcy5zaW11bGF0aW9uLmxvb3BlZCkge1xyXG4gICAgICAgICAgcGxheUluZCA9ICgocGxheUluZCAlIHRvdGFsRnJhbWVzKSArIHRvdGFsRnJhbWVzKSAlIHRvdGFsRnJhbWVzO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBwbGF5SW5kID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAocGxheUluZCA+PSB0b3RhbEZyYW1lcykge1xyXG4gICAgICAgIGlmICh0aGlzLnNpbXVsYXRpb24ubG9vcGVkKSB7XHJcbiAgICAgICAgICBwbGF5SW5kICU9IHRvdGFsRnJhbWVzO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBwbGF5SW5kID0gdG90YWxGcmFtZXMgLSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBhbmltYXRpb25JZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShwYWludCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGFuaW1hdGlvbklkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHBhaW50KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0b3AgdGhlIHNpbXVsYXRpb24gYW5kIHZpc3VhbGl6YXRpb24uXHJcbiAgICovXHJcbiAgc3RvcCgpOiB2b2lkIHtcclxuICAgIFBsb3RseS5wdXJnZSh0aGlzLmRpdklkKTtcclxuICAgIHRoaXMuZGl2SWQgPSAnJztcclxuICAgIHRoaXMudW5pdmVyc2VUcmFpbHMgPSBbXTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiAzRCByZWNvcmRpbmcgdmlzdWFsaXplciB1c2luZyBUaHJlZS5qcy5cclxuICogQGNhdGVnb3J5IFZpc3VhbGl6ZXJzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUmVjb3JkaW5nVmlzdWFsaXplcjNEIGltcGxlbWVudHMgVmlzdWFsaXplciB7XHJcbiAgc2ltdWxhdGlvbjogU2ltdWxhdGlvbjtcclxuICBzY2VuZT86IFRIUkVFLlNjZW5lO1xyXG4gIHVuaXZlcnNlVHJhaWxzOiBUaHJlZVVuaXZlcnNlVHJhaWxbXSA9IFtdO1xyXG5cclxuICAvKipcclxuICAgKiBDb25zdHJ1Y3RvciBmb3IgUmVhbFRpbWVWaXN1YWxpemVyM0QuXHJcbiAgICogQHBhcmFtIHNpbXVsYXRpb24gc2ltdWxhdGlvbiBvYmplY3QuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc2ltdWxhdGlvbjogU2ltdWxhdGlvbikge1xyXG4gICAgdGhpcy5zaW11bGF0aW9uID0gc2ltdWxhdGlvbjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZHMgZGVmYXVsdCBjb250cm9scyB0byB0aGUgdmlzdWFsaXphdGlvbi5cclxuICAgKiBAcGFyYW0gcGFyZW50RWxlbWVudCBwYXJlbnQgZWxlbWVudCB0byBwbGFjZSB0aGUgY29udHJvbGxlciBkaXYgaW4uXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhZGRDb250cm9scyhwYXJlbnRFbGVtZW50OiBIVE1MRWxlbWVudCkge1xyXG4gICAgY29uc3QgZ3VpID0gbmV3IEdVSSh7XHJcbiAgICAgIGNvbnRhaW5lcjogcGFyZW50RWxlbWVudCxcclxuICAgIH0pO1xyXG4gICAgZ3VpLmRvbUVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgZ3VpLmRvbUVsZW1lbnQuc3R5bGUudG9wID0gJzAnO1xyXG4gICAgZ3VpLmRvbUVsZW1lbnQuc3R5bGUubGVmdCA9ICcwJztcclxuICAgIGd1aS5kb21FbGVtZW50LnN0eWxlLnpJbmRleCA9ICcxMDAwJztcclxuXHJcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLnNpbXVsYXRpb24uY29udHJvbHM7XHJcbiAgICBndWkuYWRkKGNvbmZpZywgJ3NwZWVkJyk7XHJcbiAgICBndWkuYWRkKGNvbmZpZywgJ3Nob3dUcmFpbHMnKVxyXG4gICAgICAub25DaGFuZ2UoKHZhbHVlOiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgdGhpcy51bml2ZXJzZVRyYWlscy5mb3JFYWNoKCh1dCkgPT4ge1xyXG4gICAgICAgICAgICB1dC5wb3BBbGxUcmFpbHMoKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25maWcuc2hvd1RyYWlscyA9IHZhbHVlO1xyXG4gICAgICB9KTtcclxuICAgIGNvbnN0IHNob3dVbml2ZXJzZUZvbGRlciA9IGd1aS5hZGRGb2xkZXIoJ1Nob3cgVW5pdmVyc2UnKTtcclxuICAgIHNob3dVbml2ZXJzZUZvbGRlci5vcGVuKGZhbHNlKTtcclxuICAgIHRoaXMuc2ltdWxhdGlvbi51bml2ZXJzZXMuZm9yRWFjaCgodSwgaSkgPT4ge1xyXG4gICAgICBzaG93VW5pdmVyc2VGb2xkZXJcclxuICAgICAgICAuYWRkKGNvbmZpZy5zaG93VW5pdmVyc2UsIHUubGFiZWwpXHJcbiAgICAgICAgLm9uQ2hhbmdlKCh2YWx1ZTogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aGlzLnVuaXZlcnNlVHJhaWxzW2ldLnBvcEFsbFRyYWlscygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY29uZmlnLnNob3dVbml2ZXJzZVt1LmxhYmVsXSA9IHZhbHVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTaW11bGF0ZSBhbmQgcGxheSB0aGUgdmlzdWFsaXphdGlvblxyXG4gICAqIEBwYXJhbSBkaXZJZCBkaXYgaWQgdG8gcmVuZGVyIHRoZSB2aXN1YWxpemF0aW9uIGluLlxyXG4gICAqIEBwYXJhbSB3aWR0aCB3aWR0aCBvZiB0aGUgdmlzdWFsaXphdGlvbi5cclxuICAgKiBAcGFyYW0gaGVpZ2h0IGhlaWdodCBvZiB0aGUgdmlzdWFsaXphdGlvbi5cclxuICAgKiBAcGFyYW0gcmVjb3JkRm9yIG51bWJlciBvZiBzZWNvbmRzIHRvIHJlY29yZCBmb3IuXHJcbiAgICovXHJcbiAgc3RhcnQoZGl2SWQ6IHN0cmluZywgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIHJlY29yZEZvcjogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5zY2VuZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIC8vIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgLy8gICAnU2ltdWxhdGlvbiBhbHJlYWR5IHBsYXlpbmcuIFN0b3AgdGhlIGN1cnJlbnQgcGxheXRpbWUgYmVmb3JlIGluaXRpYXRpbmcgYSBuZXcgb25lLicsXHJcbiAgICAgIC8vICk7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1NpbXVsYXRpb24gYWxyZWFkeSBwbGF5aW5nLiBTdG9wIHRoZSBjdXJyZW50IHBsYXl0aW1lIGJlZm9yZSBpbml0aWF0aW5nIGEgbmV3IG9uZS4nKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkaXZJZCk7XHJcbiAgICBpZiAoZWxlbWVudCA9PT0gbnVsbCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBjb25zdCB3aWR0aCA9IGVsZW1lbnQuY2xpZW50V2lkdGg7XHJcbiAgICAvLyBjb25zdCBoZWlnaHQgPSBlbGVtZW50LmNsaWVudEhlaWdodDtcclxuICAgIGxldCBtYXhXaWR0aCA9IDA7XHJcbiAgICBsZXQgbWF4SGVpZ2h0ID0gMDtcclxuICAgIHRoaXMuc2ltdWxhdGlvbi51bml2ZXJzZXMuZm9yRWFjaCgodSkgPT4gdS5jdXJyU3RhdGUuYm9kaWVzLmZvckVhY2goKGIpID0+IHtcclxuICAgICAgbWF4V2lkdGggPSBNYXRoLm1heChtYXhXaWR0aCwgTWF0aC5hYnMoYi5wb3NpdGlvbi54KSk7XHJcbiAgICAgIG1heEhlaWdodCA9IE1hdGgubWF4KG1heEhlaWdodCwgTWF0aC5hYnMoYi5wb3NpdGlvbi55KSk7XHJcbiAgICB9KSk7XHJcbiAgICBjb25zdCBzY2FsZSA9IDAuNSAqIE1hdGgubWluKGhlaWdodCAvIG1heEhlaWdodCwgd2lkdGggLyBtYXhXaWR0aCk7XHJcblxyXG4gICAgdGhpcy5zY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG5cclxuICAgIGNvbnN0IGNhbWVyYSA9IG5ldyBUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmEoXHJcbiAgICAgIHdpZHRoIC8gLTIsXHJcbiAgICAgIHdpZHRoIC8gMixcclxuICAgICAgaGVpZ2h0IC8gMixcclxuICAgICAgaGVpZ2h0IC8gLTIsXHJcbiAgICAgIDAsXHJcbiAgICAgIDEwMDAwMDAwMDAwLFxyXG4gICAgKTtcclxuICAgIGNhbWVyYS5wb3NpdGlvbi5zZXQoMCwgMCwgTWF0aC5tYXgod2lkdGgsIGhlaWdodCkpO1xyXG5cclxuICAgIGNvbnN0IHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoKTtcclxuICAgIHJlbmRlcmVyLnNldFNpemUod2lkdGgsIGhlaWdodCk7XHJcbiAgICByZW5kZXJlci5hdXRvQ2xlYXIgPSBmYWxzZTtcclxuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudCk7XHJcblxyXG4gICAgbGV0IHN0YXRzOiBTdGF0cyB8IHVuZGVmaW5lZDtcclxuICAgIGlmICh0aGlzLnNpbXVsYXRpb24uc2hvd0RlYnVnSW5mbykge1xyXG4gICAgICBzdGF0cyA9IG5ldyBTdGF0cygpO1xyXG4gICAgICBzdGF0cy5kb20uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgICBzdGF0cy5kb20uc3R5bGUucmlnaHQgPSAnMHB4JztcclxuICAgICAgc3RhdHMuZG9tLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdsZWZ0Jyk7XHJcbiAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoc3RhdHMuZG9tKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5zaW11bGF0aW9uLmNvbnRyb2xsZXIgPT09ICd1aScpIHtcclxuICAgICAgdGhpcy5hZGRDb250cm9scyhlbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25zdCBlYXJ0aERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgLy8gZWFydGhEaXYuY2xhc3NOYW1lID0gJ2xhYmVsJztcclxuICAgIC8vIGVhcnRoRGl2LnRleHRDb250ZW50ID0gJ0VhcnRoaGdramZkZ2hramZnaCc7XHJcbiAgICAvLyBlYXJ0aERpdi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAndHJhbnNwYXJlbnQnO1xyXG4gICAgLy8gZWFydGhEaXYuc3R5bGUuY29sb3IgPSAnd2hpdGUnO1xyXG4gICAgLy8gZWFydGhEaXYuc3R5bGUuZm9udEZhbWlseSA9ICdzYW5zLXNlcmlmJztcclxuICAgIC8vIGVhcnRoRGl2LnN0eWxlLmJhY2tncm91bmQgPSAncmdiYSgwLCAwLCAwLCAwLjYpJztcclxuXHJcbiAgICAvLyBjb25zdCBlYXJ0aExhYmVsID0gbmV3IENTUzJET2JqZWN0KGVhcnRoRGl2KTtcclxuICAgIC8vIGVhcnRoTGFiZWwucG9zaXRpb24uc2V0KDAsIDAsIDApO1xyXG4gICAgLy8gZWFydGhMYWJlbC5jZW50ZXIuc2V0KDAsIDEpO1xyXG4gICAgLy8gLy8gYXJyWzBdLmFkZChlYXJ0aExhYmVsKTtcclxuICAgIC8vIGVhcnRoTGFiZWwubGF5ZXJzLnNldCgwKTtcclxuICAgIC8vIGNvbnN0IGxhYmVsUmVuZGVyZXIgPSBuZXcgQ1NTMkRSZW5kZXJlcigpO1xyXG4gICAgLy8gbGFiZWxSZW5kZXJlci5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgLy8gbGFiZWxSZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgIC8vIGxhYmVsUmVuZGVyZXIuZG9tRWxlbWVudC5zdHlsZS50b3AgPSAnMHB4JztcclxuICAgIC8vIGVsZW1lbnQuYXBwZW5kQ2hpbGQobGFiZWxSZW5kZXJlci5kb21FbGVtZW50KTtcclxuXHJcbiAgICBjb25zdCBvcmJpdENvbnRyb2xzID0gbmV3IE9yYml0Q29udHJvbHMoY2FtZXJhLCByZW5kZXJlci5kb21FbGVtZW50KTtcclxuICAgIG9yYml0Q29udHJvbHMubGlzdGVuVG9LZXlFdmVudHMod2luZG93KTtcclxuICAgIG9yYml0Q29udHJvbHMudXBkYXRlKCk7XHJcblxyXG4gICAgY29uc3QgYXhlc0hlbHBlciA9IG5ldyBUSFJFRS5BeGVzSGVscGVyKHdpZHRoKTtcclxuICAgIHRoaXMuc2NlbmUuYWRkKGF4ZXNIZWxwZXIpO1xyXG4gICAgY29uc3Qgdmlld0hlbHBlciA9IG5ldyBWaWV3SGVscGVyKGNhbWVyYSwgcmVuZGVyZXIuZG9tRWxlbWVudCk7XHJcblxyXG4gICAgLy8gdmFyIG06IE1hcDxzdHJpbmcsIFRIUkVFLkxpbmVTZWdtZW50cz4gPSBuZXcgTWFwKCk7XHJcbiAgICBsZXQgYXJyOiBUSFJFRS5MaW5lU2VnbWVudHNbXSA9IFtdO1xyXG5cclxuICAgIHRoaXMuc2ltdWxhdGlvbi51bml2ZXJzZXMuZm9yRWFjaCgodSkgPT4ge1xyXG4gICAgICB0aGlzLnVuaXZlcnNlVHJhaWxzLnB1c2goXHJcbiAgICAgICAgbmV3IFRocmVlVW5pdmVyc2VUcmFpbChcclxuICAgICAgICAgIHRoaXMuc2ltdWxhdGlvbi5tYXhUcmFpbExlbmd0aCxcclxuICAgICAgICAgIHR5cGVvZiB1LmNvbG9yID09PSAnc3RyaW5nJyA/IHUuY29sb3IgOiB1LmNvbG9yWzBdLFxyXG4gICAgICAgICAgdGhpcy5zY2VuZSEsXHJcbiAgICAgICAgICBzY2FsZSxcclxuICAgICAgICApLFxyXG4gICAgICApO1xyXG4gICAgICB1LmN1cnJTdGF0ZS5ib2RpZXMuZm9yRWFjaCgoYikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNwaCA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeShcclxuICAgICAgICAgIGNsaXBNaW5NYXgoTWF0aC5sb2cyKGIubWFzcykgLSA3MCwgMTAsIDQwKSxcclxuICAgICAgICAgIDgsXHJcbiAgICAgICAgICA4LFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29uc3QgY3VyciA9IG5ldyBUSFJFRS5XaXJlZnJhbWVHZW9tZXRyeShzcGgpO1xyXG4gICAgICAgIGNvbnN0IGxpbmUgPSBuZXcgVEhSRUUuTGluZVNlZ21lbnRzKFxyXG4gICAgICAgICAgY3VycixcclxuICAgICAgICAgIG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgY29sb3I6IG5ldyBUSFJFRS5Db2xvcih1LmNvbG9yKSxcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zY2VuZSEuYWRkKGxpbmUpO1xyXG4gICAgICAgIGxpbmUucG9zaXRpb24uY29weShiLnBvc2l0aW9uLmNsb25lKClcclxuICAgICAgICAgIC5tdWx0aXBseVNjYWxhcihzY2FsZSkpO1xyXG4gICAgICAgIC8vIG0uc2V0KHUubGFiZWwgKyBcIiBcIiArIGIubGFiZWwsIGxpbmUpO1xyXG4gICAgICAgIGFyci5wdXNoKGxpbmUpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgLy8gYXJyWzBdLmFkZChlYXJ0aExhYmVsKVxyXG5cclxuICAgIGNvbnN0IHJlY29yZGVkRnJhbWVzOiBTdGF0ZVtdW10gPSBbXTtcclxuICAgIGNvbnN0IHRvdGFsRnJhbWVzID0gdGhpcy5zaW11bGF0aW9uLm1heEZyYW1lUmF0ZSAqIHJlY29yZEZvcjtcclxuICAgIGxldCBwbGF5SW5kID0gMTtcclxuICAgIHRoaXMuc2ltdWxhdGlvbi51bml2ZXJzZXMuZm9yRWFjaCgodSkgPT4ge1xyXG4gICAgICByZWNvcmRlZEZyYW1lcy5wdXNoKFt1LmN1cnJTdGF0ZS5jbG9uZSgpXSk7XHJcbiAgICB9KTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG90YWxGcmFtZXM7IGkrKykge1xyXG4gICAgICB0aGlzLnNpbXVsYXRpb24uc2ltdWxhdGVTdGVwKDEgLyB0aGlzLnNpbXVsYXRpb24ubWF4RnJhbWVSYXRlKTtcclxuICAgICAgdGhpcy5zaW11bGF0aW9uLnVuaXZlcnNlcy5mb3JFYWNoKCh1LCBqKSA9PiB7XHJcbiAgICAgICAgcmVjb3JkZWRGcmFtZXNbal0ucHVzaCh1LmN1cnJTdGF0ZS5jbG9uZSgpKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYWludCB0aGUgdmlzdWFsaXphdGlvblxyXG4gICAgICogQHBhcmFtIHRpbWVzdGFtcE1zIGN1cnJlbnQgdGltZXN0YW1wIGluIG1pbGxpc2Vjb25kcywgcHJvdmlkZWQgYnkgcmVxdWVzdEFuaW1hdGlvbkZyYW1lXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHBhaW50ID0gKHRpbWVzdGFtcE1zOiBudW1iZXIpID0+IHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHRoaXMuc2ltdWxhdGlvbi5jb250cm9scy5zcGVlZCA9PT0gMFxyXG4gICAgICAgIHx8IHRoaXMuc2ltdWxhdGlvbi5jb250cm9scy5wYXVzZWRcclxuICAgICAgKSB7XHJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHBhaW50KTtcclxuICAgICAgICByZW5kZXJlci5jbGVhcigpO1xyXG4gICAgICAgIHJlbmRlcmVyLnJlbmRlcih0aGlzLnNjZW5lISwgY2FtZXJhKTtcclxuICAgICAgICB2aWV3SGVscGVyLnJlbmRlcihyZW5kZXJlcik7XHJcbiAgICAgICAgLy8gbGFiZWxSZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XHJcbiAgICAgICAgb3JiaXRDb250cm9scy51cGRhdGUoKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBpbmQgPSAwO1xyXG4gICAgICB0aGlzLnNpbXVsYXRpb24udW5pdmVyc2VzLmZvckVhY2goKHUsIGkpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5zaW11bGF0aW9uLmNvbnRyb2xzLnNob3dVbml2ZXJzZVt1LmxhYmVsXSkge1xyXG4gICAgICAgICAgY29uc3QgY3VyclN0YXRlID0gcmVjb3JkZWRGcmFtZXNbaV1bcGxheUluZF07XHJcbiAgICAgICAgICBjdXJyU3RhdGUuYm9kaWVzLmZvckVhY2goKGIpID0+IHtcclxuICAgICAgICAgICAgYXJyW2luZF0udmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGFycltpbmRdLnBvc2l0aW9uLmNvcHkoYi5wb3NpdGlvbi5jbG9uZSgpXHJcbiAgICAgICAgICAgICAgLm11bHRpcGx5U2NhbGFyKHNjYWxlKSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNpbXVsYXRpb24uY29udHJvbHMuc2hvd1RyYWlscykge1xyXG4gICAgICAgICAgICAgIHRoaXMudW5pdmVyc2VUcmFpbHNbaV0uYWRkVHJhaWwoYXJyW2luZF0ucG9zaXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGluZCsrO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHUuY3VyclN0YXRlLmJvZGllcy5mb3JFYWNoKCgpID0+IHtcclxuICAgICAgICAgICAgYXJyW2luZF0udmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpbmQrKztcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAodGhpcy5zaW11bGF0aW9uLnNob3dEZWJ1Z0luZm8gJiYgc3RhdHMpIHtcclxuICAgICAgICBzdGF0cy51cGRhdGUoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcGxheUluZCA9IE1hdGgucm91bmQocGxheUluZCArIHRoaXMuc2ltdWxhdGlvbi5jb250cm9scy5zcGVlZCk7XHJcbiAgICAgIGlmIChwbGF5SW5kIDwgMCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNpbXVsYXRpb24ubG9vcGVkKSB7XHJcbiAgICAgICAgICBwbGF5SW5kID0gKChwbGF5SW5kICUgdG90YWxGcmFtZXMpICsgdG90YWxGcmFtZXMpICUgdG90YWxGcmFtZXM7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHBsYXlJbmQgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmIChwbGF5SW5kID49IHRvdGFsRnJhbWVzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2ltdWxhdGlvbi5sb29wZWQpIHtcclxuICAgICAgICAgIHBsYXlJbmQgJT0gdG90YWxGcmFtZXM7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHBsYXlJbmQgPSB0b3RhbEZyYW1lcyAtIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocGFpbnQpO1xyXG4gICAgICByZW5kZXJlci5jbGVhcigpO1xyXG4gICAgICByZW5kZXJlci5yZW5kZXIodGhpcy5zY2VuZSEsIGNhbWVyYSk7XHJcbiAgICAgIHZpZXdIZWxwZXIucmVuZGVyKHJlbmRlcmVyKTtcclxuICAgICAgLy8gbGFiZWxSZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XHJcbiAgICAgIG9yYml0Q29udHJvbHMudXBkYXRlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShwYWludCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdG9wIHRoZSBzaW11bGF0aW9uIGFuZCB2aXN1YWxpemF0aW9uLlxyXG4gICAqL1xyXG4gIHN0b3AoKTogdm9pZCB7XHJcbiAgICB0aGlzLnNjZW5lPy5jbGVhcigpO1xyXG4gICAgdGhpcy5zY2VuZSA9IHVuZGVmaW5lZDtcclxuICAgIHRoaXMudW5pdmVyc2VUcmFpbHMuZm9yRWFjaCgodXQpID0+IHtcclxuICAgICAgdXQucG9wQWxsVHJhaWxzKCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMudW5pdmVyc2VUcmFpbHMgPSBbXTtcclxuICB9XHJcbn1cclxuIiwiLyogZXNsaW50LWRpc2FibGUganNkb2MvcmVxdWlyZS1wYXJhbSAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBqc2RvYy9jaGVjay1wYXJhbS1uYW1lcyAqL1xyXG5pbXBvcnQgeyB0eXBlIFVuaXZlcnNlIH0gZnJvbSAnLi9Vbml2ZXJzZSc7XHJcbmltcG9ydCB7IHR5cGUgVmlzdWFsaXplciB9IGZyb20gJy4vVmlzdWFsaXplcic7XHJcbmltcG9ydCB7XHJcbiAgUmVhbFRpbWVWaXN1YWxpemVyLFxyXG4gIFJlYWxUaW1lVmlzdWFsaXplcjNELFxyXG4gIFJlY29yZGluZ1Zpc3VhbGl6ZXIsXHJcbiAgUmVjb3JkaW5nVmlzdWFsaXplcjNELFxyXG59IGZyb20gJy4vbGlicmFyeS9WaXN1YWxpemVyJztcclxuXHJcbi8qKlxyXG4gKiBWaXN1YWxpemF0aW9uIHR5cGUuXHJcbiAqIEBjYXRlZ29yeSBUeXBlc1xyXG4gKi9cclxuZXhwb3J0IHR5cGUgVmlzVHlwZSA9ICcyRCcgfCAnM0QnO1xyXG4vKipcclxuICogQ29udHJvbGxlciB0eXBlLlxyXG4gKiAtICd1aScgZm9yIHVzZXIgaW50ZXJmYWNlIGNvbnRyb2wuXHJcbiAqIC0gJ2NvZGUnIGZvciBtYW51YWwgY29udHJvbCB2aWEgY29kZS5cclxuICogLSAnbm9uZScgZm9yIG5vIGNvbnRyb2wuXHJcbiAqIEBjYXRlZ29yeSBUeXBlc1xyXG4gKi9cclxuZXhwb3J0IHR5cGUgQ29udHJvbGxlclR5cGUgPSAndWknIHwgJ2NvZGUnIHwgJ25vbmUnO1xyXG5cclxuLyoqXHJcbiAqIEEgU2ltdWxhdGlvbiBvYmplY3QgdGhhdCBjb250YWlucyBVbml2ZXJzZXMgYW5kIGEgVmlzdWFsaXplci5cclxuICogQGNhdGVnb3J5IEJ1aWxkaW5nIGJsb2Nrc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNpbXVsYXRpb24ge1xyXG4gIC8qKlxyXG4gICAqIFZpc3VhbGl6YXRpb24gb2JqZWN0IHVzZWQgdG8gcmVuZGVyIHRoZSBzaW11bGF0aW9uLlxyXG4gICAqIEBoaWRkZW5cclxuICAgKi9cclxuICByZWFkb25seSB2aXN1YWxpemVyOiBWaXN1YWxpemVyO1xyXG4gIC8qKlxyXG4gICAqIEFycmF5IG9mIFVuaXZlcnNlcyB0aGF0IG1ha2UgdXAgdGhpcyBzaW11bGF0aW9uLiBBbGwgdW5pdmVyc2VzIGFyZSBzaW11bGF0ZWQgaW5kZXBlbmRlbnRseSBhbmQgdmlzdWFsaXplZCB0b2dldGhlci5cclxuICAgKiBAaGlkZGVuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgdW5pdmVyc2VzOiBVbml2ZXJzZVtdO1xyXG4gIC8qKlxyXG4gICAqIENvbnRyb2xsZXIgdHlwZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHNpbXVsYXRpb24uXHJcbiAgICogQGhpZGRlblxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGNvbnRyb2xsZXI6IENvbnRyb2xsZXJUeXBlO1xyXG4gIC8qKlxyXG4gICAqIE1heGltdW0gZnJhbWUgcmF0ZSBvZiB0aGUgdmlzdWFsaXphdGlvbi5cclxuICAgKiBAaGlkZGVuXHJcbiAgICovXHJcbiAgbWF4RnJhbWVSYXRlOiBudW1iZXI7XHJcbiAgLyoqXHJcbiAgICogTWF4aW11bSB0cmFpbCBsZW5ndGggdXNlZCBpbiB0aGUgdmlzdWFsaXphdGlvbi5cclxuICAgKiBAaGlkZGVuXHJcbiAgICovXHJcbiAgbWF4VHJhaWxMZW5ndGg6IG51bWJlcjtcclxuICAvKipcclxuICAgKiBXaGV0aGVyIHRoZSBzaW11bGF0aW9uIGlzIGxvb3BlZCBpbiBjYXNlIG9mIGEgcmVjb3JkaW5nLlxyXG4gICAqIEBoaWRkZW5cclxuICAgKi9cclxuICBsb29wZWQ6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnRyb2xzIG9iamVjdCB1c2VkIHRvIGNvbnRyb2wgdGhlIHNpbXVsYXRpb24uXHJcbiAgICogQGhpZGRlblxyXG4gICAqL1xyXG4gIGNvbnRyb2xzOiB7XHJcbiAgICAvKipcclxuICAgICAqIFNwZWVkIG9mIHRoZSBzaW11bGF0aW9uIGFzIGEgc2NhbGUgb2Ygbm9ybWFsIHRpbWUuXHJcbiAgICAgKi9cclxuICAgIHNwZWVkOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIFRydWUgaWYgdGhlIHNpbXVsYXRpb24gaXMgcGF1c2VkLlxyXG4gICAgICovXHJcbiAgICBwYXVzZWQ6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIFRydWUgaWYgdHJhaWxzIGFyZSBzaG93biBpbiB0aGUgdmlzdWFsaXphdGlvbi5cclxuICAgICAqL1xyXG4gICAgc2hvd1RyYWlsczogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogT2JqZWN0IGNvbnRhaW5pbmcgd2hldGhlciBlYWNoIHVuaXZlcnNlIGlzIHNob3duIGluIHRoZSB2aXN1YWxpemF0aW9uLlxyXG4gICAgICovXHJcbiAgICBzaG93VW5pdmVyc2U6IHtcclxuICAgICAgW2tleTogc3RyaW5nXTogYm9vbGVhbjtcclxuICAgIH07XHJcbiAgfSA9IHtcclxuICAgICAgc3BlZWQ6IDEsXHJcbiAgICAgIHBhdXNlZDogdHJ1ZSxcclxuICAgICAgc2hvd1RyYWlsczogZmFsc2UsXHJcbiAgICAgIHNob3dVbml2ZXJzZToge30sXHJcbiAgICB9O1xyXG4gIC8qKlxyXG4gICAqIFRydWUgaWYgZGVidWcgaW5mbyBpcyBzaG93biBpbiB0aGUgdmlzdWFsaXphdGlvbi5cclxuICAgKiBAaGlkZGVuXHJcbiAgICovXHJcbiAgc2hvd0RlYnVnSW5mbzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgbmV3IFNpbXVsYXRpb24gb2JqZWN0IHdpdGggdGhlIHByb3ZpZGVkIFVuaXZlcnNlcyBhbmQgdmlzdWFsaXphdGlvbiBjb25maWcuXHJcbiAgICogQHBhcmFtIHVuaXZlcnNlcyBhcnJheSBvZiBVbml2ZXJzZXMuXHJcbiAgICogQHBhcmFtIHZpc1R5cGUgdmlzdWFsaXphdGlvbiB0eXBlLlxyXG4gICAqIEBwYXJhbSByZWNvcmQgd2hldGhlciB0byByZWNvcmQgdGhlIHNpbXVsYXRpb24uXHJcbiAgICogQHBhcmFtIGxvb3BlZCB3aGV0aGVyIHRvIGxvb3AgdGhlIHJlY29yZGVkIHNpbXVsYXRpb24uXHJcbiAgICogQHBhcmFtIGNvbnRyb2xsZXIgY29udHJvbGxlciB0eXBlLlxyXG4gICAqIEBwYXJhbSBzaG93VHJhaWxzIHdoZXRoZXIgdG8gc2hvdyB0cmFpbHMgaW4gdGhlIHZpc3VhbGl6YXRpb24uXHJcbiAgICogQHBhcmFtIHNob3dEZWJ1Z0luZm8gd2hldGhlciB0byBzaG93IGRlYnVnIGluZm8gaW4gdGhlIHZpc3VhbGl6YXRpb24uXHJcbiAgICogQHBhcmFtIG1heEZyYW1lUmF0ZSBtYXhpbXVtIGZyYW1lIHJhdGUgb2YgdGhlIHZpc3VhbGl6YXRpb24uXHJcbiAgICogQHBhcmFtIG1heFRyYWlsTGVuZ3RoIG1heGltdW0gdHJhaWwgZm9yIGVhY2ggdW5pdmVyc2UuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICB1bml2ZXJzZXM6IFVuaXZlcnNlIHwgVW5pdmVyc2VbXSxcclxuICAgIHtcclxuICAgICAgdmlzVHlwZSA9ICcyRCcsXHJcbiAgICAgIHJlY29yZCA9IGZhbHNlLFxyXG4gICAgICBsb29wZWQgPSB0cnVlLFxyXG4gICAgICBjb250cm9sbGVyID0gJ25vbmUnLFxyXG4gICAgICBzaG93VHJhaWxzID0gZmFsc2UsXHJcbiAgICAgIHNob3dEZWJ1Z0luZm8gPSBmYWxzZSxcclxuICAgICAgbWF4RnJhbWVSYXRlID0gLTEsXHJcbiAgICAgIG1heFRyYWlsTGVuZ3RoID0gMTAwLFxyXG4gICAgfToge1xyXG4gICAgICB2aXNUeXBlPzogVmlzVHlwZTtcclxuICAgICAgcmVjb3JkPzogYm9vbGVhbjtcclxuICAgICAgbG9vcGVkPzogYm9vbGVhbjtcclxuICAgICAgY29udHJvbGxlcj86IENvbnRyb2xsZXJUeXBlO1xyXG4gICAgICBzaG93VHJhaWxzPzogYm9vbGVhbjtcclxuICAgICAgc2hvd0RlYnVnSW5mbz86IGJvb2xlYW47XHJcbiAgICAgIG1heEZyYW1lUmF0ZT86IG51bWJlcjtcclxuICAgICAgbWF4VHJhaWxMZW5ndGg/OiBudW1iZXI7XHJcbiAgICB9LFxyXG4gICkge1xyXG4gICAgdGhpcy51bml2ZXJzZXMgPSBBcnJheS5pc0FycmF5KHVuaXZlcnNlcykgPyB1bml2ZXJzZXMgOiBbdW5pdmVyc2VzXTtcclxuICAgIGlmICh0aGlzLnVuaXZlcnNlcy5sZW5ndGggPiAxMCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvbyBtYW55IHVuaXZlcnNlcycpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdW5pcXVlTGFiZWxzID0gbmV3IFNldCh0aGlzLnVuaXZlcnNlcy5tYXAoKHUpID0+IHUubGFiZWwpKTtcclxuICAgIGlmICh1bmlxdWVMYWJlbHMuc2l6ZSAhPT0gdGhpcy51bml2ZXJzZXMubGVuZ3RoKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignRHVwbGljYXRlIGxhYmVsIGluIHVuaXZlcnNlcycpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jb250cm9sbGVyID0gY29udHJvbGxlcjtcclxuICAgIHRoaXMudW5pdmVyc2VzLmZvckVhY2goKHUpID0+IHtcclxuICAgICAgdGhpcy5jb250cm9scy5zaG93VW5pdmVyc2VbdS5sYWJlbF0gPSB0cnVlO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLmNvbnRyb2xzLnNob3dUcmFpbHMgPSBzaG93VHJhaWxzO1xyXG4gICAgdGhpcy5zaG93RGVidWdJbmZvID0gc2hvd0RlYnVnSW5mbztcclxuICAgIHRoaXMubWF4RnJhbWVSYXRlID0gbWF4RnJhbWVSYXRlO1xyXG4gICAgdGhpcy5tYXhUcmFpbExlbmd0aCA9IG1heFRyYWlsTGVuZ3RoO1xyXG4gICAgdGhpcy5sb29wZWQgPSBsb29wZWQ7XHJcbiAgICBpZiAocmVjb3JkKSB7XHJcbiAgICAgIC8vIGlmICh0aGlzLnVuaXZlcnNlcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgIC8vICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHJlY29yZCBtdWx0aXBsZSB1bml2ZXJzZXNcIik7XHJcbiAgICAgIC8vIH1cclxuICAgICAgdGhpcy5tYXhGcmFtZVJhdGUgPSA2MDtcclxuICAgICAgdGhpcy52aXN1YWxpemVyXHJcbiAgICAgICAgPSB2aXNUeXBlID09PSAnMkQnXHJcbiAgICAgICAgICA/IG5ldyBSZWNvcmRpbmdWaXN1YWxpemVyKHRoaXMpXHJcbiAgICAgICAgICA6IG5ldyBSZWNvcmRpbmdWaXN1YWxpemVyM0QodGhpcyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnZpc3VhbGl6ZXJcclxuICAgICAgICA9IHZpc1R5cGUgPT09ICcyRCdcclxuICAgICAgICAgID8gbmV3IFJlYWxUaW1lVmlzdWFsaXplcih0aGlzKVxyXG4gICAgICAgICAgOiBuZXcgUmVhbFRpbWVWaXN1YWxpemVyM0QodGhpcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgdGhlIHNwZWVkIG9mIHRoZSBzaW11bGF0aW9uLlxyXG4gICAqIEByZXR1cm5zIHNwZWVkIG9mIHRoZSBzaW11bGF0aW9uIGFzIGEgc2NhbGUgb2Ygbm9ybWFsIHRpbWUuXHJcbiAgICovXHJcbiAgZ2V0U3BlZWQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRyb2xzLnNwZWVkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IHRoZSBzcGVlZCBvZiB0aGUgc2ltdWxhdGlvbi4gT25seSB3b3JrcyBpZiB0aGUgY29udHJvbGxlciBpcyAnY29kZScuXHJcbiAgICogQHBhcmFtIHNwZWVkIHNwZWVkIG9mIHRoZSBzaW11bGF0aW9uIGFzIGEgc2NhbGUgb2Ygbm9ybWFsIHRpbWUuXHJcbiAgICovXHJcbiAgc2V0U3BlZWQoc3BlZWQ6IG51bWJlcikge1xyXG4gICAgaWYgKHRoaXMuY29udHJvbGxlciA9PT0gJ2NvZGUnKSB7XHJcbiAgICAgIHRoaXMuY29udHJvbHMuc3BlZWQgPSBzcGVlZDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB3aGV0aGVyIHRoZSBzaW11bGF0aW9uIGlzIHBsYXlpbmcuXHJcbiAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgc2ltdWxhdGlvbiBpcyBwbGF5aW5nLlxyXG4gICAqL1xyXG4gIGlzUGxheWluZygpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhdGhpcy5jb250cm9scy5wYXVzZWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQYXVzZSB0aGUgc2ltdWxhdGlvbi4gT25seSB3b3JrcyBpZiB0aGUgY29udHJvbGxlciBpcyAnY29kZScuXHJcbiAgICovXHJcbiAgcGF1c2UoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5jb250cm9sbGVyID09PSAnY29kZScpIHtcclxuICAgICAgdGhpcy5jb250cm9scy5wYXVzZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzdW1lIHRoZSBzaW11bGF0aW9uLiBPbmx5IHdvcmtzIGlmIHRoZSBjb250cm9sbGVyIGlzICdjb2RlJy5cclxuICAgKi9cclxuICByZXN1bWUoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5jb250cm9sbGVyID09PSAnY29kZScpIHtcclxuICAgICAgdGhpcy5jb250cm9scy5wYXVzZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB3aGV0aGVyIHRyYWlscyBhcmUgc2hvd24gaW4gdGhlIHZpc3VhbGl6YXRpb24uXHJcbiAgICogQHJldHVybnMgdHJ1ZSBpZiB0cmFpbHMgYXJlIHNob3duLlxyXG4gICAqL1xyXG4gIGdldFNob3dUcmFpbHMoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250cm9scy5zaG93VHJhaWxzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IHdoZXRoZXIgdG8gc2hvdyB0cmFpbHMgaW4gdGhlIHZpc3VhbGl6YXRpb24uIE9ubHkgd29ya3MgaWYgdGhlIGNvbnRyb2xsZXIgaXMgJ2NvZGUnLlxyXG4gICAqIEBwYXJhbSBzaG93VHJhaWxzIHRydWUgdG8gc2hvdyB0cmFpbHMuXHJcbiAgICovXHJcbiAgc2V0U2hvd1RyYWlscyhzaG93VHJhaWxzOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5jb250cm9sbGVyID09PSAnY29kZScpIHtcclxuICAgICAgdGhpcy5jb250cm9scy5zaG93VHJhaWxzID0gc2hvd1RyYWlscztcclxuICAgICAgaWYgKCFzaG93VHJhaWxzKSB7XHJcbiAgICAgICAgLy8gVE9ET1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUcnVlIGlmIHRoZSB1bml2ZXJzZSB3aXRoIHRoZSBnaXZlbiBsYWJlbCBpcyBzaG93bi5cclxuICAgKiBAcGFyYW0gbGFiZWwgdW5pdmVyc2UgbGFiZWwuXHJcbiAgICogQHJldHVybnMgd2hldGhlciB0aGUgdW5pdmVyc2UgaXMgc2hvd24uXHJcbiAgICovXHJcbiAgZ2V0U2hvd1VuaXZlcnNlKGxhYmVsOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRyb2xzLnNob3dVbml2ZXJzZVtsYWJlbF07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgd2hldGhlciB0byBzaG93IHRoZSB1bml2ZXJzZSB3aXRoIHRoZSBnaXZlbiBsYWJlbC4gT25seSB3b3JrcyBpZiB0aGUgY29udHJvbGxlciBpcyAnY29kZScuXHJcbiAgICogQHBhcmFtIGxhYmVsIHVuaXZlcnNlIGxhYmVsLlxyXG4gICAqIEBwYXJhbSBzaG93IHRydWUgdG8gc2hvdyB0aGUgdW5pdmVyc2UuXHJcbiAgICovXHJcbiAgc2V0U2hvd1VuaXZlcnNlKGxhYmVsOiBzdHJpbmcsIHNob3c6IGJvb2xlYW4pIHtcclxuICAgIGlmICh0aGlzLmNvbnRyb2xsZXIgPT09ICdjb2RlJykge1xyXG4gICAgICB0aGlzLmNvbnRyb2xzLnNob3dVbml2ZXJzZVtsYWJlbF0gPSBzaG93O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBtYXhpbXVtIHRyYWlsIGxlbmd0aCB1c2VkIGluIHRoZSB2aXN1YWxpemF0aW9uLlxyXG4gICAqIEByZXR1cm5zIG1heGltdW0gdHJhaWwgbGVuZ3RoLlxyXG4gICAqL1xyXG4gIGdldE1heFRyYWlsTGVuZ3RoKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXhUcmFpbExlbmd0aDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCB0aGUgbWF4aW11bSB0cmFpbCBsZW5ndGggdXNlZCBpbiB0aGUgdmlzdWFsaXphdGlvbi4gQ2hhbmdlcyBvbmx5IGFwcGx5IG9uIHRoZSBuZXh0IFNpbXVsYXRpb24ucGxheSgpIGNhbGwuXHJcbiAgICogQHBhcmFtIG1heFRyYWlsTGVuZ3RoIG1heGltdW0gdHJhaWwgbGVuZ3RoLlxyXG4gICAqL1xyXG4gIHNldE1heFRyYWlsTGVuZ3RoKG1heFRyYWlsTGVuZ3RoOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmNvbnRyb2xsZXIgPT09ICdjb2RlJykge1xyXG4gICAgICB0aGlzLm1heFRyYWlsTGVuZ3RoID0gbWF4VHJhaWxMZW5ndGg7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTaW11bGF0ZXMgYSBzaW5nbGUgc3RlcCBpbiB0aGlzIHNpbXVsYXRpb24uXHJcbiAgICogQHBhcmFtIGRlbHRhVCB0aW1lIHN0ZXAgdG8gc2ltdWxhdGUuXHJcbiAgICogQGhpZGRlblxyXG4gICAqL1xyXG4gIHNpbXVsYXRlU3RlcChkZWx0YVQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy51bml2ZXJzZXMuZm9yRWFjaCgodW5pdmVyc2UpID0+IHtcclxuICAgICAgdW5pdmVyc2Uuc2ltdWxhdGVTdGVwKGRlbHRhVCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluc2VydCB0aGUgc2ltdWxhdGlvbiB2aXN1YWxpemF0aW9uIGluIHRoZSBkaXYgd2l0aCB0aGUgZ2l2ZW4gaWQuXHJcbiAgICogQHBhcmFtIGRpdklkIGRpdiBpZC5cclxuICAgKiBAcGFyYW0gc3BlZWQgaW5pdGlhbCB0aW1lIHNjYWxlLlxyXG4gICAqIEBwYXJhbSBwYXVzZWQgd2hldGhlciB0byBzdGFydCB0aGUgc2ltdWxhdGlvbiBwYXVzZWQuXHJcbiAgICogQHBhcmFtIHJlY29yZEZvciBudW1iZXIgb2Ygc2Vjb25kcyB0byByZWNvcmQgZm9yLCBvbmx5IHVzZWQgaWYgaW4gcmVjb3JkIG1vZGUuXHJcbiAgICovXHJcbiAgc3RhcnQoXHJcbiAgICBkaXZJZDogc3RyaW5nLFxyXG4gICAgd2lkdGg6IG51bWJlcixcclxuICAgIGhlaWdodDogbnVtYmVyLFxyXG4gICAgc3BlZWQ6IG51bWJlciA9IDEsXHJcbiAgICBwYXVzZWQ6IGJvb2xlYW4gPSBmYWxzZSxcclxuICAgIHJlY29yZEZvcjogbnVtYmVyID0gMCxcclxuICApOiB2b2lkIHtcclxuICAgIGlmIChyZWNvcmRGb3IgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlY29yZEZvciBtdXN0IGJlIGRlZmluZWQgaWYgcmVjb3JkIGlzIHRydWUnKTtcclxuICAgIH1cclxuICAgIHRoaXMuY29udHJvbHMucGF1c2VkID0gcGF1c2VkO1xyXG4gICAgdGhpcy5jb250cm9scy5zcGVlZCA9IHNwZWVkO1xyXG4gICAgdGhpcy52aXN1YWxpemVyLnN0YXJ0KGRpdklkLCB3aWR0aCwgaGVpZ2h0LCByZWNvcmRGb3IpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RvcCBhbmQgY2xlYXIgdGhlIHNpbXVsYXRpb24uXHJcbiAgICovXHJcbiAgc3RvcCgpOiB2b2lkIHtcclxuICAgIHRoaXMudmlzdWFsaXplci5zdG9wKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICd0aHJlZSc7XHJcbmltcG9ydCB7IHR5cGUgU3RhdGUgfSBmcm9tICcuLi9TdGF0ZSc7XHJcbmltcG9ydCB7IHR5cGUgVHJhbnNmb3JtYXRpb24gfSBmcm9tICcuLi9UcmFuc2Zvcm1hdGlvbic7XHJcblxyXG4vKipcclxuICogRnJhbWUgb2YgcmVmZXJlbmNlIHRyYW5zZm9ybWF0aW9uIHRvIHRoZSBjZW50ZXIgb2YgdGhlIGZpcnN0IGJvZHkgaW4gdGhlIHN5c3RlbS5cclxuICogQGNhdGVnb3J5IFRyYW5zZm9ybWF0aW9uc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEJvZHlDZW50ZXJUcmFuc2Zvcm1hdGlvbiBpbXBsZW1lbnRzIFRyYW5zZm9ybWF0aW9uIHtcclxuICAvKipcclxuICAgKiBUcmFuc2Zvcm0gdGhlIGZyYW1lIG9mIHJlZmVyZW5jZSB0byB0aGUgY2VudGVyIG9mIHRoZSBmaXJzdCBib2R5IGluIHRoZSBzeXN0ZW0uXHJcbiAgICogQHBhcmFtIHN0YXRlIHN0YXRlIHRvIHRyYW5zZm9ybS5cclxuICAgKiBAcmV0dXJucyB0cmFuc2Zvcm1lZCBzdGF0ZS5cclxuICAgKi9cclxuICB0cmFuc2Zvcm0oc3RhdGU6IFN0YXRlKTogU3RhdGUge1xyXG4gICAgY29uc3QgdHJhbnNmb3JtID0gc3RhdGUuYm9kaWVzWzBdLnBvc2l0aW9uLmNsb25lKCk7XHJcbiAgICBzdGF0ZS5ib2RpZXMuZm9yRWFjaCgoYikgPT4ge1xyXG4gICAgICBiLnBvc2l0aW9uLnN1Yih0cmFuc2Zvcm0pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gc3RhdGU7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogRnJhbWUgb2YgcmVmZXJlbmNlIHRyYW5zZm9ybWF0aW9uIHRvIHRoZSBjZW50ZXIgb2YgbWFzcyBvZiB0aGUgc3lzdGVtLlxyXG4gKiBAY2F0ZWdvcnkgVHJhbnNmb3JtYXRpb25zXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ29NVHJhbnNmb3JtYXRpb24gaW1wbGVtZW50cyBUcmFuc2Zvcm1hdGlvbiB7XHJcbiAgLyoqXHJcbiAgICogVHJhbnNmb3JtIHRoZSBmcmFtZSBvZiByZWZlcmVuY2UgdG8gdGhlIGNlbnRlciBvZiBtYXNzIG9mIHRoZSBzeXN0ZW0uXHJcbiAgICogQHBhcmFtIHN0YXRlIHN0YXRlIHRvIHRyYW5zZm9ybS5cclxuICAgKiBAcmV0dXJucyB0cmFuc2Zvcm1lZCBzdGF0ZS5cclxuICAgKi9cclxuICB0cmFuc2Zvcm0oc3RhdGU6IFN0YXRlKTogU3RhdGUge1xyXG4gICAgbGV0IHRvdGFsTWFzcyA9IDA7XHJcbiAgICBsZXQgY29tID0gbmV3IFZlY3RvcjMoKTtcclxuICAgIHN0YXRlLmJvZGllcy5mb3JFYWNoKChiKSA9PiB7XHJcbiAgICAgIHRvdGFsTWFzcyArPSBiLm1hc3M7XHJcbiAgICAgIGNvbS5hZGQoYi5wb3NpdGlvbi5jbG9uZSgpXHJcbiAgICAgICAgLm11bHRpcGx5U2NhbGFyKGIubWFzcykpO1xyXG4gICAgfSk7XHJcbiAgICBjb20uZGl2aWRlU2NhbGFyKHRvdGFsTWFzcyk7XHJcbiAgICBzdGF0ZS5ib2RpZXMuZm9yRWFjaCgoYikgPT4ge1xyXG4gICAgICBiLnBvc2l0aW9uLnN1Yihjb20pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gc3RhdGU7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogRnJhbWUgb2YgcmVmZXJlbmNlIHRyYW5zZm9ybWF0aW9uIGFyb3VuZCBhbiBheGlzIGJ5IGFuIGFuZ2xlLiBNYWtlcyBzZW5zZSB0byB0aGlzIHRyYW5zZm9ybWF0aW9uIG9ubHkgZHVyaW5nIGluaXRpYWxpemF0aW9uIG9mIHRoZSB1bml2ZXJzZSBhbmQgbm90IGF0IGV2ZXJ5IHRpbWUgc3RlcC5cclxuICogQGNhdGVnb3J5IFRyYW5zZm9ybWF0aW9uc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJvdGF0ZVRyYW5zZm9ybWF0aW9uIGltcGxlbWVudHMgVHJhbnNmb3JtYXRpb24ge1xyXG4gIHJlYWRvbmx5IGF4aXM6IFZlY3RvcjM7XHJcbiAgcmVhZG9ubHkgYW5nbGU6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgbmV3IFJvdGF0ZVRyYW5zZm9ybWVyLlxyXG4gICAqIEBwYXJhbSBheGlzIGF4aXMgdG8gcm90YXRlIGFyb3VuZC5cclxuICAgKiBAcGFyYW0gYW5nbGUgYW5nbGUgdG8gcm90YXRlIGJ5LlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKGF4aXM6IFZlY3RvcjMsIGFuZ2xlOiBudW1iZXIpIHtcclxuICAgIHRoaXMuYXhpcyA9IGF4aXM7XHJcbiAgICB0aGlzLmFuZ2xlID0gYW5nbGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUcmFuc2Zvcm0gdGhlIGZyYW1lIG9mIHJlZmVyZW5jZSBhcm91bmQgYW4gYXhpcyBieSBhbiBhbmdsZS5cclxuICAgKiBAcGFyYW0gc3RhdGUgc3RhdGUgdG8gdHJhbnNmb3JtLlxyXG4gICAqIEByZXR1cm5zIHRyYW5zZm9ybWVkIHN0YXRlLlxyXG4gICAqL1xyXG4gIHRyYW5zZm9ybShzdGF0ZTogU3RhdGUpOiBTdGF0ZSB7XHJcbiAgICBzdGF0ZS5ib2RpZXMuZm9yRWFjaCgoYikgPT4ge1xyXG4gICAgICBiLnBvc2l0aW9uLmFwcGx5QXhpc0FuZ2xlKHRoaXMuYXhpcywgdGhpcy5hbmdsZSk7XHJcbiAgICAgIGIudmVsb2NpdHkuYXBwbHlBeGlzQW5nbGUodGhpcy5heGlzLCB0aGlzLmFuZ2xlKTtcclxuICAgICAgYi5hY2NlbGVyYXRpb24uYXBwbHlBeGlzQW5nbGUodGhpcy5heGlzLCB0aGlzLmFuZ2xlKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHN0YXRlO1xyXG4gIH1cclxufVxyXG5cclxuLy8gZXhwb3J0IGNsYXNzIFBpblRyYW5zZm9ybWVyIGltcGxlbWVudHMgVHJhbnNmb3JtZXIge1xyXG4vLyAgIHJlYWRvbmx5IGF4aXM6IFZlY3RvcjM7XHJcbi8vICAgcmVhZG9ubHkgaW5kZXg6IG51bWJlcjtcclxuXHJcbi8vICAgY29uc3RydWN0b3IoYXhpczogVmVjdG9yMywgaW5kZXg6IG51bWJlcikge1xyXG4vLyAgICAgdGhpcy5heGlzID0gYXhpcztcclxuLy8gICAgIHRoaXMuaW5kZXggPSBpbmRleFxyXG4vLyAgIH1cclxuXHJcbi8vICAgdHJhbnNmb3JtKHN0YXRlOiBTdGF0ZSk6IFN0YXRlIHtcclxuLy8gICAgIGNvbnN0IGFuZ2xlID0gc3RhdGUuYm9kaWVzW3RoaXMuaW5kZXhdLnBvc2l0aW9uLmNsb25lKCkuYW5nbGVUbyh0aGlzLmF4aXMpO1xyXG4vLyAgICAgY29uc3QgcGl2b3QgPSBzdGF0ZS5ib2RpZXNbdGhpcy5pbmRleF0ucG9zaXRpb24uY2xvbmUoKS5jcm9zcyh0aGlzLmF4aXMuY2xvbmUoKSkubm9ybWFsaXplKCk7XHJcbi8vICAgICBzdGF0ZS5ib2RpZXMuZm9yRWFjaCgoYikgPT4ge1xyXG4vLyAgICAgICBiLnBvc2l0aW9uLmFwcGx5QXhpc0FuZ2xlKHBpdm90LmNsb25lKCksIGFuZ2xlKTtcclxuLy8gICAgICAgYi52ZWxvY2l0eS5hcHBseUF4aXNBbmdsZShwaXZvdC5jbG9uZSgpLCBhbmdsZSk7XHJcbi8vICAgICAgIGIuYWNjZWxlcmF0aW9uLmFwcGx5QXhpc0FuZ2xlKHBpdm90LmNsb25lKCksIGFuZ2xlKTtcclxuLy8gICAgIH0pO1xyXG4vLyAgICAgcmV0dXJuIHN0YXRlO1xyXG4vLyAgIH1cclxuLy8gfVxyXG4iLCJpbXBvcnQgeyB0eXBlIFN0YXRlIH0gZnJvbSAnLi9TdGF0ZSc7XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIEZyYW1lIG9mIFJlZmVyZW5jZSB0cmFuc2Zvcm1hdGlvbi5cclxuICogQGNhdGVnb3J5IEludGVyZmFjZXNcclxuICogQGNhdGVnb3J5IFRyYW5zZm9ybWF0aW9uc1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2Zvcm1hdGlvbiB7XHJcbiAgLyoqXHJcbiAgICogVHJhbnNmb3JtIHRoZSBzdGF0ZSB0byBhIG5ldyBmcmFtZSBvZiByZWZlcmVuY2UuXHJcbiAgICogQHBhcmFtIHN0YXRlIHN0YXRlIHRvIHRyYW5zZm9ybS5cclxuICAgKiBAcGFyYW0gZGVsdGFUIHRpbWUgc3RlcCB0YWtlbiB0byBnZXQgdG8gdGhpcyBzdGF0ZS4gT25seSBhcHBsaWNhYmxlIGZvciB0aW1lLWRlcGVuZGVudCB0cmFuc2Zvcm1hdGlvbnMuXHJcbiAgICogQHJldHVybnMgdHJhbnNmb3JtZWQgc3RhdGUuXHJcbiAgICovXHJcbiAgdHJhbnNmb3JtKHN0YXRlOiBTdGF0ZSwgZGVsdGFUOiBudW1iZXIpOiBTdGF0ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgRnJhbWUgb2YgUmVmZXJlbmNlIHRyYW5zZm9ybWF0aW9uIHRoYXQgdXNlcyB0aGUgdXNlci1kZWZpbmVkIGxhbWJkYSBmdW5jdGlvbi5cclxuICogQGNhdGVnb3J5IFRyYW5zZm9ybWF0aW9uc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIExhbWJkYVRyYW5zZm9ybWF0aW9uIGltcGxlbWVudHMgVHJhbnNmb3JtYXRpb24ge1xyXG4gIHJlYWRvbmx5IGZuOiAoc3RhdGU6IFN0YXRlLCBkZWx0YVQ6IG51bWJlcikgPT4gU3RhdGU7XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIG5ldyBMYW1iZGFUcmFuc2Zvcm1lciB3aXRoIHRoZSBwcm92aWRlZCBsYW1iZGEgZnVuY3Rpb24uXHJcbiAgICogLSBMYW1iZGEgZnVuY3Rpb24gc2hvdWxkIHRha2UgaW4gdGhlIGN1cnJlbnQgc3RhdGUgYW5kIHRoZSB0aW1lIHN0ZXAgYW5kIHJldHVybiB0aGUgdHJhbnNmb3JtZWQgc3RhdGUuXHJcbiAgICogLSBUaGUgdGltZSBzdGVwIGlzIG9ubHkgYXBwbGljYWJsZSBmb3IgdGltZS1kZXBlbmRlbnQgdHJhbnNmb3JtYXRpb25zLlxyXG4gICAqIC0gVHJhbnNmb3JtZWQgc3RhdGUgc2hvdWxkIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIGJvZGllcyBhcyB0aGUgaW5wdXQgc3RhdGUsIGFuZCB0aGUgb3JkZXIgc2hvdWxkIGJlIHByZXNlcnZlZC5cclxuICAgKiBAcGFyYW0gZm4gbGFtYmRhIGZ1bmN0aW9uLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKGZuOiAoc3RhdGU6IFN0YXRlLCBkZWx0YVQ6IG51bWJlcikgPT4gU3RhdGUpIHtcclxuICAgIHRoaXMuZm4gPSBmbjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRyYW5zZm9ybSB0aGUgc3RhdGUncyBmcmFtZSBvZiByZWZlcmVuY2UgdXNpbmcgdGhlIGxhbWJkYSBmdW5jdGlvbi5cclxuICAgKiBAcGFyYW0gc3RhdGUgc3RhdGUgdG8gdHJhbnNmb3JtLlxyXG4gICAqIEBwYXJhbSBkZWx0YVQgdGltZSBzdGVwIHRha2VuIHRvIGdldCB0byB0aGlzIHN0YXRlLiBPbmx5IGFwcGxpY2FibGUgZm9yIHRpbWUtZGVwZW5kZW50IHRyYW5zZm9ybWF0aW9ucy5cclxuICAgKiBAcmV0dXJucyB0cmFuc2Zvcm1lZCBzdGF0ZS5cclxuICAgKi9cclxuICB0cmFuc2Zvcm0oc3RhdGU6IFN0YXRlLCBkZWx0YVQ6IG51bWJlcik6IFN0YXRlIHtcclxuICAgIHJldHVybiB0aGlzLmZuKHN0YXRlLCBkZWx0YVQpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyB0eXBlIFNpbXVsYXRlRnVuY3Rpb24gfSBmcm9tICcuL1NpbXVsYXRlRnVuY3Rpb24nO1xyXG5pbXBvcnQgeyB0eXBlIFN0YXRlIH0gZnJvbSAnLi9TdGF0ZSc7XHJcbmltcG9ydCB7IHR5cGUgVHJhbnNmb3JtYXRpb24gfSBmcm9tICcuL1RyYW5zZm9ybWF0aW9uJztcclxuXHJcbi8qKlxyXG4gKiBDb250YWluZXIgZm9yIGEgVW5pdmVyc2UncyBjb25maWd1cmF0aW9uLlxyXG4gKiBAY2F0ZWdvcnkgVHlwZXNcclxuICovXHJcbmV4cG9ydCB0eXBlIFVuaXZlcnNlQ29uZmlnID0ge1xyXG4gIC8qKlxyXG4gICAqIFByZXZpb3VzIHN0YXRlIG9mIHRoZSBVbml2ZXJzZS5cclxuICAgKi9cclxuICBwcmV2U3RhdGU6IFN0YXRlO1xyXG4gIC8qKlxyXG4gICAqIEN1cnJlbnQgc3RhdGUgb2YgdGhlIFVuaXZlcnNlLlxyXG4gICAqL1xyXG4gIGN1cnJTdGF0ZTogU3RhdGU7XHJcbiAgLyoqXHJcbiAgICogQ29sb3Igb2YgdGhlIGJvZGllcyBpbiB0aGUgVW5pdmVyc2UuIEEgc2luZ2xlIGNvbG9yIGFwcGxpZWQgdG8gYWxsIGJvZGllcyBvciBhbiBhcnJheSBvZiBjb2xvcnMgYXBwbGllZCB0byBlYWNoIGJvZHkgcmVzcGVjdGl2ZWx5LiBMZW5ndGggb2YgdGhlIGFycmF5IHNob3VsZCBtYXRjaCB0aGUgbnVtYmVyIG9mIGJvZGllcyBpbiB0aGUgc3RhdGUuXHJcbiAgICovXHJcbiAgY29sb3I6IHN0cmluZyB8IHN0cmluZ1tdO1xyXG4gIC8qKlxyXG4gICAqIExhYmVsIG9mIHRoZSBVbml2ZXJzZS5cclxuICAgKi9cclxuICBsYWJlbDogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFNpbXVsYXRpb24gZnVuY3Rpb24gdXNlZCB0byBzaW11bGF0ZSB0aGUgVW5pdmVyc2UuXHJcbiAgICovXHJcbiAgc2ltRnVuYzogU2ltdWxhdGVGdW5jdGlvbjtcclxuICAvKipcclxuICAgKiBBcnJheSBvZiB0cmFuc2Zvcm1hdGlvbnMgdG8gYmUgYXBwbGllZCB0byB0aGUgVW5pdmVyc2UncyBzdGF0ZSBhZnRlciBzaW11bGF0aW9uIGFuZCBiZWZvcmUgdmlzdWFsaXphdGlvbi5cclxuICAgKi9cclxuICB0cmFuc2Zvcm1hdGlvbnM6IFRyYW5zZm9ybWF0aW9uW107XHJcbn07XHJcblxyXG4vKipcclxuICogQSBVbml2ZXJzZSBvYmplY3QgdGhhdCBjb250YWlucyBwcmV2aW91cyBhbmQgY3VycmVudCBzdGF0ZSBvZiB0aGUgdW5pdmVyc2UsIGEgc2ltdWxhdGlvbiBmdW5jdGlvbiwgZnJhbWUgb2YgcmVmZXJlbmNlIHRyYW5zZm9ybWF0aW9ucyBhbmQgb3RoZXIgbmVjZXNzYXJ5IGRhdGEuXHJcbiAqIEBjYXRlZ29yeSBCdWlsZGluZyBibG9ja3NcclxuICovXHJcbmV4cG9ydCBjbGFzcyBVbml2ZXJzZSB7XHJcbiAgcHJldlN0YXRlOiBTdGF0ZTtcclxuICBjdXJyU3RhdGU6IFN0YXRlO1xyXG4gIC8qKlxyXG4gICAqIENvbG9yIG9mIHRoZSBib2RpZXMgaW4gdGhlIFVuaXZlcnNlLiBBIHNpbmdsZSBjb2xvciBhcHBsaWVkIHRvIGFsbCBib2RpZXMgb3IgYW4gYXJyYXkgb2YgY29sb3JzIGFwcGxpZWQgdG8gZWFjaCBib2R5IHJlc3BlY3RpdmVseS4gSW5jYXNlIG9mIGFycmF5LCBsZW5ndGggc2hvdWxkIG1hdGNoIHRoZSBudW1iZXIgb2YgYm9kaWVzIGluIHRoZSBzdGF0ZS5cclxuICAgKi9cclxuICBjb2xvcjogc3RyaW5nIHwgc3RyaW5nW107XHJcbiAgLyoqXHJcbiAgICogTGFiZWwgb2YgdGhlIFVuaXZlcnNlLlxyXG4gICAqL1xyXG4gIGxhYmVsOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogU2ltdWxhdGlvbiBmdW5jdGlvbiB1c2VkIHRvIHNpbXVsYXRlIHRoZSBVbml2ZXJzZS5cclxuICAgKi9cclxuICBzaW1GdW5jOiBTaW11bGF0ZUZ1bmN0aW9uO1xyXG4gIC8qKlxyXG4gICAqIEFycmF5IG9mIHRyYW5zZm9ybWF0aW9ucyB0byBiZSBhcHBsaWVkIHRvIHRoZSBVbml2ZXJzZSdzIHN0YXRlIGFmdGVyIHNpbXVsYXRpb24gYW5kIGJlZm9yZSB2aXN1YWxpemF0aW9uLlxyXG4gICAqL1xyXG4gIHRyYW5zZm9ybWF0aW9uczogVHJhbnNmb3JtYXRpb25bXTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgbmV3IFVuaXZlcnNlIHdpdGggdGhlIHByb3ZpZGVkIGNvbmZpZ3VyYXRpb24uXHJcbiAgICogQHBhcmFtIGNvbmZpZyBjb25maWd1cmF0aW9uIG9iamVjdC5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFBhcnRpYWw8VW5pdmVyc2VDb25maWc+KSB7XHJcbiAgICBpZiAoY29uZmlnLmN1cnJTdGF0ZSA9PT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgQ3VycmVudCBTdGF0ZSBpbiBVbml2ZXJzZScpO1xyXG4gICAgaWYgKGNvbmZpZy5zaW1GdW5jID09PSB1bmRlZmluZWQpIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBTaW11bGF0aW9uIEZ1bmN0aW9uIGluIFVuaXZlcnNlJyk7XHJcbiAgICB0aGlzLmxhYmVsID0gY29uZmlnLmxhYmVsID09PSB1bmRlZmluZWQgPyAnVW5pdmVyc2UnIDogY29uZmlnLmxhYmVsO1xyXG4gICAgdGhpcy5wcmV2U3RhdGVcclxuICAgICAgPSBjb25maWcucHJldlN0YXRlID09PSB1bmRlZmluZWQgPyBjb25maWcuY3VyclN0YXRlIDogY29uZmlnLnByZXZTdGF0ZTtcclxuICAgIHRoaXMuY3VyclN0YXRlID0gY29uZmlnLmN1cnJTdGF0ZTtcclxuICAgIHRoaXMuY29sb3JcclxuICAgICAgPSBjb25maWcuY29sb3IgPT09IHVuZGVmaW5lZCA/ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDEpJyA6IGNvbmZpZy5jb2xvcjtcclxuICAgIHRoaXMuc2ltRnVuYyA9IGNvbmZpZy5zaW1GdW5jO1xyXG4gICAgdGhpcy50cmFuc2Zvcm1hdGlvbnNcclxuICAgICAgPSBjb25maWcudHJhbnNmb3JtYXRpb25zID09PSB1bmRlZmluZWRcclxuICAgICAgICA/IFtdXHJcbiAgICAgICAgOiBBcnJheS5pc0FycmF5KGNvbmZpZy50cmFuc2Zvcm1hdGlvbnMpXHJcbiAgICAgICAgICA/IGNvbmZpZy50cmFuc2Zvcm1hdGlvbnNcclxuICAgICAgICAgIDogW2NvbmZpZy50cmFuc2Zvcm1hdGlvbnNdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2ltdWxhdGUgYSBzdGVwIGluIHRoZSBVbml2ZXJzZSB1c2luZyB0aGUgU2ltdWxhdGVGdW5jdGlvbiBhbmQgVHJhbnNmb3JtYXRpb25zLlxyXG4gICAqIEBwYXJhbSBkZWx0YVQgdGltZSBzdGVwIHRvIHNpbXVsYXRlLlxyXG4gICAqIEBoaWRkZW5cclxuICAgKi9cclxuICBzaW11bGF0ZVN0ZXAoZGVsdGFUOiBudW1iZXIpIHtcclxuICAgIGxldCBuZXdTdGF0ZSA9IHRoaXMuc2ltRnVuYy5zaW11bGF0ZShcclxuICAgICAgZGVsdGFULFxyXG4gICAgICB0aGlzLmN1cnJTdGF0ZSxcclxuICAgICAgdGhpcy5wcmV2U3RhdGUsXHJcbiAgICApO1xyXG4gICAgdGhpcy5wcmV2U3RhdGUgPSB0aGlzLmN1cnJTdGF0ZTtcclxuICAgIHRoaXMudHJhbnNmb3JtYXRpb25zLmZvckVhY2goKHQpID0+IHtcclxuICAgICAgbmV3U3RhdGUgPSB0LnRyYW5zZm9ybShuZXdTdGF0ZSwgZGVsdGFUKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5jdXJyU3RhdGUgPSBuZXdTdGF0ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlZXAgY29weSB0aGUgY3VycmVudCBVbml2ZXJzZS5cclxuICAgKiBAcmV0dXJucyBhIG5ldyBVbml2ZXJzZSBpbnN0YW5jZS5cclxuICAgKi9cclxuICBjbG9uZSgpOiBVbml2ZXJzZSB7XHJcbiAgICByZXR1cm4gbmV3IFVuaXZlcnNlKHtcclxuICAgICAgcHJldlN0YXRlOiB0aGlzLnByZXZTdGF0ZS5jbG9uZSgpLFxyXG4gICAgICBjdXJyU3RhdGU6IHRoaXMuY3VyclN0YXRlLmNsb25lKCksXHJcbiAgICAgIGNvbG9yOiB0aGlzLmNvbG9yLFxyXG4gICAgICBsYWJlbDogdGhpcy5sYWJlbCxcclxuICAgICAgc2ltRnVuYzogdGhpcy5zaW1GdW5jLFxyXG4gICAgICB0cmFuc2Zvcm1hdGlvbnM6IHRoaXMudHJhbnNmb3JtYXRpb25zLFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZGVmaW5lIiwiYW1kIiwidGhpcyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzYwNF9fIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fOTI0X18iLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX185ODdfXyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzY4Nl9fIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsIkNlbGVzdGlhbEJvZHkiLCJjb25zdHJ1Y3RvciIsImxhYmVsIiwibWFzcyIsInBvc2l0aW9uIiwidmVsb2NpdHkiLCJhY2NlbGVyYXRpb24iLCJjbG9uZSIsIkdyYXZpdHkiLCJHIiwiZ2V0Rm9yY2VzIiwiYm9kaWVzIiwibGVuZ3RoIiwiYW5zIiwiaSIsInB1c2giLCJWZWN0b3IzIiwiaiIsImN1cnJGb3JjZSIsImNhbGNOZXd0b25pYW4iLCJhZGQiLCJzdWIiLCJiIiwiZGlzdFNxIiwiZGlzdGFuY2VUb1NxdWFyZWQiLCJmb3JjZVZhbCIsIm5vcm1hbGl6ZSIsIm11bHRpcGx5U2NhbGFyIiwiQ2VudHJpcGV0YWxGb3JjZSIsImNlbnRlciIsIm1hcCIsImJvZHkiLCJkaXJlY3Rpb25WZWN0b3IiLCJzZXRMZW5ndGgiLCJsZW5ndGhTcSIsIkNvbWJpbmVkRm9yY2UiLCJmb3JjZXMiLCJmb3JFYWNoIiwiZm9yY2UiLCJ2YWwiLCJpbmRleCIsIlN0YXRlIiwiVmVsb2NpdHlWZXJsZXRTaW0iLCJmb3JjZUNhbGN1bGF0b3IiLCJzaW11bGF0ZSIsImRlbHRhVCIsImN1cnJTdGF0ZSIsInVwZGF0ZWRCb2RpZXMiLCJ2IiwidXBkYXRlZEJvZHkiLCJjYWxjTmV3UG9zIiwibmV3Rm9yY2VzIiwibmV3QWNjZWwiLCJkaXZpZGVTY2FsYXIiLCJjdXJyUG9zIiwiY3VyclZlbCIsImN1cnJBY2NlbCIsIkV4cGxpY2l0RXVsZXJTaW0iLCJyYXRlVXBkYXRlIiwidXBkYXRlZEZvcmNlcyIsInByZXYiLCJyYXRlIiwiU2VtaUltcGxpY2l0RXVsZXJTaW0iLCJ1cGRhdGVkVmVsIiwiUnVuZ2VLdXR0YTRTaW0iLCJ3ZWlnaHRzIiwiRXJyb3IiLCJib2RpZXNLIiwia3YiLCJreCIsImsydiIsImdldEludGVyS1YiLCJrMngiLCJnZXRJbnRlcktYIiwiazN2IiwiazN4IiwiazR2IiwiazR4Iiwid2VpZ2h0ZWRYUmF0ZSIsIndlaWdodGVkVlJhdGUiLCJrckluZCIsIm5ld0JvZGllcyIsIm5ld0JvZHkiLCJrSW5kIiwiTGFtYmRhU2ltIiwiZm4iLCJwcmV2U3RhdGUiLCJDb250cm9sbGVyIiwicGFyZW50Iiwib2JqZWN0IiwicHJvcGVydHkiLCJjbGFzc05hbWUiLCJlbGVtZW50VHlwZSIsIl9kaXNhYmxlZCIsIl9oaWRkZW4iLCJpbml0aWFsVmFsdWUiLCJnZXRWYWx1ZSIsImRvbUVsZW1lbnQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCIkbmFtZSIsIm5leHROYW1lSUQiLCJpZCIsIiR3aWRnZXQiLCIkZGlzYWJsZSIsImFwcGVuZENoaWxkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJzdG9wUHJvcGFnYXRpb24iLCJjaGlsZHJlbiIsImNvbnRyb2xsZXJzIiwiJGNoaWxkcmVuIiwiX2xpc3RlbkNhbGxiYWNrIiwiYmluZCIsIm5hbWUiLCJfbmFtZSIsInRleHRDb250ZW50Iiwib25DaGFuZ2UiLCJjYWxsYmFjayIsIl9vbkNoYW5nZSIsIl9jYWxsT25DaGFuZ2UiLCJfY2hhbmdlZCIsIm9uRmluaXNoQ2hhbmdlIiwiX29uRmluaXNoQ2hhbmdlIiwiX2NhbGxPbkZpbmlzaENoYW5nZSIsInJlc2V0Iiwic2V0VmFsdWUiLCJlbmFibGUiLCJlbmFibGVkIiwiZGlzYWJsZSIsImRpc2FibGVkIiwidG9nZ2xlIiwidG9nZ2xlQXR0cmlidXRlIiwic2hvdyIsInN0eWxlIiwiZGlzcGxheSIsImhpZGUiLCJvcHRpb25zIiwiY29udHJvbGxlciIsImRlc3Ryb3kiLCJtaW4iLCJtYXgiLCJzdGVwIiwiZGVjaW1hbHMiLCJsaXN0ZW4iLCJfbGlzdGVuaW5nIiwiX2xpc3RlbkNhbGxiYWNrSUQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImN1clZhbHVlIiwic2F2ZSIsIl9saXN0ZW5QcmV2VmFsdWUiLCJ1cGRhdGVEaXNwbGF5IiwibG9hZCIsInNwbGljZSIsImluZGV4T2YiLCJyZW1vdmVDaGlsZCIsIkJvb2xlYW5Db250cm9sbGVyIiwic3VwZXIiLCIkaW5wdXQiLCJzZXRBdHRyaWJ1dGUiLCJjaGVja2VkIiwibm9ybWFsaXplQ29sb3JTdHJpbmciLCJzdHJpbmciLCJtYXRjaCIsInJlc3VsdCIsInBhcnNlSW50IiwidG9TdHJpbmciLCJwYWRTdGFydCIsIklOVCIsImlzUHJpbWl0aXZlIiwiZnJvbUhleFN0cmluZyIsInN1YnN0cmluZyIsInRvSGV4U3RyaW5nIiwiQVJSQVkiLCJBcnJheSIsImlzQXJyYXkiLCJ0YXJnZXQiLCJyZ2JTY2FsZSIsImludCIsImciLCJPQkpFQ1QiLCJGT1JNQVRTIiwiQ29sb3JDb250cm9sbGVyIiwiJHRleHQiLCIkZGlzcGxheSIsIl9mb3JtYXQiLCJmaW5kIiwiZm9ybWF0IiwiX3JnYlNjYWxlIiwiX2luaXRpYWxWYWx1ZUhleFN0cmluZyIsIl90ZXh0Rm9jdXNlZCIsIl9zZXRWYWx1ZUZyb21IZXhTdHJpbmciLCJ0cnlQYXJzZSIsInNlbGVjdCIsIm5ld1ZhbHVlIiwiYmFja2dyb3VuZENvbG9yIiwiRnVuY3Rpb25Db250cm9sbGVyIiwiJGJ1dHRvbiIsInByZXZlbnREZWZhdWx0IiwicGFzc2l2ZSIsIk51bWJlckNvbnRyb2xsZXIiLCJfaW5pdElucHV0Iiwic3RlcEV4cGxpY2l0IiwiX2dldEltcGxpY2l0U3RlcCIsIl9kZWNpbWFscyIsIl9taW4iLCJfb25VcGRhdGVNaW5NYXgiLCJfbWF4IiwiZXhwbGljaXQiLCJfc3RlcCIsIl9zdGVwRXhwbGljaXQiLCJfaGFzU2xpZGVyIiwicGVyY2VudCIsIk1hdGgiLCIkZmlsbCIsIndpZHRoIiwiX2lucHV0Rm9jdXNlZCIsInRvRml4ZWQiLCJ3aW5kb3ciLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsImluY3JlbWVudCIsImRlbHRhIiwicGFyc2VGbG9hdCIsImlzTmFOIiwiX3NuYXBDbGFtcFNldFZhbHVlIiwiaW5pdENsaWVudFgiLCJpbml0Q2xpZW50WSIsInByZXZDbGllbnRZIiwiaW5pdFZhbHVlIiwiZHJhZ0RlbHRhIiwidGVzdGluZ0ZvclZlcnRpY2FsRHJhZyIsIm9uTW91c2VNb3ZlIiwiZHgiLCJjbGllbnRYIiwiZHkiLCJjbGllbnRZIiwiYWJzIiwiYmx1ciIsIl9zZXREcmFnZ2luZ1N0eWxlIiwib25Nb3VzZVVwIiwiX2Fycm93S2V5TXVsdGlwbGllciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfc25hcCIsIl9jbGFtcCIsImNvZGUiLCJfbm9ybWFsaXplTW91c2VXaGVlbCIsIl9pbml0U2xpZGVyIiwiJHNsaWRlciIsImluc2VydEJlZm9yZSIsInNldFZhbHVlRnJvbVgiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsInJpZ2h0IiwiYyIsIm1vdXNlTW92ZSIsIm1vdXNlVXAiLCJwcmV2Q2xpZW50WCIsInRlc3RpbmdGb3JTY3JvbGwiLCJiZWdpblRvdWNoRHJhZyIsInRvdWNoZXMiLCJvblRvdWNoTW92ZSIsIm9uVG91Y2hFbmQiLCJjYWxsT25GaW5pc2hDaGFuZ2UiLCJ3aGVlbEZpbmlzaENoYW5nZVRpbWVvdXQiLCJfaGFzU2Nyb2xsQmFyIiwiZGVsdGFYIiwiZGVsdGFZIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImFjdGl2ZSIsImF4aXMiLCJfaGFzTWluIiwiX2hhc01heCIsImZsb29yIiwid2hlZWxEZWx0YSIsIm11bHQiLCJzaGlmdEtleSIsImFsdEtleSIsInJvdW5kIiwidG9QcmVjaXNpb24iLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJPcHRpb25Db250cm9sbGVyIiwiJHNlbGVjdCIsIl92YWx1ZXMiLCJzZWxlY3RlZEluZGV4IiwicmVtb3ZlIiwidmFsdWVzIiwiX25hbWVzIiwia2V5cyIsInJlcGxhY2VDaGlsZHJlbiIsIiRvcHRpb24iLCJTdHJpbmdDb250cm9sbGVyIiwic3R5bGVzSW5qZWN0ZWQiLCJHVUkiLCJhdXRvUGxhY2UiLCJjb250YWluZXIiLCJ0aXRsZSIsImNsb3NlRm9sZGVycyIsImluamVjdFN0eWxlcyIsInRvdWNoU3R5bGVzIiwiZm9sZGVycyIsIl9jbG9zZWQiLCIkdGl0bGUiLCJvcGVuQW5pbWF0ZWQiLCJjbGljayIsImNzc0NvbnRlbnQiLCJpbmplY3RlZCIsImlubmVySFRNTCIsImJlZm9yZSIsInF1ZXJ5U2VsZWN0b3IiLCJoZWFkIiwiX2luamVjdFN0eWxlcyIsInNldFByb3BlcnR5IiwiX2Nsb3NlRm9sZGVycyIsIiQxIiwiY29uc29sZSIsImVycm9yIiwiYWRkQ29sb3IiLCJhZGRGb2xkZXIiLCJmb2xkZXIiLCJjbG9zZSIsInJlY3Vyc2l2ZSIsImYiLCJfdGl0bGUiLCJvcGVuIiwiX3NldENsb3NlZCIsImNsb3NlZCIsIl9jYWxsT25PcGVuQ2xvc2UiLCJpbml0aWFsSGVpZ2h0IiwiaGVpZ2h0Iiwib25UcmFuc2l0aW9uRW5kIiwidGFyZ2V0SGVpZ2h0IiwiY29udHJvbGxlcnNSZWN1cnNpdmUiLCJvbk9wZW5DbG9zZSIsIl9vbk9wZW5DbG9zZSIsImNoYW5nZWRHVUkiLCJwYXJlbnRFbGVtZW50IiwiZnJvbSIsImNvbmNhdCIsImZvbGRlcnNSZWN1cnNpdmUiLCJhbmltYXRpb25JZCIsImNsaXBNaW5NYXgiLCJ4IiwiUGxvdGx5VW5pdmVyc2VUcmFpbCIsIm1heFRyYWlsTGVuZ3RoIiwiY29sb3IiLCJkYXRhIiwieSIsIm1vZGUiLCJtYXJrZXIiLCJzaXplIiwidHJhaWxMZW5ndGgiLCJ0cmFpbEluZCIsImFkZFRyYWlsIiwicG9wQWxsVHJhaWxzIiwiUmVhbFRpbWVWaXN1YWxpemVyIiwic2ltdWxhdGlvbiIsImRpdklkIiwidW5pdmVyc2VUcmFpbHMiLCJhZGRDb250cm9scyIsImd1aSIsInRvcCIsInpJbmRleCIsImNvbmZpZyIsImNvbnRyb2xzIiwidXQiLCJzaG93VHJhaWxzIiwic2hvd1VuaXZlcnNlRm9sZGVyIiwidW5pdmVyc2VzIiwidSIsInNob3dVbml2ZXJzZSIsInN0YXJ0IiwiZWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiLCJzY2FsZSIsImxheW91dCIsInBhcGVyX2JnY29sb3IiLCJwbG90X2JnY29sb3IiLCJmb250IiwieGF4aXMiLCJhdXRvcmFuZ2UiLCJyYW5nZSIsInlheGlzIiwic2hvd2xlZ2VuZCIsInN0YXRzIiwic2hvd0RlYnVnSW5mbyIsImRvbSIsImJvdHRvbSIsInJlbW92ZVByb3BlcnR5IiwiaW5pdF9kYXRhIiwiZmxhdE1hcCIsInVuaSIsImN1cnJUcmFpbCIsImdldE1heFRyYWlsTGVuZ3RoIiwiY3VyckRhdGEiLCJ0eXBlIiwic2l6ZW1pbiIsImdldFNob3dUcmFpbHMiLCJzY3JvbGxab29tIiwibW9kZUJhckJ1dHRvbnNUb1JlbW92ZSIsInRpbWVQZXJGcmFtZSIsIm1heEZyYW1lUmF0ZSIsImxhc3RQYWludFRpbWVzdGFtcE1zIiwibGFzdFNpbVRpbWVzdGFtcE1zIiwidGltZXN0YW1wTXMiLCJzaW11bGF0ZVN0ZXAiLCJzcGVlZCIsInBhaW50IiwicGF1c2VkIiwibmV3X2RhdGEiLCJnZXRTaG93VW5pdmVyc2UiLCJob3ZlcnRleHQiLCJ0cmFpbERhdGEiLCJ1cGRhdGUiLCJzdG9wIiwiVGhyZWVVbml2ZXJzZVRyYWlsIiwic2NlbmUiLCJnZW9tZXRyeSIsIkZsb2F0MzJBcnJheSIsInRyYWlscyIsInBvcyIsInZpc2libGUiLCJwb3NBcnJheSIsInNldCIsImF0dHJpYnV0ZXMiLCJhcnJheSIsInRvQXJyYXkiLCJuZWVkc1VwZGF0ZSIsIlJlYWxUaW1lVmlzdWFsaXplcjNEIiwiY2FtZXJhIiwicmVuZGVyZXIiLCJzZXRTaXplIiwiYXV0b0NsZWFyIiwib3JiaXRDb250cm9scyIsIk9yYml0Q29udHJvbHMiLCJsaXN0ZW5Ub0tleUV2ZW50cyIsImF4ZXNIZWxwZXIiLCJ2aWV3SGVscGVyIiwiVmlld0hlbHBlciIsImFyciIsInNwaCIsImxvZzIiLCJjdXJyIiwibGluZSIsImNvcHkiLCJwZXJmb3JtYW5jZSIsIm5vdyIsImxhc3RQYWludCIsImNsZWFyIiwicmVuZGVyIiwiaW5kIiwiUmVjb3JkaW5nVmlzdWFsaXplciIsInJlY29yZEZvciIsInJlY29yZGVkRnJhbWVzIiwidG90YWxGcmFtZXMiLCJwbGF5SW5kIiwiY3VyclBsYXlJbmQiLCJsb29wZWQiLCJSZWNvcmRpbmdWaXN1YWxpemVyM0QiLCJTaW11bGF0aW9uIiwidmlzVHlwZSIsInJlY29yZCIsIlNldCIsInZpc3VhbGl6ZXIiLCJnZXRTcGVlZCIsInNldFNwZWVkIiwiaXNQbGF5aW5nIiwicGF1c2UiLCJyZXN1bWUiLCJzZXRTaG93VHJhaWxzIiwic2V0U2hvd1VuaXZlcnNlIiwic2V0TWF4VHJhaWxMZW5ndGgiLCJ1bml2ZXJzZSIsIkJvZHlDZW50ZXJUcmFuc2Zvcm1hdGlvbiIsInRyYW5zZm9ybSIsInN0YXRlIiwiQ29NVHJhbnNmb3JtYXRpb24iLCJ0b3RhbE1hc3MiLCJjb20iLCJSb3RhdGVUcmFuc2Zvcm1hdGlvbiIsImFuZ2xlIiwiYXBwbHlBeGlzQW5nbGUiLCJMYW1iZGFUcmFuc2Zvcm1hdGlvbiIsIlVuaXZlcnNlIiwic2ltRnVuYyIsInRyYW5zZm9ybWF0aW9ucyIsIm5ld1N0YXRlIiwidCJdLCJzb3VyY2VSb290IjoiIn0=